{
  "comments": [
    {
      "key": {
        "uuid": "dd1ac541_0cc5be6d",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-01-08T01:32:00Z",
      "side": 1,
      "message": "One of the benefits of the solution I had in https://android-review.googlesource.com/c/platform/build/+/1202895 is that it will check the manifests per partition. So, if we are only building the system image (e.g. I think this is the case for aosp_* on aosp, right?) things still get checked.\n\nIs there a way to preserve that here?",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e83b04b3_d22dda4d",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-01-08T01:54:02Z",
      "side": 1,
      "message": "Personally, I think such checks aren\u0027t complete, so I\u0027m deliberately dropping such checks. If you are only building the system image, there is no meaningful VINTF compatibility to check, because there is no VINTF boundary.\n\nHowever, if you are referring to the *consistency* of VINTF metadata in a single image (e.g. one vendor manifest says target FCM version X, and another vendor manifest says target FCM version Y), then I agree that such consistency check is lost. Let me know if this is what you are referring to, and I\u0027ll amend / add new CLs to address this.",
      "parentUuid": "dd1ac541_0cc5be6d",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c147895_e3af192f",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-01-08T02:03:02Z",
      "side": 1,
      "message": "Also, I think it makes sense to check consistency in system image for AOSP targets (because we release those GSI images) and probably vendor-only builds (for OEMs), but I don\u0027t think it applies to other images (especially odm / product / system_ext), because libvintf pretty much *requires* system and vendor to exist before reading VINTF metadata in odm / product / system_ext..",
      "parentUuid": "e83b04b3_d22dda4d",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725c0e51_4ac7ada4",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-01-08T02:54:17Z",
      "side": 1,
      "message": "I just checked that GSI builds does have a vendor partition because of CL:985304. So it is still checked for AOSP targets.\n\n(I don\u0027t know if this is intended though. GSI builds do seem to have a fake vendor partition. Szuwei, is it intended to have vendor images built for AOSP targets?)",
      "parentUuid": "1c147895_e3af192f",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64eb14c3_69d53512",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-01-08T20:44:35Z",
      "side": 1,
      "message": "\u003e I\u0027m deliberately dropping such checks. If you are only building the system image, there is no meaningful VINTF compatibility to check, because there is no VINTF boundary.\n\nWe still want to check that all of the files parse correctly and, for instance, that there aren\u0027t conflicts between fragments. So, we don\u0027t need compatibility checks, but we need to build or at least parse the manifest.\n\n\n\nAlso, will this break for manifests which are copied with PRODUCT_COPY_FILES? Is there a way we can make those manifests a build error?",
      "parentUuid": "725c0e51_4ac7ada4",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05aa5729_5d87fd72",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-01-08T21:32:55Z",
      "side": 1,
      "message": "\u003e We still want to check that all of the files parse correctly\n\nWe already check files being parsed correctly. For DEVICE_MANIFEST_FILE and friends, they are checked in build/make/target/board/Android.mk system/libhidl/vintfdata/Android.mk hardware/interfaces/compatibility_matrices/Android.mk. For vintf_fragments defined in Soong modules, they are also checked. (This does not include PRODUCT_COPY_FILES. See below.)\n\n\u003e that there aren\u0027t conflicts between fragments.\n\nThis is the part that would be missed. However, for HALs with vintf_fragments, if they use \u003cfqname\u003e tags, there will never be a conflict. Only HALs with vintf_fragments that uses the old-style \u003cversion\u003e\u003cinterface\u003e\u003cinstance\u003e tags may cause a conflict. (And if they do, it is very likely due to a dirty intermediate build with 1.0 and 1.1 version of a HAL installed together). So I don\u0027t view this as a very big issue. \n\nOther information may cause a conflict too, but it is not likely to happen unless a developer deliberately do something wrong (e.g. define BOARD_SEPOLICY_VERS as well as declaring a value in the manifest directly).\n\n(This does not include PRODUCT_COPY_FILES. See below.)\n\nAlso see my previous comment: AOSP targets also build a vendor image right now, so they will be checked. For *SSI builds, the problem will also surface when they merge the builds.\n\n\u003e Also, will this break for manifests which are copied with PRODUCT_COPY_FILES?\n\nIf you are worried that OEMs do PRODUCT_COPY FILES, I can add an explicit check for PRODUCT_COPY_FILES (that it doesn\u0027t copy to VINTF locations). I can do that in a follow up CL.",
      "parentUuid": "64eb14c3_69d53512",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74ac1ae0_d9a4bdc9",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 3647,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2020-01-08T21:54:19Z",
      "side": 1,
      "message": "\u003e So I don\u0027t view this as a very big issue. \n\u003e but it is not likely to happen unless a developer deliberately do something wrong\n\nSure, but in principle, we shouldn\u0027t be losing this functionality. It\u0027s nice to have, and it seems like it shouldn\u0027t be too hard to keep it? Is it a lot of work?\n\n\u003e If you are worried that OEMs do PRODUCT_COPY FILES, I can add an explicit check for PRODUCT_COPY_FILES (that it doesn\u0027t copy to VINTF locations). I can do that in a follow up CL.\n\nPlease do.",
      "parentUuid": "05aa5729_5d87fd72",
      "range": {
        "startLine": 3646,
        "startChar": 0,
        "endLine": 3647,
        "endChar": 36
      },
      "revId": "b7c8bca840afb2859060b8dd9f0b022c138eccf6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}