{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2d14a0aa_13feec19",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2024-02-05T08:38:38Z",
      "side": 1,
      "message": "Why are the _impl `pub`?",
      "range": {
        "startLine": 139,
        "startChar": 3,
        "endLine": 139,
        "endChar": 4
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2eccac8_05f49269",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2024-02-05T14:57:59Z",
      "side": 1,
      "message": "The impl are pub so that we can test these implementations. The impl takes one more input argument which is the pb file. In the actual api, the pb file location is fixed to a constant at /metadata/aconfig/storage_files.pb, and in rust_test, the device does not give permission to write to /metadata for rust_test target. With the impl api, we can create a temp pb file at /tmp and the device won\u0027t complain.\n\nAre there ways to write to /metadata in a rust_test?",
      "parentUuid": "2d14a0aa_13feec19",
      "range": {
        "startLine": 139,
        "startChar": 3,
        "endLine": 139,
        "endChar": 4
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e14b1c00_17c3fef7",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2024-02-05T15:15:56Z",
      "side": 1,
      "message": "By test do you mean an integration test on device?\n\nHow about restructuring the code so that _impl methods take a pointer to an already mmapped file? The real code can mmap from a physical file, the tests cases can create an mmap from memory (MAP_ANONYMOUS in mmap(2)).",
      "parentUuid": "d2eccac8_05f49269",
      "range": {
        "startLine": 139,
        "startChar": 3,
        "endLine": 139,
        "endChar": 4
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909924f0_b05bb93f",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2024-02-05T15:18:17Z",
      "side": 1,
      "message": "To clarify: while I think abstracting input sources as soon as possible (to make the rest of the code easier to test) is a good thing in general, what I really want to make sure is that this lib doesn\u0027t expose any APIs that aren\u0027t necessary.\n\nConsider using `pub (crate)` where possible. See https://doc.rust-lang.org/reference/visibility-and-privacy.html.",
      "parentUuid": "e14b1c00_17c3fef7",
      "range": {
        "startLine": 139,
        "startChar": 3,
        "endLine": 139,
        "endChar": 4
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7293a4_a64788e3",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2024-02-05T08:38:38Z",
      "side": 1,
      "message": "If this is part of the public API exported by this soong module, add documentation on how to call it. Also add a high-level overview of how to use the module in lib.rs. Run `cargo doc` to inspect the results.\n\nAlso make a note that the API is fairly low level and only the auto-generated aconfig code is expected to call it, and add a \"see \u003clink to some aconfig doc\u003e for higher level access\"?",
      "range": {
        "startLine": 146,
        "startChar": 7,
        "endLine": 146,
        "endChar": 25
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7692df25_673bec0f",
        "filename": "tools/aconfig/aconfig_storage_file/src/lib.rs",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2024-02-05T15:27:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a7293a4_a64788e3",
      "range": {
        "startLine": 146,
        "startChar": 7,
        "endLine": 146,
        "endChar": 25
      },
      "revId": "52b5a540edc37ba17c70b3487e3d3a9d3eb7ce62",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}