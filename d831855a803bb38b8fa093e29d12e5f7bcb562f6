{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "86bf2e6a_1414548f",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-03-14T12:24:32Z",
      "side": 1,
      "message": "Do I understand correctly that $system_inner_tree will be the inner tree where the system partition lives, which is different both from the \"outer tree\" and from $ANDROID_BUILD_TOP?",
      "range": {
        "startLine": 25,
        "startChar": 50,
        "endLine": 25,
        "endChar": 57
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f182e352_887d7b7f",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-03-15T20:00:29Z",
      "side": 1,
      "message": "Yes I think that\u0027s correct. By way of example, in the following multi-tree setup\n```\nmain-with-sc-mainline-prod\n├── main\n├── sc-mainline-prod\n├── tools\n```\n`outer_tree`: main-with-sc-mainline-prod\n`system_inner_tree`: main *(based on your new lunch-ed configuration)\n`ANDROID_BUILD_TOP(s)`: main, sc-mainline-prod (same as the single-tree build top)",
      "parentUuid": "86bf2e6a_1414548f",
      "range": {
        "startLine": 25,
        "startChar": 50,
        "endLine": 25,
        "endChar": 57
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a465f7_12bb1801",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-03-14T12:24:32Z",
      "side": 1,
      "message": "nit: quote variable references with double quotes (\"$ANDROID_BUILD_TOP\") so that spaces in them don\u0027 confuse the script. \n\nAlso everywhere else below.",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 36
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d314877a_9712ab74",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 26,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-03-15T20:00:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23a465f7_12bb1801",
      "range": {
        "startLine": 26,
        "startChar": 18,
        "endLine": 26,
        "endChar": 36
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a47860ae_1cf74c6b",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-03-14T12:24:32Z",
      "side": 1,
      "message": "This invocation will wipe the caches of the currently executing Bazel server: that one is running with `--package_path\u003d%workspace%/out/soong/workspace` and this one is not.\n\nLet me see if I understand this correctly:\n\n1. The Soong invocation in an inner tree requires knowing the API surfaces in potentially every other inner tree\n2. API surfaces are built in every inner tree using Bazel\n3. What Bazel does in any inner tree \"officially\" depends on what Soong does in that tree (since a lot of the BUILD files are generated by Soong)\n\nIs this correct? If so, I can see three ways around this:\n\nA. run this Bazel invocation with a different --output_base so that it\u0027s cached separately from the invocations using tools/bazel/bazel.sh (suboptimal, since there are two ways to invoke Bazel now)\n\nB. Establish a directed acyclic graph of inner trees where an edge means \"this inner tree depends on that inner tree\". This would let one run Soong on the bottom-most one without requiring running Bazel in that one, then running Bazel on it, and then work from there upwards. Can we establish such a graph of inner trees? \n\nC. Run Bazel through bazel.sh without running Soong and rely on some invariant encoded somewhere that makes it so that the output of this Bazel invocation before running bp2build is the same as doing so after it.\n\nWDYT?",
      "range": {
        "startLine": 51,
        "startChar": 21,
        "endLine": 51,
        "endChar": 64
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b72d802_622351ef",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-03-15T20:00:29Z",
      "side": 1,
      "message": "\u003e 3. What Bazel does in any inner tree \"officially\" depends on what Soong does in that tree (since a lot of the BUILD files are generated by Soong)\n\nI think *_api_surfaces and *_api_contributions are special in the sense that none of their dependencies come from BUILD files generated by Soong. \n\nGiven this, perhaps we do not need a DAG of inner trees at all. Maybe we can just use option A so that it does not wipe the cache?\n\u003e A. run this Bazel invocation with a different --output_base so that it\u0027s cached separately from the invocations using tools/bazel/bazel.sh (suboptimal, since there are two ways to invoke Bazel now)",
      "parentUuid": "a47860ae_1cf74c6b",
      "range": {
        "startLine": 51,
        "startChar": 21,
        "endLine": 51,
        "endChar": 64
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d7ea9c9_2d25cf3a",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 68,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2022-03-14T12:24:32Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 68,
        "startChar": 18,
        "endLine": 68,
        "endChar": 25
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98fc9d76_c1c82e94",
        "filename": "tools/orchestrator/build_orchestrator.sh",
        "patchSetId": 9
      },
      "lineNbr": 68,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-03-15T20:00:29Z",
      "side": 1,
      "message": "Thanks for catching this, I have fixed it",
      "parentUuid": "6d7ea9c9_2d25cf3a",
      "range": {
        "startLine": 68,
        "startChar": 18,
        "endLine": 68,
        "endChar": 25
      },
      "revId": "d831855a803bb38b8fa093e29d12e5f7bcb562f6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}