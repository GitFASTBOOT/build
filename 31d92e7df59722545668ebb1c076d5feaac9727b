{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e3c1b67_99924507",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 58,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T15:01:08Z",
      "side": 1,
      "message": "These are required options.\n```suggestion\n  argparser.add_argument(\u0027--target_product\u0027, required\u003dTrue)\n  argparser.add_argument(\u0027--target_release\u0027, required\u003dTrue)\n```",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 58,
        "endChar": 44
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac9b509e_8f6e3cde",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 58,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e3c1b67_99924507",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 58,
        "endChar": 44
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83530003_f2dc5315",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "why do we implicitly add general-tests here? prefer adding general-tests explicitly",
      "range": {
        "startLine": 77,
        "startChar": 23,
        "endLine": 77,
        "endChar": 38
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c6d46b_8d5174e8",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 77,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "I took it out of the gcl config. If we build optimized then we can\u0027t have `general-tests` in the list of modules to build but we do build it when we\u0027re building everything, so we\u0027re either stripping it out of the command in the optimized case or adding it in the unoptimized case. How would you handle adding it explictly?",
      "parentUuid": "83530003_f2dc5315",
      "range": {
        "startLine": 77,
        "startChar": 23,
        "endLine": 77,
        "endChar": 38
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7162b07e_f0bdaf83",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 104,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T15:01:08Z",
      "side": 1,
      "message": "Is this a fair assumption about the location of soong_ui.bash ?\n\nThis should be calculated based on TOP to stay consistent with other code in the same file. This can probably move into a function as I see other code need this too. Do we just assume CWD everywhere or use TOP ? Question for build team.",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1046257_51c0c2c9",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 104,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "or, pass in the path for soong_ui.bash from commandline? so configured in gcl?",
      "parentUuid": "7162b07e_f0bdaf83",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9021bbe6_14d50506",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 104,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "assuming CWD is TOP on the build is safe, I discussed with build team before. I think we\u0027re also trying to strip as much out of the gcl config as possible so I\u0027d prefer David\u0027s approach of using the same TOP variable and falling back on CWD.",
      "parentUuid": "d1046257_51c0c2c9",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84d0e21f_9f84de11",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T15:01:08Z",
      "side": 1,
      "message": "Does TARGET_RELEASE and TARGET_PRODUCT need to be supplied on the build command or can they be supplied in the environment ?\n\nIt would be more consistent to throw them all in the environment in parent and then pass through to every command, rather than having them as arguments that get passed through and are easy to forget (for example, when calling soong_ui in some places, you don\u0027t pass through both TARGET_RELEASE and TARGET_PRODUCT).",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e361946a_38f23fdb",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "agreed. but we need to explicitly check these environments.",
      "parentUuid": "84d0e21f_9f84de11",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1394983_39d3142c",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 108,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e361946a_38f23fdb",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17288390_5d57e69b",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T15:01:08Z",
      "side": 1,
      "message": "Why are we using subprocess.Popen here instead of subprocess.run ? It sounds like we just need to use subprocess.run but don\u0027t capture_output so we can make sure any output isn\u0027t lost. With that in mind, we also don\u0027t need any code to capture SIGINT.\n\n```suggestion\ndef run_command(args: list[str]):\n  subprocess.run(args\u003dargs, check\u003dTrue)\n```\n\nOther notes:\n- We likely also need some code for suppressing the traceback in case of subprocess.CalledProcessError because otherwise folks are going to be debugging ci/build_test_suites.py every time there\u0027s a build error. We just want to get people focused on the error in the build command only.\n- We likely want to print major commands executed that are likely to fail (with a + in front) to aid with debugging. Most likely we need this for the build command and any other commands that are likely to fail.",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d8bd349_1b7c5fb0",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "Using subprocess.Run mutes all stdout when run locally.",
      "parentUuid": "17288390_5d57e69b",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa853c91_9140e218",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T18:35:13Z",
      "side": 1,
      "message": "For me, that\u0027s only the case when you use capture_output\u003dTrue (I tested on my machine with a 1-liner script).\n\nsubprocess.run is more modern compared to Popen and helps avoid common bugs",
      "parentUuid": "2d8bd349_1b7c5fb0",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10c24b73_d2b89c75",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T18:39:21Z",
      "side": 1,
      "message": "My understanding is that when `ctrl+c` is pressed the entire process group gets the SIGINT but when a specific `kill -INT \u003cpid\u003e` gets sent then only the python script gets interrupted and not the called subprocess. That\u0027s why I use `Popen` and not the standard subprocess.run so I can make sure to pass down the sigint.",
      "parentUuid": "fa853c91_9140e218",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0f53ca6_16b6d456",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T18:47:31Z",
      "side": 1,
      "message": "Can you show me a recipe for reproducing this?\n\n```\n$ python -c \u0027import subprocess; subprocess.run(\"sleep infinity\", shell\u003dTrue, check\u003dTrue)\u0027 \u0026\n[1] 1253789\n$ ps -eo cmd | grep infinity\npython -c import subprocess; subprocess.run(\"sleep infinity\", shell\u003dTrue, check\u003dTrue)\nsleep infinity\ngrep --color\u003dauto infinity\n$ kill -INT %1\nTraceback (most recent call last):\n  File \"\u003cstring\u003e\", line 1, in \u003cmodule\u003e\n  File \"/usr/lib/python3.11/subprocess.py\", line 550, in run\n    stdout, stderr \u003d process.communicate(input, timeout\u003dtimeout)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/subprocess.py\", line 1201, in communicate\n    self.wait()\n  File \"/usr/lib/python3.11/subprocess.py\", line 1264, in wait\n    return self._wait(timeout\u003dtimeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/subprocess.py\", line 2046, in _wait\n    (pid, sts) \u003d self._try_wait(0)\n                 ^^^^^^^^^^^^^^^^^\n  File \"/usr/lib/python3.11/subprocess.py\", line 2004, in _try_wait\n    (pid, sts) \u003d os.waitpid(self.pid, wait_flags)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nKeyboardInterrupt\n\n[1]+  Interrupt               python -c \u0027import subprocess; subprocess.run(\"sleep infinity\", shell\u003dTrue, check\u003dTrue)\u0027\n$ ps -eo cmd | grep infinity\ngrep --color\u003dauto infinity\n```\n\nSeems to work with the above program.",
      "parentUuid": "10c24b73_d2b89c75",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0257175d_0f86107d",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T18:52:27Z",
      "side": 1,
      "message": "It\u0027s not something I reproduced locally, it was just what i inferenced from looking up how people were handling interrupt signals in python. If in fact this is not the case then I will switch to just using subprocess.run. Dan had also mentioned properly handling SIGINT when it used to just be using subprocess.run so it sounded like that wasn\u0027t correctly handling it.",
      "parentUuid": "c0f53ca6_16b6d456",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4fc8951_0e746e82",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T19:02:54Z",
      "side": 1,
      "message": "Got it. Your original code had the bug that if you hit CTRL-C it is possible all output would be lost and never printed. You\u0027ve fixed that now because you aren\u0027t buffering the output.\n\nBefore adding SIGINT checking, I would suggest to check with Dan to see if there\u0027s some additional test cases. We need to reproduce the problem before introducing any fix, to make sure that 1) there\u0027s a real problem, and 2) that the fix fixes it.",
      "parentUuid": "0257175d_0f86107d",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07731392_c2302c99",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "I just asked Dan if he\u0027s ok with the straight `subprocess.run` without capturing output approach and mentioned that your testing seems to show that the interruption is propagated correctly. If he\u0027s fine with it then i think that\u0027s the best choice as it\u0027s the simplest on our end.",
      "parentUuid": "0257175d_0f86107d",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7067cb5_8d10b728",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T23:44:26Z",
      "side": 1,
      "message": "Dan OK\u0027d using subprocess.run. For your other 2 points I\u0027ve printed out the command before running it and am suppressing the CalledProcessError by just raising a RuntimeError that tells the used that the build command failed. Should I have a separate function for build commands? The 2 zip commands also use this `run_command` which might be a little confusing but I\u0027m not sure if it\u0027s worth the essentially duplicated code.",
      "parentUuid": "07731392_c2302c99",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad079c1a_46c60ed2",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-02T00:22:04Z",
      "side": 1,
      "message": "I suggest adding a print_cmd\u003dTrue argument.",
      "parentUuid": "f7067cb5_8d10b728",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a3632e_15e24051",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 133,
      "author": {
        "id": 1480888
      },
      "writtenOn": "2024-04-02T17:53:43Z",
      "side": 1,
      "message": "This is exactly why I suggested tests. The freedom to change the underlying implementation and feel confident that things still work.",
      "parentUuid": "ad079c1a_46c60ed2",
      "range": {
        "startLine": 116,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebcea79c_6fccd8df",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "nit: consider extract to a function like:\nzip_command.append(zip_entry(relative_root\u003dos.path.join(src_top, soong_host_out), prefix\u003d\u0027host/\u0027, directory\u003dpath))",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "323304c2_00bf1b49",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "i\u0027m not sure how I feel about this. There is the possibility of removing the duplication of just these two blocks with a function like `zip_testcases` since it would be specific to just this part of the zip file. But there\u0027s already all the other blocks which i can\u0027t pull out without making a function with a lot of logic that i\u0027d rather avoid.",
      "parentUuid": "ebcea79c_6fccd8df",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a31a03d_0c615d5f",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T23:08:33Z",
      "side": 1,
      "message": "That\u0027s for readability. Otherwise a reader must cross reference soong_zip manual to find what these parameters mean. As for the logic, I don\u0027t think there are much. zip_entry will have a list of named parameters, all we do is null-checks:\nif relative_root:\n   args.append(\u0027-C\u0027)\n   args.append(relative_root)\nif other_param:\n   ...\n  \nOne zip_entry correspond to one set of -C/-P with following -l/-f/-d.",
      "parentUuid": "323304c2_00bf1b49",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "032fed1e_75520c97",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-02T00:22:04Z",
      "side": 1,
      "message": "This does look easy to implement and would improve readability. I like Weijia\u0027s suggestion.",
      "parentUuid": "0a31a03d_0c615d5f",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "655ab1fb_1e598424",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1480888
      },
      "writtenOn": "2024-04-02T05:10:12Z",
      "side": 1,
      "message": "I suggest that Luca strips all non-essential code for their change to make it in. Zipping is on the optimized path and can be taken out for now.",
      "parentUuid": "032fed1e_75520c97",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9f41b19_7310072e",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-02T13:30:50Z",
      "side": 1,
      "message": "Why",
      "parentUuid": "655ab1fb_1e598424",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fbcb2ed_23d9075b",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 266,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-02T17:05:27Z",
      "side": 1,
      "message": "Sorry, didn\u0027t complete my sentence. I think it\u0027s fine to leave this code in and try to finish the CL.\n\nBut if Hadrien feels strongly about splitting it, I\u0027m also OK with that.",
      "parentUuid": "d9f41b19_7310072e",
      "range": {
        "startLine": 260,
        "startChar": 1,
        "endLine": 266,
        "endChar": 28
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bba58f9b_ab4684cf",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 311,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "same as soong_ui.bash. shall we not assume where it is and let it passed by gcl?",
      "range": {
        "startLine": 311,
        "startChar": 6,
        "endLine": 311,
        "endChar": 48
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b75e12f1_eaa9b251",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 311,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "I\u0027m not sure, we want to have less stuff in the gcl, not more. @hzalek@google.com any thoughts?",
      "parentUuid": "bba58f9b_ab4684cf",
      "range": {
        "startLine": 311,
        "startChar": 6,
        "endLine": 311,
        "endChar": 48
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41e7785f_0182dd4b",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 311,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T23:08:33Z",
      "side": 1,
      "message": "To avoid too much stuff in gcl, we can define the tool paths (relative to TOP) as env vars.\n\nOr else we have soong_ui.bash, soong_zip, and in future cas_uploader in this script. If we\u0027re fine assuming the paths here, prefer we define these tool paths in one place, so it\u0027s clear what this script depends on.",
      "parentUuid": "b75e12f1_eaa9b251",
      "range": {
        "startLine": 311,
        "startChar": 6,
        "endLine": 311,
        "endChar": 48
      },
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6c5881c_48e4d294",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 356,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-04-01T15:01:08Z",
      "side": 1,
      "message": "You are mixing forward slashes and OS-type slashes here. This does not work on Windows. Should we add any check at the top that os.path.sep \u003d\u003d \u0027/\u0027 since this will  break?",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b43abfb_0cb4cfe5",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 356,
      "author": {
        "id": 1990655
      },
      "writtenOn": "2024-04-01T18:28:11Z",
      "side": 1,
      "message": "consider os.path.join?",
      "parentUuid": "b6c5881c_48e4d294",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83c68f95_2d56a1c4",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 12
      },
      "lineNbr": 356,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-04-01T22:34:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b43abfb_0cb4cfe5",
      "revId": "31d92e7df59722545668ebb1c076d5feaac9727b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}