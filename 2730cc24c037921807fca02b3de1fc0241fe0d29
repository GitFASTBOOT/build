{
  "comments": [
    {
      "key": {
        "uuid": "a8dba526_2a4d9664",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-08-07T19:00:06Z",
      "side": 1,
      "message": "This is kind of a strange target, and very specific to the way these modules are laid out.  For example, m -j MODULES-UNDER-framework is going to build all sorts of random tools, not just tests.\n\nCould you get the mapping from module name to source directory from $OUT/module-info.json instead?",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 54
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b16e16a_7a667877",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1083173
      },
      "writtenOn": "2017-08-07T20:12:34Z",
      "side": 1,
      "message": "Okay with your example use-case (i.e. framework is defined in frameworks/base):\n\nAren\u0027t MODULES-IN-frameworks-base and MODULES-UNDER-framework equivalent? Only difference here is the caller didn\u0027t need to search the tree to determine where framework was defined and create the specialized make target.\n\n\nFor your other point, I tend to find that module-info.json only exists when I do a full build. What exactly needs to be built for that file?\n\nNote: Big request of atest is to be fast. I really don\u0027t want to call make twice and get hit with that time cost.",
      "parentUuid": "a8dba526_2a4d9664",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 54
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4412939f_e1eae4e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-08-07T20:41:40Z",
      "side": 1,
      "message": "They will build the same thing, but saying \"build me everything defined in the directories under where the framework module is defined\" doesn\u0027t have much meaning, because the modules under frameworks/base is basically an implementation detail.  It is fairly specific to the CTS layout that building everything under a module\u0027s directory is required to make the test work.\n\nI think the correct solution is for the CtsOsHostTestCases module to depend on its test apps using LOCAL_REQUIRED_MODULES :\u003d",
      "parentUuid": "7b16e16a_7a667877",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 54
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a52fe99_4ad30d54",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1083173
      },
      "writtenOn": "2017-08-07T21:03:39Z",
      "side": 1,
      "message": "So now we\u0027re going in circles as using LOCAL_REQUIRED_MODULES was my last proposed solution...\n\nFrom DanW\u0027s comment on this Doc: https://docs.google.com/document/d/17QOMpefSYBE9HWaRyNQUe19BwShoKLJfruquUWCo1AA/edit\n\n\"This is somewhat problematic -- we almost never cross between host \u0026 device for install dependencies, since in every other case they\u0027re completely independent. And we have modules of the same name that are otherwise unrelated, and no way to untangle that in make, so we can\u0027t allow cross-host-device install dependencies everywhere.\"\n\n\nHe proposes that we limit this edge-case to the \"atest \u003cdirectory\u003e\" logic but I feel that limits the usability of the tool if `atest \u003ctest module\u003e:\u003coptional class name\u003e:\u003coptional method\u003e\u0027 works in some cases but not all cases where it should theoretically work. Odds are someone will file a bug saying it doesn\u0027t work every so often and I\u0027d rather not respond this particular edge case is unsupported continuously.",
      "parentUuid": "4412939f_e1eae4e0",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 54
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98d04842_e4d20722",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-08-07T19:00:06Z",
      "side": 1,
      "message": "MODULES-UNDER-CtsOsHostTestCases?",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 29
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1c75538_5e0eba76",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1083173
      },
      "writtenOn": "2017-08-07T20:12:34Z",
      "side": 1,
      "message": "Correct, my mistake when writing the commit message.",
      "parentUuid": "98d04842_e4d20722",
      "range": {
        "startLine": 14,
        "startChar": 11,
        "endLine": 14,
        "endChar": 29
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "057ef31c_1113642b",
        "filename": "core/base_rules.mk",
        "patchSetId": 1
      },
      "lineNbr": 380,
      "author": {
        "id": 1203558
      },
      "writtenOn": "2017-08-04T19:14:06Z",
      "side": 1,
      "message": "It looks like this target accepts a module name, correct? \nMaybe reword to \"under the path of the given module name\"?",
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "873c0e90_6c55036b",
        "filename": "core/base_rules.mk",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-08-07T19:00:06Z",
      "side": 1,
      "message": "The distinction between MODULES-UNDER and MODULES-IN is confusing.  Just seeing the names, I would expect MODULES-IN to build things in but not under a directory, and MODULES-UNDER to build thing in and under a directory.",
      "range": {
        "startLine": 383,
        "startChar": 0,
        "endLine": 383,
        "endChar": 13
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d0aaabf_3665848f",
        "filename": "core/base_rules.mk",
        "patchSetId": 1
      },
      "lineNbr": 383,
      "author": {
        "id": 1083173
      },
      "writtenOn": "2017-08-07T20:12:34Z",
      "side": 1,
      "message": "I am open to alternative names as well, suggestions welcome :).\n\n\nINCLUDE-SUBFOLDERS-$(LOCAL_MODULE), INCLUDE-SUBMODULES-$(LOCAL_MODULE), $(LOCAL_MODULE)-INCLUDE-SUBFOLDERS, etc.",
      "parentUuid": "873c0e90_6c55036b",
      "range": {
        "startLine": 383,
        "startChar": 0,
        "endLine": 383,
        "endChar": 13
      },
      "revId": "2730cc24c037921807fca02b3de1fc0241fe0d29",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}