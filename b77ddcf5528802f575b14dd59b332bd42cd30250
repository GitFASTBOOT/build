{
  "comments": [
    {
      "key": {
        "uuid": "5e040ce5_45e55b8f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-10-07T17:39:53Z",
      "side": 1,
      "message": "This inherently means that there are no dependencies on the individual files, which break incremental build accuracy.",
      "range": {
        "startLine": 15,
        "startChar": 58,
        "endLine": 16,
        "endChar": 14
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41764f32_c6433785",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-10-07T17:39:53Z",
      "side": 1,
      "message": "Depending on a directory generally doesn\u0027t do what you expect.  When a file is updated in the directory, the timestamp of the directory itself may or may not be updated, depending on how the file was written.  Modifying the file in place will not update the timestamp, but writing a new file and moving it over the old file will.\n\nIf you want this to be an error, I\u0027d suggest something like:\n\nmy_prebuilt_dtbimage_dir_files :\u003d $(sort $(wildcard $(BOARD_PREBUILT_DTBIMAGE_DIR)/*.dtb))\nifndef my_prebuilt_dtbimage_dir_files\n  $(error Must provide at least one dtb file in $(BOARD_PREBUILT_DTBIMAGE_DIR))\nendef\n$(INSTALLED_DTBIMAGE_TARGET): $(my_prebuilt_dtbimage_dir_files)\n\tcat $^ \u003e $@",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cacddf4_b396420b",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1058489
      },
      "writtenOn": "2019-10-07T18:10:18Z",
      "side": 1,
      "message": "Our issue with this arose due to our building the kernel and DTBs at build time, vs using prebuilt binaries. So since the DTBs (and their directory) simply don\u0027t exist when the Makefile\u0027s are initially picked up, we needed to do this. I do see how it would break incremental builds when using prebuilt dtbs though.",
      "parentUuid": "41764f32_c6433785",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d85493b_9d320aa7",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-10-07T18:16:48Z",
      "side": 1,
      "message": "Can the kernel build or the rules that wrap it be modified to produce the combined dtbimage?",
      "parentUuid": "0cacddf4_b396420b",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befe0322_3ff07f3a",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1058489
      },
      "writtenOn": "2019-10-07T18:29:22Z",
      "side": 1,
      "message": "Hm, yeah they can be. I think [maybe] I see where you\u0027re going with this. Adding BOARD_PREBUILT_DTBIMAGE that takes precedence over the current generation mechanism if defined, like BOARD_PREBUILT_VENDORIMAGE?",
      "parentUuid": "1d85493b_9d320aa7",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa95c267_418712c0",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2019-10-07T18:29:58Z",
      "side": 1,
      "message": "That\u0027s one of the reasons this is explicitly named \"BOARD_PREBUILT_DTBIMAGE_DIR\" -- if you\u0027re not using prebuilts, you need to create this target on your own.",
      "parentUuid": "1d85493b_9d320aa7",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a91e3d6_88042cc5",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1058489
      },
      "writtenOn": "2019-10-07T18:31:55Z",
      "side": 1,
      "message": "Ah, yeah we can do that instead. Don\u0027t know why that didn\u0027t even occur to me. Thanks for the guidance!",
      "parentUuid": "aa95c267_418712c0",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cdeead1_04b14070",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2019-10-07T18:33:33Z",
      "side": 1,
      "message": "Just don\u0027t define BOARD_PREBUILT_DTBIMAGE_DIR, and create your own target for $(PRODUCT_OUT)/dtb.img. Likely that means adding something like `.KATI_IMPLICIT_OUTPUTS +\u003d $(PRODUCT_OUT)/dtb.img` to your kernel build rule, and having some logic in there to write out that file based on the kernel outputs. (vs having a separate rule, which would need to enumerate all the built dtb files, which you may not know)",
      "parentUuid": "aa95c267_418712c0",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a215e6c_161f392b",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 1058489
      },
      "writtenOn": "2019-10-07T18:39:22Z",
      "side": 1,
      "message": "Yeah we\u0027ve been defining a rule for the prebuilt directory that just builds the kernel \"dtbs\" recipe separate from the rest of the kernel build and doing the enumeration with this change. Your suggestion sounds better tho.\n\nColin, would you still like me to upload a new patchset here with your empty directory check?",
      "parentUuid": "6cdeead1_04b14070",
      "range": {
        "startLine": 988,
        "startChar": 30,
        "endLine": 988,
        "endChar": 60
      },
      "revId": "b77ddcf5528802f575b14dd59b332bd42cd30250",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}