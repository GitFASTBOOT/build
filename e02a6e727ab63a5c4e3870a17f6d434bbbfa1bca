{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1440ad86_6f444ef5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "s/failry/fairly/",
      "range": {
        "startLine": 12,
        "startChar": 14,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a63d7a14_f69c3233",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1440ad86_6f444ef5",
      "range": {
        "startLine": 12,
        "startChar": 14,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b080b9e9_0edce8e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "s/groups/group/g\n\ns/if/If/",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 25
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f51653e4_40443ee5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b080b9e9_0edce8e7",
      "range": {
        "startLine": 15,
        "startChar": 19,
        "endLine": 15,
        "endChar": 25
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6bc96bc_aa52623f",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "Don\u0027t import *. Just import the module. This is required in the style guide.\n\nSee https://google.github.io/styleguide/pyguide.html#22-imports",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e683cf8a_af106100",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6bc96bc_aa52623f",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6f452e_de230205",
        "filename": "ci/build_test_suites_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "go/no-utils\n\nLet\u0027s come up with a better name.\n\nAnd can you move them into a class (even if they\u0027re just @classmethod functions within there)?\n\nHow about we call this build_context and create a BuildContext class in here. And let\u0027s move all the BuildContext related functionality into this file.",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f12d4dd9_258bd575",
        "filename": "ci/build_test_suites_utils.py",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef6f452e_de230205",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf5e38e6_2466a21a",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "BuildContext object should have an enabled_build_features attribute.",
      "range": {
        "startLine": 47,
        "startChar": 39,
        "endLine": 47,
        "endChar": 59
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2742315d_3954a187",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf5e38e6_2466a21a",
      "range": {
        "startLine": 47,
        "startChar": 39,
        "endLine": 47,
        "endChar": 59
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b75c268_1189d9d5",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "How about we have the build context return TestInfo objects?\n\nAnd then for each TestInfo object, you can check:\n - \u0027general-tests\u0027 in test_info.build_targets\n - test_info.is_test_mapping",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 130,
        "endChar": 75
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c83b3659_5eca28e6",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b75c268_1189d9d5",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 130,
        "endChar": 75
      },
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd47c59_9cf9f01f",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "This logic is not right. We should be checking whether the specific test uses general-tests, not if any test uses general-tests.\n\nNeed to fix your tests to catch this case too.",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bed89738_428c32b2",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Don\u0027t we just disable optimization if we find any test that isn\u0027t test mapping that uses `general-tests`? I believe that\u0027s what my logic is going here.",
      "parentUuid": "2fd47c59_9cf9f01f",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6baea52f_a91ae5c2",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-17T00:40:17Z",
      "side": 1,
      "message": "Your new logic in patchset 3 is correct, but the version in patchset 1 was wrong and was skipping optimizations if any test uses general-tests (without checking whether the tests that use general-tests use test mapping).",
      "parentUuid": "bed89738_428c32b2",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a741367_91e3e99b",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "Logic involving CHANGE_INFO should be in a separate class. This sounds generally useful and can simplify the general test optimization code if we split it out.",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e84ef86_53afb217",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-16T23:56:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a741367_91e3e99b",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8e5fd81_d3ec9ab9",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "This needs to be shareable logic as well.",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87029a9e_333a164d",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-08-17T00:00:03Z",
      "side": 1,
      "message": "This is only useful to `general-tests` and `device-tests` optimizers right (assuming no other suites involved in test_mapping pop up)? If so just a base TestMappingOptimizer class with this functionality would work that we could build both optimizers off of?",
      "parentUuid": "e8e5fd81_d3ec9ab9",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "263f806f_77431a48",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-17T00:40:17Z",
      "side": 1,
      "message": "This logic should ideally be shared with test provider itself.\n\nWe won\u0027t do that in this CL, but if it\u0027s at least in its own file and not coupled with GeneralTestsOptimizer, it should be possible to share the logic in the future.",
      "parentUuid": "87029a9e_333a164d",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "960ca79c_2369fb21",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-08-14T02:12:46Z",
      "side": 1,
      "message": "This needs to be in a reusable class if you\u0027re going to share logic. Can we make it possible to copybara from Android -\u003e Google3?\n\ncopybara itself will be out of scope but it should be in position such that copybara would not require a major refactor.",
      "revId": "e02a6e727ab63a5c4e3870a17f6d434bbbfa1bca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}