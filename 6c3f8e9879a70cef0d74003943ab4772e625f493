{
  "comments": [
    {
      "key": {
        "uuid": "1ee49469_9e614c53",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2020-03-25T10:05:12Z",
      "side": 1,
      "message": "I don\u0027t think we may reuse `all_offending_files` for multiple makefiles. It means we can define only one ARTIFACT_PATH_REQUIREMENT. We may have multiple ARTIFACT_PATH_REQUIREMENT for different partitions.",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2272e18_87f3a8a5",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2020-03-25T10:14:03Z",
      "side": 1,
      "message": "If we don\u0027t reuse \u0027all_offending_files\u0027, we can use ARTIFACT_PATH_REQUIREMENT for each partition only once.\n\nFor example, both A.mk and B.mk declare system modules and both\u0027s ARTIFACT_PATH_REQUIREMENT is system, if we don\u0027t reuse all_offending_file, during checking A.mk, build script thinks there are violation in modules defined in B.mk and vice versa",
      "parentUuid": "1ee49469_9e614c53",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "808a8c93_ace9c33f",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2020-03-25T10:18:22Z",
      "side": 1,
      "message": "I agree with the example. But if we have C.mk for system_ext not system, it still has only one all_offending_files for different partitions, doesn\u0027t it?",
      "parentUuid": "c2272e18_87f3a8a5",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d443cf8a_1b4c9e87",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2020-03-25T10:29:41Z",
      "side": 1,
      "message": "Let me explain the logic with an example..\nA.mk: system/a (ARTIFACT_PATH_REQUIREMENT: system)\nB.mk: system/b (ARTIFACT_PATH_REQUIREMENT: system)\nC.mk: system_ext/c (ARTIFACT_PATH_REQUIREMENT: system_ext)\nD.mk: system/d system_ext/d product/d (no ARTIFACT_PATH_REQUIREMENT)\n\n- List up every installed file\nall_offending_files \u003d system/a system/b system_ext/c system/d system_ext/d product/d\n- Remove product/* because there is no ARTIFACT_PATH_REQUIREMENT for product\nall_offending_files \u003d system/a system/b system_ext/c system/d system_ext/d\n- Processing A.mk: removing files defined in A\nall_offending_files \u003d system/b system_ext/c system/d system_ext/d\n- B.mk\nall_offending_files \u003d system_ext/c system/d system_ext/d\n- C.mk\nall_offending_files \u003d system/d system_ext/d\nFinally, raise an error because there is something remaining in all_offending_files.\n\nDoes it solve your concern?",
      "parentUuid": "808a8c93_ace9c33f",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50ebdaf4_cfe369c8",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2020-03-25T10:41:57Z",
      "side": 1,
      "message": "Thank you for the detailed explanation!\nI thought if C.mk has system/c it must be caught as an offending file for A.mk and B.mk. But it will be caught by non-allowed files for C.mk itself!",
      "parentUuid": "d443cf8a_1b4c9e87",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3468228b_98979bda",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 1233,
      "author": {
        "id": 1386891
      },
      "writtenOn": "2020-03-25T11:00:43Z",
      "side": 1,
      "message": "Ah, that\u0027s your worry, yes, as you said, it is caught by checking `offending_files` in line 1226.",
      "parentUuid": "50ebdaf4_cfe369c8",
      "range": {
        "startLine": 1233,
        "startChar": 58,
        "endLine": 1233,
        "endChar": 77
      },
      "revId": "6c3f8e9879a70cef0d74003943ab4772e625f493",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}