{
  "comments": [
    {
      "key": {
        "uuid": "d1111957_6dd9a1e9",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-30T19:30:00Z",
      "side": 1,
      "message": "That is really fragile right? what if I have a string that says , \"Linux Version 2.4.9 is not compatible with foo\" or may be \"Compatible with Linux Version 4.5.6 +\"",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 51
      },
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34e1e41b_d49f2440",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-30T19:41:38Z",
      "side": 1,
      "message": "Yeah, that wouldn\u0027t work. Although, I don\u0027t have any better ideas. Steve?\n\nAlso, OEMs can still use BOARD_KERNEL_CONFIG_FILE and BOARD_KERNEL_VERSION to override this.",
      "parentUuid": "d1111957_6dd9a1e9",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 51
      },
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04e67aa2_578aa0f5",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2019-01-30T19:30:00Z",
      "side": 1,
      "message": "nit: can you please add a comment here to say what exactly we are doing.",
      "range": {
        "startLine": 65,
        "startChar": 3,
        "endLine": 65,
        "endChar": 55
      },
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd30c02e_34a00fe4",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 97,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2019-01-30T18:57:50Z",
      "side": 1,
      "message": "Since an attempt is made below to decompress the file with cmd even if the header is not found, is it necessary to make an attempt to find the header here and decompress?",
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020ace5d_9bbb8463",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 97,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-30T19:05:31Z",
      "side": 1,
      "message": "Yeah, I always decompress starting the header.\n\nSo if you have:\n\n\u003cgarbage\u003e\u003cheader\u003e\u003carchive content\u003e\n\nThen this will be successful, but below will fail.",
      "parentUuid": "bd30c02e_34a00fe4",
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6549ed31_030f2140",
        "filename": "tools/extract-kernel.py",
        "patchSetId": 11
      },
      "lineNbr": 97,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2019-01-30T19:16:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "020ace5d_9bbb8463",
      "revId": "400889d6a4e66b5b639dede2af8f0bf4b945ad7b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}