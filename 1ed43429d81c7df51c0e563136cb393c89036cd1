{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e78c88bf_8214221c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T06:37:19Z",
      "side": 1,
      "message": "I\u0027ve added tests to ensure that the generated code actually compiles. Once the build system has hooked up support for C++ and C autogenerated aconfig libs, I would like to see new tests (in the `tests` dir) for these languages.\n\nSee `aconfig.test.java` for the Java setup.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 4
      },
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0b4ff23_9e6ee0f1",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T06:37:19Z",
      "side": 1,
      "message": "Not related to this CL, but shouldn\u0027t override_flag and reset_overrides be excluded if the passed in CodegenMode is Production?",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9de87cbd_0caca6b3",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-07-12T12:32:27Z",
      "side": 1,
      "message": "They need to be there even in prod but no op in prod. The reason is the teams might write their main function in a way that will accept flag overrides as command line arguments, and then call these methods to apply flag overrides. \n\nSo in production, these methods are no op, even if somebody passed in flag overrides as command line flag, it has no effect. But in test, say they want to fork and exec a child process with a specific set of flag overrides, they can do that by passing a set of command line arguments, and the child process will properly apply the desired overrides.",
      "parentUuid": "d0b4ff23_9e6ee0f1",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d5aae7b_fa7e98e8",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 250,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T12:42:26Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9de87cbd_0caca6b3",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d8216c3_4df4cbf2",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T06:37:19Z",
      "side": 1,
      "message": "Are these needed? I don\u0027t see them used anywhere?\n\nThe reason the java code generates flag names is for the test runners to use reflection to reason about the flags.",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28121b8d_1ab1a3a8",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-07-12T12:37:06Z",
      "side": 1,
      "message": "the flag constants are introduced in both c and c++. this is to prevent typo when calling override_flag method which requires the flag name as the first input. Ideally, we would like to use enum for flag names, but after discussing with Jeff, constants are good enough. So if developer misspelled the flag name constants in the code, it would be a compile time error and can be detected early.",
      "parentUuid": "5d8216c3_4df4cbf2",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab28b564_9d53f33e",
        "filename": "tools/aconfig/src/codegen_cpp.rs",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T12:42:26Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "28121b8d_1ab1a3a8",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b05d4a3_5efe3a72",
        "filename": "tools/aconfig/templates/c_exported_header.template",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T06:37:19Z",
      "side": 1,
      "message": "Should this be on a separate line, with a dash to suppress spaces?\n\n```\n{{ for ... }}\nextern const ...\n{{ endfor -}}\n```\n\nSame comment for line 12.",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 9,
        "endChar": 67
      },
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b5146aa_33db4ece",
        "filename": "tools/aconfig/templates/c_source_file.template",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-07-12T06:37:19Z",
      "side": 1,
      "message": "nit: unnecessary blank linke",
      "revId": "1ed43429d81c7df51c0e563136cb393c89036cd1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}