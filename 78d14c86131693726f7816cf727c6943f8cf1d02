{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "35bb5287_edeceede",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-03T10:31:03Z",
      "side": 1,
      "message": "More comments! I still don\u0027t entirely understand what\u0027s going on, so some are probably somewhat embarrassing.",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "618150d0_d8ad3039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T15:32:25Z",
      "side": 1,
      "message": "Could you please go into more detail on your commit message? \"Test: self test\" can be elaborated on; how does one test this?\nMaybe also link to your design doc, and explain *briefly* how this fits into the bigger picture.",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd76101_dd05db0c",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T15:32:25Z",
      "side": 1,
      "message": "Can we not implement this using a map instead, and avoid the divergence with the Starlark specification? It makes the syntax slightly more verbose, but I think that\u0027s a small price to pay.",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "241da3c2_5eb6388f",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "Yes, we can, but the code will look very ugly.",
      "parentUuid": "fbd76101_dd05db0c",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed2afb67_6518ee71",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T23:47:41Z",
      "side": 1,
      "message": "Do you just mean that\n\nfoo.BAR \u003d baz\nbecomes\nfoo[\"BAR\"] \u003d baz\n\n?\n\nI\u0027m not convinced this is much uglier, and I\u0027m far more fond of keeping to pure Starlark when we can.",
      "parentUuid": "241da3c2_5eb6388f",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14e0e293_21d3d6b1",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-06T20:30:24Z",
      "side": 1,
      "message": "When it\u0027s a single line, there isn\u0027t much difference. When it\u0027s dozens of lines, it is. I don\u0027t think it\u0027s a small price to pay.",
      "parentUuid": "ed2afb67_6518ee71",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1df5e242_cc3470a5",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-08T16:13:45Z",
      "side": 1,
      "message": "Are we really just talking about 4 extra characters per assignment/access, or are there other prices that we are paying by not using this custom type?\n\nMaybe I\u0027ll take a step back and ask a more fundamental question with this work: Why are we using Starlark at all? Why not python or go?\n\nThe way I see it, these enhancements to Starlark\u0027s API are not minor changes. You\u0027ve effectively invented a new dialect of Starlark (a new language, if you will) just so we can solve the rbcrun problem. Why?\n\nIf one of the goals is to keep the implementation as compatible with Bazel\u0027s Starlark dialect as possible, then we need to be wary of any step in the wrong direction.",
      "parentUuid": "14e0e293_21d3d6b1",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8d2661_174a85dc",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-09T08:16:09Z",
      "side": 1,
      "message": "I agree with Chris that compatibility with Bazel is preferable here. My line of thinking is that we eventually want the evaluation of the product configuration to also be done by Bazel, which means using Bazel\u0027s Starlark dialect, so I\u0027d prefer not adding gratuitous differences if we can help.\n\nI mean, technically, moving from propset() to regular dict is apparently just a pure syntactical transformation, but why take this detour if we don\u0027t need to?\n\nI thought propset is used for some sort of cross-module communication which I didn\u0027t understand, based on your comments, that\u0027s not the case? It looks like there is at least the \"globals\" top-level symbol (passed as the first argument of \"init\"), which doesn\u0027t seem to be frozen anywhere so it does allow cross-module communication.",
      "parentUuid": "1df5e242_cc3470a5",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e841749e_90631d04",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-10T06:32:09Z",
      "side": 1,
      "message": "I have doubts we will be able to use Bazel unchanged for building Android.\nEven if I remove propset, there is still \u0027module\u0027 type, without which the things are going to look even uglier.",
      "parentUuid": "5f8d2661_174a85dc",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a898826_3adfa1b7",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-10T11:38:29Z",
      "side": 1,
      "message": "Interesting. I thought the pure-Starlark version of \"module\" would be simply a .bzl file that exports every symbol you currently pass into the single module() invocation. It\u0027s actually a well-known pattern in Starlark:\n\na.bzl:\nload(\"b.bzl\", \"b\")\n\nb.bzl:\ndef _addprefix(...):\n  ...\n\ndef _addsuffix(...):\n  ...\n\nb \u003d struct(addprefix\u003d_addprefix, addsuffix\u003d_addsuffix)\n\nAm I grossly misunderstanding this?",
      "parentUuid": "e841749e_90631d04",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cdfb578_149b7f11",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-11T02:15:00Z",
      "side": 1,
      "message": "I guess the misunderstanding is mine. Neither https://github.com/bazelbuild/starlark/blob/master/spec.md nor https://github.com/google/starlark-go/blob/master/doc/spec.md defines module or struct.",
      "parentUuid": "5a898826_3adfa1b7",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64b5bf9_719c49ed",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-11T08:17:34Z",
      "side": 1,
      "message": "No, it\u0027s me who\u0027s wrong! I thought \"struct\" was a Starlark thing, but it\u0027s actually something that\u0027s specific to Bazel:\n\nhttps://docs.bazel.build/versions/master/skylark/lib/struct.html\n\nwith that in mind, how about defining a function called \"struct\" that\u0027s exactly like \"module\" but without the first argument (the name)? That would be the exact same thing as Bazel\u0027s struct().",
      "parentUuid": "8cdfb578_149b7f11",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f0367af_5d101e69",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 29,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-11T19:53:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a64b5bf9_719c49ed",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e68ba1b_0970ecb9",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 59,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T15:32:25Z",
      "side": 1,
      "message": "Is the issue here that if we use a builtin Starlark data type such as a list, to mimic the same behavior, that the list must be frozen in the inner loop context?",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06f84524_c3681479",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 59,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "Please see the comments for the stack.go",
      "parentUuid": "0e68ba1b_0970ecb9",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b92703_772cf513",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 59,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T23:47:41Z",
      "side": 1,
      "message": "Got it, thanks. As a small nit, it might be good to restate this in the README.",
      "parentUuid": "06f84524_c3681479",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28e45b4a_bb1e682f",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 59,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-06T20:30:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e0b92703_772cf513",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c5d01e_ff41d31b",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 96,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T15:32:25Z",
      "side": 1,
      "message": "Isn\u0027t this somewhat redundant with just omitting the |init portion, since you\u0027re later declaring that you want to export symbol \"init\" via `mymodule_init\u003d\"init\"` ?\nWhy not just omit the |init portion?\n\nI see lberki@ has commented to this same effect in your design doc.",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a079fab_7fd622ee",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 96,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "I am not sure I understand this comment. Without \u0027|init\u0027, load() will fail if a module to be loaded is missing. At the time we are about to initialize a conditionally loaded module, we need to know if it existed.",
      "parentUuid": "50c5d01e_ff41d31b",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e927bd99_6c3c5573",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 96,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T23:47:41Z",
      "side": 1,
      "message": "Copying from Lukacs\u0027 comment in your doc:\n\n\u003e Why is the \"init\" symbol twice on the command line? From what I can glean, what you intend to do is a simple \"should rbcrun be okay with this file missing?\" bit, but then why not make it just a simple bit?",
      "parentUuid": "4a079fab_7fd622ee",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "521d5421_478486e5",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 96,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-06T20:30:24Z",
      "side": 1,
      "message": "I have responded in the design document.",
      "parentUuid": "e927bd99_6c3c5573",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1d4344e_91e1a622",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T15:32:25Z",
      "side": 1,
      "message": "What does it mean to generate a Starlark script on stdout? If I am understanding the implementation correctly, it\u0027s just running exec on `cmd args...`, and has nothing to do with stdout. Can you elaborate?",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c41d4a44_519dc958",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "It runs cmd,  which should write a Starlark script to stdout. Then this script is read and executed (line 128 in host.go)",
      "parentUuid": "b1d4344e_91e1a622",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "279cac9a_9c988bf4",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1605027
      },
      "writtenOn": "2021-03-03T23:47:41Z",
      "side": 1,
      "message": "There\u0027s no guarantee that \"cmd\" writes a Starlark script to stdout though, right? Or, even worse, there\u0027s no guarantee that \"cmd\" doesn\u0027t do arbitrary host code execution *before* it writes a Starlark script to stdout.\n\nMy concern here is that we are opening the API to abuse: We technically allow any arbitrary command to be executed, under the guise of a reduced scope.\n\nCan we reduce the scope of this function?",
      "parentUuid": "c41d4a44_519dc958",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1e23859_4f2d28d2",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-06T20:30:24Z",
      "side": 1,
      "message": "I don\u0027t understand what guarantees are needed about stdout -- the interpreter just reads and executes whatever \u0027cmd\u0027 has written there. If it hasn\u0027t written anything, nothing will be executed. As to arbitrary command execution, I am not sure what\u0027s the concern here, this isn\u0027t something running remotely with elevated privileges. Besides, no matter that\u0027s the fate of this function we still need command() to convert Make\u0027s $(shell).\nAs this function is not needed at the moment, I have retained the implementation but removed this function registration.",
      "parentUuid": "279cac9a_9c988bf4",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a5f9f44_d5bfea05",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-09T08:16:09Z",
      "side": 1,
      "message": "Oof, I was about to ask the same thing since I managed to skim over this in the last two review rounds 😞\n\n@Sasha: the reason why this is important is that we want code run by Bazel to be side-effect free so that we can guarantee that we don\u0027t cache things that shouldn\u0027t be (for example, code executed by loadGenerated() could update .rbc files that were already read or somesuch)\n\n@Chris: $(shell) is indeed an unfortunate situation. There is a way for Make to execute arbitrary shell code during the evaluation of the Makefile before any \"actions\" get executed. I assume this is to cater for that use case? I was hoping this doesn\u0027t exist, at least not in the product configuration. Am I being wildly optimistic here?",
      "parentUuid": "d1e23859_4f2d28d2",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e28e4d7_19fc7d66",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-10T06:32:09Z",
      "side": 1,
      "message": "$(shell) is used to figure out the build\u0027s platform (runs \u0027uname -sm\u0027), to perform arithmentic (this one fortunately is called via macro, so the macro can be converted), and to find kernel\u0027s version and patch level (\nhttps://cs.android.com/android/platform/superproject/+/master:device/ti/beagle_x15/device.mk;drc\u003d48afeabe737ac145ea445745e0b1a5a66651c930;l\u003d39). That\u0027s for AOSP, vendor code has more. They can be eventually replaced with something more controlled.",
      "parentUuid": "9a5f9f44_d5bfea05",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24b9f375_f20b3a9d",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-10T11:38:29Z",
      "side": 1,
      "message": "Is looking for the string \"$(shell\" in files whose name ends with .mk under device/ in the source tree a good way to get a view on how bad the situation is?",
      "parentUuid": "9e28e4d7_19fc7d66",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fce31730_18c0febf",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-11T02:15:00Z",
      "side": 1,
      "message": "Not sure how accurate this will be, I just convert all product configuration makefiles and grep for \u0027shell\u0027 in the result.For AOSP it\u0027s \ndevice/google/bonito/utils.mk\ndevice/google/coral/utils.mk\ndevice/google/crosshatch/utils.mk\ndevice/google/redbull/utils.mk\ndevice/google/sunfish/utils.mk\ndevice/ti/beagle_x15/device.mk\n(plus build/make/core/envsetup.mk with `$(shell uname)`\nI\u0027ll run the conversion for the internal and let you know.",
      "parentUuid": "24b9f375_f20b3a9d",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd1b8c96_ccd6a70d",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-11T08:17:34Z",
      "side": 1,
      "message": "Chris, Jon, WDYT? We have three options:\n\n1. Allow loadGenerated() anywhere\n2. Add an allowlist so that we at least know who is naughty\n3. Prohibit it and require people to migrate\n\nIn addition to (2) and (3), we could eventually add bespoke logic to convert well-known $(shell) idioms (e.g. arithmetic or uname)\n\nI think (3) is not feasible because it imposes too much work on partners, (1) makes the problem worse over time, so I guess (2) + eventual conversion of idioms is the best? I could be convinced about (1), too, because product configuration in any kind of Starlark is better than Make and we can clean up loadGenerated() after.",
      "parentUuid": "fce31730_18c0febf",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a0c908e_20ac852a",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-11T19:53:25Z",
      "side": 1,
      "message": "I believe you mean \u0027shell\u0027, not \u0027loadGenerated\u0027?",
      "parentUuid": "dd1b8c96_ccd6a70d",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17b42c27_140a8669",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-12T08:24:14Z",
      "side": 1,
      "message": "Yes, indeed. I think I am confused, though: I seem to remember that I thought loadGenerated() was the equivalent of $(shell), which seemed strange, but your converter seems to have rblf.shell() instead which is more straightforward.\n\nBut then I don\u0027t understand what loadGenerated() is for and I can\u0027t find an example either under go/roboleaf-product-config or in aosp/1501163.",
      "parentUuid": "6a0c908e_20ac852a",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "627d20be_6f8858d0",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-15T03:02:58Z",
      "side": 1,
      "message": "It has been disabled, IMHO it doesn\u0027t make sense to dwell on it too much.",
      "parentUuid": "17b42c27_140a8669",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e8f22d3_c223feb3",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-18T08:12:43Z",
      "side": 1,
      "message": "For now, definitely, but I\u0027d like to understand where you want to go. The reason why I\u0027m concerned is that until quite recently, I thought loadGenerated() is a replacement for $(shell). I was apparently mistaken, but I\u0027d like to learn what it\u0027s for. (if it doesn\u0027t have a use, let\u0027s delete it on the general principle that the code is liability)",
      "parentUuid": "627d20be_6f8858d0",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36f61179_d2a10193",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-18T17:07:32Z",
      "side": 1,
      "message": "Deleted it.",
      "parentUuid": "0e8f22d3_c223feb3",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e0fe961_61ffb933",
        "filename": "tools/rbcrun/README.md",
        "patchSetId": 23
      },
      "lineNbr": 139,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-18T17:16:14Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "36f61179_d2a10193",
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ebb6cb0_79bff0f5",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 252,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-03T10:31:03Z",
      "side": 1,
      "message": "Are these symbols intended to be usable by every .rbc file?",
      "range": {
        "startLine": 252,
        "startChar": 3,
        "endLine": 252,
        "endChar": 19
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63bb671f_96159e71",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 252,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "rblf_cli/rblf_env at the moment are used only to initialize execution environment.\nThe remaining ones are the counterparts of the corresponding makefile constructs.\n`rblf_file_exists` is the counterpart of \nifeq (,$(wildcard foo.mk))\nadmittedly this particualr one can be avoided by checking that the using rblf_wildcard.",
      "parentUuid": "0ebb6cb0_79bff0f5",
      "range": {
        "startLine": 252,
        "startChar": 3,
        "endLine": 252,
        "endChar": 19
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8a7bb5_adedb58e",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 252,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-09T08:16:09Z",
      "side": 1,
      "message": "When do individual modules call module() and propset()?",
      "parentUuid": "63bb671f_96159e71",
      "range": {
        "startLine": 252,
        "startChar": 3,
        "endLine": 252,
        "endChar": 19
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a1a8f18_aadca7fd",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 252,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-10T06:32:09Z",
      "side": 1,
      "message": "module is called from the main product_config.rbc, see aosp/1486492. \npropsets are used all over the generated code.",
      "parentUuid": "7a8a7bb5_adedb58e",
      "range": {
        "startLine": 252,
        "startChar": 3,
        "endLine": 252,
        "endChar": 19
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "279a8e09_14000605",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 255,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-03T10:31:03Z",
      "side": 1,
      "message": "Why the \"rblf\" prefix? \"Roboleaf\" is a temporary thing and will go stop eventually, but this identifier will stay forever, so I think it\u0027s better to find a prefix that will have meaning in the indefinite future.",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 255,
        "endChar": 16
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5d4d472_7f5c7f2a",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 255,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "I just needed a prefix. Better prefix suggestions are welcome.",
      "parentUuid": "279a8e09_14000605",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 255,
        "endChar": 16
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ba2bba4_8fe0c5ff",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 255,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-09T08:16:09Z",
      "side": 1,
      "message": "One idea would be to require something like this:\n\nload(\"android_product_config.rbc\", \"apc\")  # \"apc\" is just my zeroth thought\n\nat the beginning of each file, then special-case it so that instead of opening the file android_product_config.rbc, the configuration runner would wire up the implementation of these symbols. E.g. instead of\n\nf \u003d propset()\n\nyou\u0027d say\n\nf \u003d apc.propset()\n\nWDYT?",
      "parentUuid": "e5d4d472_7f5c7f2a",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 255,
        "endChar": 16
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27dc2a8f_17fdbd9a",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 255,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-10T06:32:09Z",
      "side": 1,
      "message": "As shown in the design document, the first line of a product configuration file is:\nload(\"//build/make/target/product:product_config.rbc\", \"rblf\")\nand product_config.rbc exports whatever is necessary as the attributes of the `rblf`, which is a module (see product_config.rbc:456 in aosp/1486492). The functions with `rblf_` prefix are used only in the product_config.rbc file.\nPlease take a look also at the test configurations (in build/make/tests/) in the same aosp/1486492)\nAs to prefixes, IMHO the etymology of `rblf_` and `rblf.` is irrelevant; ff people feel strongly about it, I\u0027ll change them to something else.",
      "parentUuid": "3ba2bba4_8fe0c5ff",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 255,
        "endChar": 16
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5363e412_d723689c",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 255,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-10T11:38:29Z",
      "side": 1,
      "message": "...Well the fact that I missed that rblf is load()ed is quite embarrassing...\n\nI don\u0027t feel that strongly about the prefix, so consider this as nitpicking. Renaming it doesn\u0027t take much energy (I hope), so if there is a slightly better alternative, why not? But if you prefer rblf, that works, too.",
      "parentUuid": "27dc2a8f_17fdbd9a",
      "range": {
        "startLine": 255,
        "startChar": 3,
        "endLine": 255,
        "endChar": 16
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3d7d50b_0a82dec1",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 271,
      "author": {
        "id": 1066075
      },
      "writtenOn": "2021-03-03T10:31:03Z",
      "side": 1,
      "message": "Is the intended use to call rbcrun with an actual product configuration rbcrun file? That seems to be what the Starlark2 document says. How does that transfer control to the init() function of the module in question?",
      "range": {
        "startLine": 271,
        "startChar": 5,
        "endLine": 271,
        "endChar": 8
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dacc1ed9_885fc74b",
        "filename": "tools/rbcrun/host.go",
        "patchSetId": 23
      },
      "lineNbr": 271,
      "author": {
        "id": 1344584
      },
      "writtenOn": "2021-03-03T21:22:43Z",
      "side": 1,
      "message": "The file that rbcrun executes is like this:\n```\nload(\"//build/make/core:product_config.rbc\", \"rblf\")\nload(\"\u003cPRODUCT rbc\u003e\", \"init\")\ng, config \u003d rblf.product_configuration(\"\u003cPRODUCT rbc\u003e\", init)\nrblf.printvars(g, config)\n```\nproduct_config.rbc is part of aosp/1486492. `product_configuration` sets up the runtime environment, creates global (`g`) and configuration(`config`) propsets and calls `init`. Running it adds modules to the inheritance hierarchy, which are executed in turn, etc. \nThe converter (mk2rbc) generates the file above (see Launcher() at mk2rbc/mk2rbc.go:1280 in aosp/1501163).",
      "parentUuid": "e3d7d50b_0a82dec1",
      "range": {
        "startLine": 271,
        "startChar": 5,
        "endLine": 271,
        "endChar": 8
      },
      "revId": "78d14c86131693726f7816cf727c6943f8cf1d02",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}