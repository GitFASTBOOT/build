{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ffabec3b_c84cb971",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2023-11-07T11:48:30Z",
      "side": 1,
      "message": "Hi Kevin! Thanks for the contribution, seem like a sensible split to have IMO. It\u0027s been a few years since I worked on this stuff so I think Cole will have to review the code changes. IIUC both the existing macros would continue to function exactly as they do today?\n\nI\u0027ll kick off presubmit to make sure we don\u0027t break the \"happy case\". I feel we\u0027d ideally want to do some manual testing of the unhappy case as well (ensure the build breaks if regressions are added into the _system files). It\u0027s a little annoying how difficult it is to have automated testing in Make to instill some confidence in this artifact-path stuff.",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d17af274_b76671ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-07T18:03:31Z",
      "side": 1,
      "message": "I can review it, but I don\u0027t really like the artifact path requirements to begin with. They\u0027re extremely confusing errors to most people, and most of the time they have no recourse to fix them other than adding an exception for certain paths. It\u0027s also not really clear _why_ we care about certain makefiles owning certain paths.\n\nThere are also bugs that allow you to circumvent artifact path requirements, like b/299166571. And again, fixing those bugs means adding a bunch of exceptions for the existing violations.",
      "parentUuid": "ffabec3b_c84cb971",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb46774c_3464fc55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-08T00:26:40Z",
      "side": 1,
      "message": "\u003e IIUC both the existing macros would continue to function exactly as they do today?\n\nThat\u0027s correct ðŸ˜Š\n\n\u003e They\u0027re extremely confusing errors to most people\n\nI think there is an improvement in error messages with this change -- there is clearer identification of whether the violation is for a boundary or for ownership, and where the violation comes from.\n\n\u003e most of the time they have no recourse to fix them other than adding an exception for certain paths\n\nI think this is well-addressed by the split of responsibilities in the new macros.  Say for (slightly inaccurate) example you want to add Settings (a product artifact) to generic_system.mk, and there is a dependency on libbinder_ndk (a system artifact).  Using require-no-new-artifacts-outside-path, you can add whatever system-based dependency to the system makefile (say, libbinder_ndk to base_system) and then whatever product-based artifact to the product makefile that depends on it (say, Settings to either base_product or generic_system). And then generic_system can use require-no-other-artifacts-inside-path to protect /system and /system_ext without complaining about the presence of Settings inside /product.\n\n\u003e It\u0027s also not really clear why we care about certain makefiles owning certain paths.\n\nI\u0027m not sure if this has a lot of value for Google internally beyond enforcing GSI boundaries (maybe it\u0027s not important to try to enforce boundaries for the \"fundamental\" product makefiles like base_system, media_product, handheld_vendor, etc), but I think it\u0027s a good framework in general for external entities working on custom SSI-based builds.\n\n\u003e There are also bugs that allow you to circumvent artifact path requirements, like b/299166571.\n\nUnfortunately I can\u0027t read the issue, but I think this change also makes artifact path requirements more robust and would expect it to be harder to circumvent with makefile-inheritance-based trickery.",
      "parentUuid": "d17af274_b76671ec",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a22a2e29_d4a58b16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-08T00:32:14Z",
      "side": 1,
      "message": "b/299166571 is that the files installed by adding modules to `PRODUCT_PACKAGES_SHIPPING_API_LEVEL_*` are not checked by artifact path requirements. I briefly tried to fix it in https://android-review.googlesource.com/c/platform/build/+/2737051/3",
      "parentUuid": "cb46774c_3464fc55",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8778382b_69e44500",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-08T00:41:06Z",
      "side": 1,
      "message": "Interesting, thanks for the insight.  I might look into that as a follow-on, but I\u0027ll leave this change alone since it should have no compatibility impact to existing code, whereas fixing this bug would add new violations.",
      "parentUuid": "a22a2e29_d4a58b16",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "689ddf1a_46f5b0a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2023-11-08T10:09:16Z",
      "side": 1,
      "message": "\u003e It\u0027s also not really clear why we care about certain makefiles owning certain paths.\n\nIt\u0027s clear to me ðŸ˜Š I\u0027d be happy to give you more context about this Cole, ping me if you\u0027re interested.\n\nAside from the original intentions of this split, I think they would also serve as a good base for setting up \"real\" build targets for the various partitions with explicit deps (as opposed to the haphazard staging directory strategy).\n\n\u003e most of the time they have no recourse to fix them other than adding an exception for certain paths\n\nI don\u0027t agree. Our internal builds give a different error message (see `PRODUCT_ARTIFACT_PATH_REQUIREMENT_HINT`) that link to go/artifact-error, which gives more context and recommends reaching out to a mailing list for guidance if necessary (which many people have done). I\u0027m pretty confident the existence of these checks have kept the partition split in makefiles at a good level since it was implemented ~5 years ago. I don\u0027t want to think about what they would have looked like without these checks. They might not be perfect, but they\u0027re a lot better than nothing.",
      "parentUuid": "8778382b_69e44500",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08e113e3_c45018de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-10T20:50:35Z",
      "side": 1,
      "message": "Hey folks, just wondering if there are any updates here?  Any followup needed from my end?",
      "parentUuid": "689ddf1a_46f5b0a9",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3932e818_145ddb85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-27T18:28:17Z",
      "side": 1,
      "message": "Gentle post-holiday ping ðŸ˜Š",
      "parentUuid": "08e113e3_c45018de",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39e0e81_a2d34370",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-28T01:00:53Z",
      "side": 1,
      "message": "Sorry for the slow review, I took a look at this some today, but I want to spend more time digging into it tomorrow.",
      "parentUuid": "3932e818_145ddb85",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b7ecc8_ab08b612",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "`PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS` is supposed to provide a global switch to turn off artifact path requirements for the whole product. Why are we making it per-makefile?",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b58f9951_92f0a0da",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:12:05Z",
      "side": 1,
      "message": "It is already per-makefile: https://cs.android.com/android/platform/superproject/+/master:build/make/core/product.mk;l\u003d290;drc\u003daa9a4a490783f114f224716526cae5c16e0d4a13",
      "parentUuid": "e0b7ecc8_ab08b612",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fec22df_571bc623",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:16:00Z",
      "side": 1,
      "message": "It\u0027s a product variable, but the [previous implementation was just accessing it\u0027s final value](https://cs.android.com/android/platform/superproject/main/+/main:build/make/core/artifact_path_requirements.mk;l\u003d53;drc\u003dd8cde776070d0a2b592d5b53dac5c188b73a671b), not it\u0027s value at the point of intermediate makefiles.",
      "parentUuid": "b58f9951_92f0a0da",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2126fdcc_e733aecd",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:37:38Z",
      "side": 1,
      "message": "Indeed, I assumed this to be because the previous implementation didn\u0027t account for inheritance at all.  I tried both ways and found this way to give better error messages.  This makes sense to me -- individual products should be able to specify that they enforce a boundary.  Boundary violations in child products can be ignored by setting the variable to false.",
      "parentUuid": "4fec22df_571bc623",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd9a7190_1150b0d0",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "Please document this function",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19073ca0_0a292c81",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-28T01:00:53Z",
      "side": 1,
      "message": "isn\u0027t `_nmp_all_visited_parents` going to just be cleared immediately after this due to the recursive call?",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a36e7696_c9f03599",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-28T01:05:15Z",
      "side": 1,
      "message": "Ah yeah good catch, missed this in a refactor.",
      "parentUuid": "19073ca0_0a292c81",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1a174b3_2d8f6012",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "This evaluating a variable without calling it is an interesting trick that I didn\u0027t know about before, but I think it would be clearer if we just always called variables that are used as functions. Especially in cases like this where you\u0027re mixing the trick with a standard call.\n\nSame in product.mk",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06fa154d_40ca4c52",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:19:51Z",
      "side": 1,
      "message": "Very fair, will do!",
      "parentUuid": "c1a174b3_2d8f6012",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ebd9d5d_4e8c9ea4",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "Is a \"derived product\" a child or parent product? What does \"override them away\" mean?",
      "range": {
        "startLine": 83,
        "startChar": 45,
        "endLine": 83,
        "endChar": 84
      },
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a35ca2af_de345c4f",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:19:51Z",
      "side": 1,
      "message": "Derived \u003d\u003d child.  Imagine /system/FooStub.apk in base.mk and /system_ext/Foo.apk in derived.mk, where derived.mk has $(call require-no-new-artifacts-outside-path, /system_ext), and Foo overides FooStub -- now derived.mk and products that inherit it will not have /system/FooStub.apk in the system image, so having /system/FooStub.apk be a strict exception will cause a build error.\n\nBeyond replacing \"derived\" with \"child\", do you have suggestions on a better way to phrase this?",
      "parentUuid": "2ebd9d5d_4e8c9ea4",
      "range": {
        "startLine": 83,
        "startChar": 45,
        "endLine": 83,
        "endChar": 84
      },
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2dba795_8eca1efc",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "Similarly to `PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS`, this used to be a global variable. Simply changing it to be scoped won\u0027t work for existing makefiles like this one, that set it but don\u0027t call `require-artifacts-in-path`: https://cs.android.com/android/platform/superproject/main/+/main:build/make/target/product/runtime_libart.mk;l\u003d196;drc\u003dbf0c0e68568a2321d1b4c0e9170b31dcfc7cdb54",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ca2f878_c1485b84",
        "filename": "core/artifact_path_requirements.mk",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:12:05Z",
      "side": 1,
      "message": "This is also already a per-product-makefile variable: https://cs.android.com/android/platform/superproject/+/master:build/make/core/product.mk;l\u003d294;drc\u003daa9a4a490783f114f224716526cae5c16e0d4a13",
      "parentUuid": "f2dba795_8eca1efc",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "774ab538_184f63cb",
        "filename": "core/product.mk",
        "patchSetId": 3
      },
      "lineNbr": 534,
      "author": {
        "id": 1535516
      },
      "writtenOn": "2023-11-29T01:08:22Z",
      "side": 1,
      "message": "Is there a need for this functionality? This seems like it enables laziness instead of properly ensuring all your files, even from within inherited makefiles, are within your boundaries.",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42b9520a_1a29b01e",
        "filename": "core/product.mk",
        "patchSetId": 3
      },
      "lineNbr": 534,
      "author": {
        "id": 1903905
      },
      "writtenOn": "2023-11-29T01:30:40Z",
      "side": 1,
      "message": "There is -- in fact I think this is the common case!  It\u0027s a consequence of the hierarchy outlined in the commit message, where e.g. you need the product partition makefile to inherit the system partition makefile but also ensure the things you add directly to the product partition makefile always only actually contribute to the product partition.  If you set it up so that product doesn\u0027t inherit system, inevitably your product-specific packages pull in a dependency from system that by all means should be assumed to be part of the system image and not listed as an exception in the product partition makefile.  Note that it will still yell at you if your product-specific package requires a system dependency that is *not* listed in the system partition makefile.",
      "parentUuid": "774ab538_184f63cb",
      "revId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "AIDL-API-Review",
        "description": {
          "value": "Submit requirement for the AIDL-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(.*/)?aidl_api/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:AIDL-API-Review AND -label:AIDL-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(.*/)?aidl_api/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(.*/)?aidl_api/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:AIDL-API-Review AND -label:AIDL-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "API-Review",
        "description": {
          "value": "Submit requirement for the API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:API-Review\u003dMAX AND -label:API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\" AND -project:device/generic/vulkan-cereal AND -project:platform/external/qemu AND -project:platform/hardware/interfaces AND -project:toolchain/go AND -project:platform/prebuilts/go/darwin-x86 AND -project:platform/prebuilts/go/linux-x86 AND -project:platform/system/tools/xsdc AND -project:platform/external/gfxstream-protocols -(project:platform/frameworks/av AND file:\".*/xmlparser/.*\") AND -(project:platform/external/icu AND file:\".*android_icu4j/api/legacy_platform/.*\") AND -(project:platform/tools/base AND file:\".*build-system/.*\") AND -(project:platform/system/libvintf AND file:\"^xsd/\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^(((~(xsd|xml)).*/)?)api/((~(xsd|xml)).*?)\\\\.txt$\"","project:device/generic/vulkan-cereal","project:platform/external/qemu","project:platform/hardware/interfaces","project:toolchain/go","project:platform/prebuilts/go/darwin-x86","project:platform/prebuilts/go/linux-x86","project:platform/system/tools/xsdc","project:platform/external/gfxstream-protocols","project:platform/system/libvintf","file:\"^xsd/\"","project:platform/frameworks/av","file:\".*/xmlparser/.*\"","project:platform/external/icu","file:\".*android_icu4j/api/legacy_platform/.*\"","project:platform/tools/base","file:\".*build-system/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:API-Review=MAX AND -label:API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Build-Team-Review",
        "description": {
          "value": "Build team review is required"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Build-Team-Review\u003dMAX AND -label:Build-Team-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-message:\"Import translations.\" AND message:\"DO NOT MERGE ANYWHERE\" AND -branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"Import translations.\"","message:\"DO NOT MERGE ANYWHERE\"","branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Build-Team-Review=MAX AND -label:Build-Team-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the Code-Review requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Code-Review\u003dMIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,user\u003dnon_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review\u003dMAX,count\u003e\u003d2) OR (label:Code-Review\u003dMAX AND (label:Exempt\u003d+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Code-Review=MIN AND (-is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,user=non_uploader OR (is:android-cherry-pick_exemptedusers AND label:Code-Review=MAX,count>=2) OR (label:Code-Review=MAX AND (label:Exempt=+1 OR (uploader:1474732 AND (project:platform/developers/docs OR project:platform/frameworks/support)))))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MIN","is:android-cherry-pick_exemptedusers","label:Code-Review=MAX,user=non_uploader","is:android-cherry-pick_exemptedusers","label:Code-Review=MAX,count>=2","label:Code-Review=MAX","label:Exempt=+1","uploader:1474732","project:platform/developers/docs","project:platform/frameworks/support"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "DrNo-Review",
        "description": {
          "value": "Submit requirement for the DrNo-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/android15-automotiveos-dev OR branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:refs/heads/android15-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR branch:refs/heads/emu-34-2-dev OR branch:refs/heads/emu-35-1-dev OR branch:refs/heads/emu-35-2-dev OR branch:refs/heads/emu-35-3-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:DrNo-Review\u003dMAX AND -label:DrNo-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/android15-automotiveos-dev OR branch:refs/heads/oreo-cts-dev OR branch:refs/heads/oreo-mr1-cts-dev OR branch:refs/heads/oreo-vts-dev OR branch:refs/heads/oreo-mr1-vts-dev OR branch:refs/heads/nougat-cts-dev OR branch:refs/heads/nougat-mr1-cts-dev OR branch:refs/heads/pie-cts-dev OR branch:refs/heads/pie-vts-dev OR branch:refs/heads/android10-tests-dev OR branch:refs/heads/android11-tests-dev OR branch:refs/heads/android12-tests-dev OR branch:refs/heads/android12L-tests-dev OR branch:refs/heads/android13-tests-dev OR branch:refs/heads/android14-tests-dev OR branch:refs/heads/android15-tests-dev OR branch:^refs/heads/.*-gsi OR branch:refs/heads/emu-32-dev OR branch:refs/heads/emu-33-dev OR branch:refs/heads/emu-34-2-dev OR branch:refs/heads/emu-35-1-dev OR branch:refs/heads/emu-35-2-dev OR branch:refs/heads/emu-35-3-dev OR (branch:refs/heads/main AND (project:device/google/redbull OR project:platform/packages/modules/Bluetooth))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/main"],"failingAtoms":["branch:refs/heads/android15-automotiveos-dev","branch:refs/heads/oreo-cts-dev","branch:refs/heads/oreo-mr1-cts-dev","branch:refs/heads/oreo-vts-dev","branch:refs/heads/oreo-mr1-vts-dev","branch:refs/heads/nougat-cts-dev","branch:refs/heads/nougat-mr1-cts-dev","branch:refs/heads/pie-cts-dev","branch:refs/heads/pie-vts-dev","branch:refs/heads/android10-tests-dev","branch:refs/heads/android11-tests-dev","branch:refs/heads/android12-tests-dev","branch:refs/heads/android12L-tests-dev","branch:refs/heads/android13-tests-dev","branch:refs/heads/android14-tests-dev","branch:refs/heads/android15-tests-dev","branch:^refs/heads/.*-gsi","branch:refs/heads/emu-32-dev","branch:refs/heads/emu-33-dev","branch:refs/heads/emu-34-2-dev","branch:refs/heads/emu-35-1-dev","branch:refs/heads/emu-35-2-dev","branch:refs/heads/emu-35-3-dev","project:device/google/redbull","project:platform/packages/modules/Bluetooth"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:DrNo-Review=MAX AND -label:DrNo-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Lint",
        "description": {
          "value": "Submit requirement for the Lint requirement"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Lint\u003dMIN AND (label:Lint\u003d+2 OR -label:Lint\u003d-1)"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Lint=MIN AND (label:Lint=+2 OR -label:Lint=-1)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Lint=MIN","label:Lint=+2","label:Lint=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "NDK-API-Review",
        "description": {
          "value": "Submit requirement for the NDK-API-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "file:\"^.*\\\\.map\\\\.txt$\" AND -project:platform/prebuilts/clang/host/linux-x86"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:NDK-API-Review\u003dMAX AND -label:NDK-API-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"file:\"^.*\\\\.map\\\\.txt$\" AND -project:platform/prebuilts/clang/host/linux-x86"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["file:\"^.*\\\\.map\\\\.txt$\"","project:platform/prebuilts/clang/host/linux-x86"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:NDK-API-Review=MAX AND -label:NDK-API-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*Unresolved-Comment-Reason:.*\""]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Open-Source-Licensing",
        "description": {
          "value": "Submit requirement for the Open-Source-Licensing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Open-Source-Licensing\u003d0 OR (-label:Open-Source-Licensing\u003dMIN AND ((label:Open-Source-Licensing\u003dMAX AND label:Open-Source-Licensing\u003d-1) OR -label:Open-Source-Licensing\u003d-1))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Open-Source-Licensing=0 OR (-label:Open-Source-Licensing=MIN AND ((label:Open-Source-Licensing=MAX AND label:Open-Source-Licensing=-1) OR -label:Open-Source-Licensing=-1))"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Open-Source-Licensing=0","label:Open-Source-Licensing=MIN","label:Open-Source-Licensing=MAX","label:Open-Source-Licensing=-1","label:Open-Source-Licensing=-1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Performance",
        "description": {
          "value": "Submit requirement for Android Performance Presubmit"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-(branch:refs/meta/config OR branch:refs/heads/androidx-main)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Performance\u003dMIN,android-crystalball-crystalball-presubmit AND -label:Performance\u003d0"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "(-label:Performance\u003e0,android-crystalball-crystalball-presubmit AND label:Performance\u003e0) OR is:android-but-lint_exemptedusers OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert) OR label:Bypass-Presubmit\u003e0 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-(branch:refs/meta/config OR branch:refs/heads/androidx-main)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","branch:refs/heads/androidx-main"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Performance=MIN,android-crystalball-crystalball-presubmit AND -label:Performance=0"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Performance=0"],"failingAtoms":["label:Performance=MIN,android-crystalball-crystalball-presubmit"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"(-label:Performance>0,android-crystalball-crystalball-presubmit AND label:Performance>0) OR is:android-but-lint_exemptedusers OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert) OR label:Bypass-Presubmit>0 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Performance>0,android-crystalball-crystalball-presubmit","label:Performance>0","is:android-but-lint_exemptedusers","is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Bypass-Presubmit>0","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Presubmit-Verified",
        "description": {
          "value": "Submit requirement for the Presubmit-Verified requirement"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "-label:Presubmit-Verified\u003d-2 AND (label:Bypass-Presubmit\u003d+1 OR label:Presubmit-Verified-Together\u003d+1 OR (-label:Presubmit-Verified\u003d-1 AND (label:Presubmit-Verified\u003d+2 OR label:Presubmit-Verified\u003d+1)))"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bypass-Presubmit\u003d+2 OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override\u003d+1 AND is:pure-revert AND -label:Presubmit-Verified\u003d-2) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Presubmit-Verified=-2 AND (label:Bypass-Presubmit=+1 OR label:Presubmit-Verified-Together=+1 OR (-label:Presubmit-Verified=-1 AND (label:Presubmit-Verified=+2 OR label:Presubmit-Verified=+1)))"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Presubmit-Verified=-2","label:Bypass-Presubmit=+1","label:Presubmit-Verified-Together=+1","label:Presubmit-Verified=-1","label:Presubmit-Verified=+2","label:Presubmit-Verified=+1"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bypass-Presubmit=+2 OR is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR (label:Build-Cop-Override=+1 AND is:pure-revert AND -label:Presubmit-Verified=-2) OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bypass-Presubmit=+2","is:android_exemptedusers","is:android-but-lint_exemptedusers","branch:\"^refs/heads/cherrypick-temp-.*\"","is:android-cherry-pick_exemptedusers","label:Build-Cop-Override=+1","is:pure-revert","label:Presubmit-Verified=-2","is:pure-revert","ownerin:mdb/android-triage-xwf-extended-access-team-policy"]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Qualcomm-Review",
        "description": {
          "value": "Submit requirement for the Qualcomm-Review"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Qualcomm-Review\u003dMAX AND -label:Qualcomm-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override\u003d+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\" AND -project:\"^.*/vendor/(qcom|bsp).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["authoremail:\"^.*@(qti\\\\.qualcomm\\\\.com|qca\\\\.qualcomm\\\\.com|quicinc\\\\.com|qualcomm\\\\.com)\"","project:\"^.*/vendor/(qcom|bsp).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Qualcomm-Review=MAX AND -label:Qualcomm-Review=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:android_exemptedusers OR is:android-but-lint_exemptedusers OR (branch:\"^refs/heads/cherrypick-temp-.*\" AND is:android-cherry-pick_exemptedusers) OR label:Build-Cop-Override=+1 OR (ownerin:mdb/android-triage-xwf-extended-access-team-policy AND is:pure-revert)"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a361aa1c39aab51d62816f34cfd93e0cd137cf83",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}