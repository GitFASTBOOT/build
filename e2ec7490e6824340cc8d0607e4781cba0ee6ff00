{
  "comments": [
    {
      "key": {
        "uuid": "05b94d5e_2acdda02",
        "filename": "envsetup.sh",
        "patchSetId": 2
      },
      "lineNbr": 875,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-12-07T22:01:06Z",
      "side": 1,
      "message": "If $DIR/Android.mk doesn\u0027t exist doesn\u0027t this end up setting ONE_SHOT_MAKEFILE to point to a path that doesn\u0027t exist?\n\nI think you want to walk up the directories until you find an Android.mk or Android.bp and then build there.",
      "revId": "e2ec7490e6824340cc8d0607e4781cba0ee6ff00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14407697_a0fce858",
        "filename": "envsetup.sh",
        "patchSetId": 2
      },
      "lineNbr": 875,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-12-07T22:19:13Z",
      "side": 1,
      "message": "Since `mmm` takes $MDIR as a command line argument, it seems more useful to me to throw an error than to autocorrect the argument if it\u0027s wrong (and building slightly more than what the user expected).\n\n(Also of note is that technically the MODULES-IN-$MDIR task/rule may still exist even when $MDIR/Android.mk doesn\u0027t exist, which does happen for `mmm hardware/interfaces/broadcastradio/1.1/vts`)\n\n`mm` does walk up the tree though, which makes sense to me since it uses $PWD as the starting point, which could be less stable\n\nIt does seem unfortunate that it causes `mmm` and `mm` to have different directory-locating semantics though.",
      "parentUuid": "05b94d5e_2acdda02",
      "revId": "e2ec7490e6824340cc8d0607e4781cba0ee6ff00",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}