{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e50e42ba_5804e986",
        "filename": "core/product_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2021-10-15T23:58:24Z",
      "side": 0,
      "message": "On a second thought, how about change this to gsi_*?\n\nSo if someone accidentally set PRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT for a non-GSI target, they will get the build break in the first place?\n\nNote that sign_target_files_apks from https://r.android.com/1856274 is a reference signing tool in AOSP. Partners might not use it and might have their own signing tools.",
      "range": {
        "startLine": 400,
        "startChar": 18,
        "endLine": 400,
        "endChar": 54
      },
      "revId": "88cceca4c52255d283644b9a135b8092d73e3214",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2f546be_e6de648a",
        "filename": "core/product_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-10-16T07:45:07Z",
      "side": 0,
      "message": "Globbing gsi_* could also include non-phone-GSI products in downstream branches, which contains god-knows-what product names.\n\nI think the problem with the current check is that people could get a build break whether this is set intentionally or not.\n\nThe main take of this change is, whether intentionally or not, setting this shouldn\u0027t be a breakage, as long as the image is not release signed. (in fact this  already is a redundant check, because for \nPRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT to work, the device need to be unlocked or AVB disabled anyway, because vendor_boot-debug mustn\u0027t be signed)\n\n------\n\nIf they could be using their own signing tool, them there\u0027s no point for us implementing this check, because they can just remove this line in their local tree",
      "parentUuid": "e50e42ba_5804e986",
      "range": {
        "startLine": 400,
        "startChar": 18,
        "endLine": 400,
        "endChar": 54
      },
      "revId": "88cceca4c52255d283644b9a135b8092d73e3214",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c599187_46316cb2",
        "filename": "core/product_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2021-10-16T16:40:44Z",
      "side": 0,
      "message": "\u003e setting this shouldn\u0027t be a breakage, as long as the image is not release signed.\n\nI think many of the targets will finally get release signed, no?\n(e.g., at leat \u003e 50%?).\n\nMy main intention here is to notify someone, if they accidentally set PRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT, without really know what\u0027s the implication behind. Build break looks a direct and clear message to me. \n(Or do we have other method to remind or check this programmatically?)\n\n\u003e them there\u0027s no point for us implementing this check, \n\nNot really, we still can prevent, e.g., our internal aosp_arm64 from including /system/system_ext/etc/selinux/userdebug_plat_sepolicy.cil. Or other gsi targets that if they don\u0027t want to up-in PRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT.\n\n\u003e because they can just remove this line in their local tree\n\nI think we have to separate two cases: \n  1) they accidentally do this or\n  2) they intentionally do this. \n  \n  What we can do is only to prevent 1) but not 2).\n  \n  Thoughts?",
      "parentUuid": "d2f546be_e6de648a",
      "range": {
        "startLine": 400,
        "startChar": 18,
        "endLine": 400,
        "endChar": 54
      },
      "revId": "88cceca4c52255d283644b9a135b8092d73e3214",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a845e02e_07d3d411",
        "filename": "core/product_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 400,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2021-10-16T18:07:42Z",
      "side": 0,
      "message": "\u003e I think many of the targets will finally get release signed, no?\n\nI was thinking about -userdebug builds actually, it might be valuable for non-GSI userdebug targets to use PRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT and it\u0027s harmless for them to do so as they are never release signed.\n\n\u003e Build break looks a direct and clear message to me. \n(Or do we have other method to remind or check this programmatically?)\n\nYeah I agree build break conveys the message best, as warnings get ignored 11 out of 10 times ...\n\n\u003e Not really, we still can prevent, e.g., our internal aosp_arm64 from including /system/system_ext/etc/selinux/userdebug_plat_sepolicy.cil\n\nThis leads to my next point. what if we do want to add them to other products? we already have on-going conversation to do this eventually (the email). I also plan to add this to aosp_arm64-*userdebug* for convenience of development. Everytime we add new target we need to add to this list, and create more potential merge conflict across branches. I just feel like this check cripples our productivity, while people outside of Google could just edit out and ignore that check. that doesn\u0027t sound very useful right?\n\n\u003e What we can do is only to prevent 1) but not 2)\n\nMy point is preventing (1) with build break is annoying; OTOH sign_target_files_apk also prevents (1), albeit less direct, and I think this is good tradeoff as this check right now is annoying and doesn\u0027t scale.\n\nOr we should just turn this from error to warning, since we only want to inform unintentional usage? (though it\u0027s likely ignored anyway)ðŸ˜”",
      "parentUuid": "0c599187_46316cb2",
      "range": {
        "startLine": 400,
        "startChar": 18,
        "endLine": 400,
        "endChar": 54
      },
      "revId": "88cceca4c52255d283644b9a135b8092d73e3214",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}