{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9904fc7e_055efa12",
        "filename": "core/product_config.mk",
        "patchSetId": 6
      },
      "lineNbr": 255,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-07-16T13:14:37Z",
      "side": 1,
      "message": "I presume that at some point this will be removed.",
      "revId": "67aa56f69cf9446deb5c6958cda1b52049ea43b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0ab83f7_b7836cda",
        "filename": "core/product_config.mk",
        "patchSetId": 6
      },
      "lineNbr": 255,
      "author": {
        "id": 1061164
      },
      "writtenOn": "2021-07-16T13:22:58Z",
      "side": 1,
      "message": "If we switch boot image definition from just static context into a SingletonModule I think it would be easier to do this definition change there: force core-icu4j into boot image without affecting rest of the configuration.\n\nOr if we get rid of PRODUCT_UPDATABLE_BOOT_JARS all together b/191686720, then this stops being a problem.",
      "parentUuid": "9904fc7e_055efa12",
      "revId": "67aa56f69cf9446deb5c6958cda1b52049ea43b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a251ffb_3bba3334",
        "filename": "core/product_config.mk",
        "patchSetId": 6
      },
      "lineNbr": 255,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-07-16T13:29:36Z",
      "side": 1,
      "message": "I\u0027m not quite sure how a SingletonModule would help. Generally we want to avoid singletons because they won\u0027t work in Bazel. While the creation of the bootImageConfig structs is done in a static context as you say the rules to create the boot image are now generated in art-bootclasspath-fragment and platform-bootclasspath.\n\n\u003e Or if we get rid of PRODUCT_UPDATABLE_BOOT_JARS all together b/191686720, then this stops being a problem.\n\nThat was what I was assuming would allow this to be removed but there was no todo here.",
      "parentUuid": "a0ab83f7_b7836cda",
      "revId": "67aa56f69cf9446deb5c6958cda1b52049ea43b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07d5bb84_c4fe59f7",
        "filename": "core/product_config.mk",
        "patchSetId": 6
      },
      "lineNbr": 255,
      "author": {
        "id": 1061164
      },
      "writtenOn": "2021-07-16T13:38:32Z",
      "side": 1,
      "message": "The boot image definition also affects how dexpreopt is performed; I am not sure if changes in art-bootclasspath-fragment help here?\n\nThe very specific problem I had when I tried to force the core-icu4j into bootimage modules is that there is a check that GlobalConfig is identical to Soong config (is that what it is called?). And ctx.Config() seems to be just parsed directly, without any place to inject a special if-statement for core-icu4j.\n\nI guess an alternative to this make shenanigans is to ignore core-icu4j when we compare globalconfig and ctx.config to be identical, which I thought wasn\u0027t really nice..\n\nThanks! Added todo.",
      "parentUuid": "1a251ffb_3bba3334",
      "revId": "67aa56f69cf9446deb5c6958cda1b52049ea43b0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}