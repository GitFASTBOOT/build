{
  "comments": [
    {
      "key": {
        "uuid": "7c21d2e1_106076af",
        "filename": "core/soong.mk",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2016-03-22T22:23:36Z",
      "side": 1,
      "message": "My only problem with this change is that we aren\u0027t regenerating out/soong/.soong.bootstrap for any affected users, since we only run this target if out/soong/soong doesn\u0027t exist, which it will.\n\nCleanSpec.mk won\u0027t help, since we don\u0027t get that far.\n\nI could change this rule to make $(SOONG_OUT_DIR)/.soong.bootstrap depend on bootstrap.bash, so that anytime bootstrap.bash is updated, then we re-run bootstrap, but that\u0027s not strictly necessary. And ideally, we\u0027d want to re-run it any time SOONG_OUT_DIR changes.",
      "revId": "68dd6afa6f00d6da8cc02be4be787e7e947e429c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c21d2e1_bd598261",
        "filename": "core/soong.mk",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003981
      },
      "writtenOn": "2016-03-22T23:31:38Z",
      "side": 1,
      "message": "I don\u0027t know anyone would encounter such issue in reality.\nIf we really care we can use a variable dependency file like:\nsoong_out_dir_dep :\u003d $(OUT_DIR)/$(subst /,-,$(SOONG_OUT_DIR)).soong_out_dir_dep\n$(soong_out_dir_dep) :\n  $(hide) mkdir -p $(dir $@) \u0026\u0026 rm -f $(dir $@)*.soong_out_dir_dep \u0026\u0026 touch $@\n$(SOONG): $(soong_out_dir_dep)\n  \u003cthe recipe\u003e",
      "parentUuid": "7c21d2e1_106076af",
      "revId": "68dd6afa6f00d6da8cc02be4be787e7e947e429c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c21d2e1_3def5268",
        "filename": "core/soong.mk",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2016-03-23T02:38:09Z",
      "side": 1,
      "message": "We can\u0027t add file dependencies to SOONG right now, since we\u0027re creating a symlink, and make will read the timestamp of build/soong/soong.bash instead of when we created the symlink. So to add a dependency on bootstrap.bash, I\u0027m moving the target here to be $(SOONG_OUT_DIR)/.soong.bootstrap, which is a normal file created by bootstrap.bash.\n\nColin gave the suggestion that we should just compare the current SOONG_OUT_DIR against the ones stored in the $(SOONG_OUT_DIR)/.soong.bootstrap file, and rerun bootstrap if necessary. I\u0027m doing that now.\n\nIt turns out that even if the $(SOONG_OUT_DIR) doesn\u0027t change, if you do:\n\n  mv out ~/out\n  ln -s ~/out out\n\nit would fail because out/soong/soong would be a dangling symlink (hopefully, but could be pointing to a different tree), and we aren\u0027t checking that anymore with a make target. So we also need to validate the relative path reversing that bootstrap.bash is doing. In order to do that here, I\u0027m refactoring the (duplicated) bootstrap path code into a python script that we can call from here (and test).",
      "parentUuid": "7c21d2e1_bd598261",
      "revId": "68dd6afa6f00d6da8cc02be4be787e7e947e429c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}