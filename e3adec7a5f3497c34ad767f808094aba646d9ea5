{
  "comments": [
    {
      "key": {
        "uuid": "30ca486f_b0838855",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Any particular reason for being lower case? At the very least you\u0027ll need to add a disable pylint comment here since this will trigger invalid-name.\n\nI\u0027m guessing nothing here has ever been pylint clean, but lets try not to make that worse :)",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_bd552016",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-17T23:44:04Z",
      "side": 1,
      "message": "A lot of this got reshuffled and lost history:\nhttps://android-review.googlesource.com/#/q/owner:self+status:abandoned+topic:fsconfig-2\n\nIt was never completly clean, as pylint complained about a few things  that were dumb.\n\nI formatted this with yapf with the style set to google iirc.",
      "parentUuid": "30ca486f_b0838855",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d0056432",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Style: stick to \"\"\" for docstrings",
      "range": {
        "startLine": 20,
        "startChar": 4,
        "endLine": 20,
        "endChar": 7
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_f0e98039",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "style: One line summary, blank line, then long description.\n\nhttps://google.github.io/styleguide/pyguide.html?showone\u003dComments#Comments\n\n\u003e We always use the three double-quote \"\"\" format for doc strings (per PEP 257). A doc string should be organized as a summary line (one physical line) terminated by a period, question mark, or exclamation point, followed by a blank line, followed by the rest of the doc string starting at the same cursor position as the first quote of the first line.\n\n(comment applies to other places, I\u0027m not going to call them all out so the other comments don\u0027t get buried in the noise)",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b010f8cf_5e10a770",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-21T23:03:58Z",
      "side": 1,
      "message": "Still needs to be done",
      "parentUuid": "30ca486f_f0e98039",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_90ce8cbf",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "there",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 31
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d011e417",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Pick something more specific. ValueError is probably most appropriate here.",
      "range": {
        "startLine": 46,
        "startChar": 18,
        "endLine": 46,
        "endChar": 27
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_101c3c2d",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "namefoo (missing a space in the string)",
      "range": {
        "startLine": 46,
        "startChar": 53,
        "endLine": 46,
        "endChar": 60
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d0b564d0",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "bad indentaion",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d09c845a",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "`if normalized_value is not None`\n\nAlthough maybe it\u0027s a feature that someone passing the empty string for normalized_value would get ValueError? An explicit check would be more intention revealing though.",
      "range": {
        "startLine": 90,
        "startChar": 32,
        "endLine": 90,
        "endChar": 68
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_40489f2e",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "30ca486f_d09c845a",
      "range": {
        "startLine": 90,
        "startChar": 32,
        "endLine": 90,
        "endChar": 68
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_564dc93c",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T04:15:30Z",
      "side": 1,
      "message": "Actually int(\"\") throws ValueError.",
      "parentUuid": "30ca486f_40489f2e",
      "range": {
        "startLine": 90,
        "startChar": 32,
        "endLine": 90,
        "endChar": 68
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b010f8cf_21015221",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-21T23:03:58Z",
      "side": 1,
      "message": "That\u0027s what I mean by \"maybe it\u0027s a feature that someone passing the empty string for normalized_value would get ValueError?\".\n\nI think both this and the updated version still don\u0027t make it clear if the behavior of the empty string for `normalized_value` is intentional or a bug.\n\nThe following seems to most clear IMO:\n\n    if normalized_value \u003d\u003d \u0027\u0027:\n        raise ValueError(\u0027normalized_value cannot be the empty string\u0027)\n    elif normalized_value is None:\n        self.normalized_value \u003d str(int(value))\n    else:\n        self.normalized_value \u003d normalized_value\n\nNow that I\u0027ve seen it written that way, I noticed something else: do you need to perform any checking on normalized_value?",
      "parentUuid": "30ca486f_564dc93c",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_bd11133d",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-29T03:38:22Z",
      "side": 1,
      "message": "I think I can refactor this so the AID class does all the checking and conversion. As far as empty string, you cannot get an empty string as you\u0027ll hit the specified but unset check when the parser pulls it out of the ini file. If you quote it, the quotes are preserved and passed to int(x, 0) and it won\u0027t convert.",
      "parentUuid": "b010f8cf_21015221",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_2b0f09a9",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "file_name (str): The config.fs...",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_ab37993f",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Looks like this wasn\u0027t even an option before then? Bummer. I was going to suggest that this should be explicitly set for consistent behavior, but I don\u0027t think we want that behavior to be non-strict :(",
      "range": {
        "startLine": 170,
        "startChar": 25,
        "endLine": 173,
        "endChar": 19
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_80cf176d",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 173,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "Yeah I don\u0027t want this, but it\u0027s not an option. The only way would be to subclass and get into a world of pain and suffering.",
      "parentUuid": "30ca486f_ab37993f",
      "range": {
        "startLine": 170,
        "startChar": 25,
        "endLine": 173,
        "endChar": 19
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_4b336527",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Add an \"Args:\" section. Not obvious what config is at first glance.",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_0bd5eda0",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "A closure would be a lot cleaner imo\n\n    def error_message(msg):\n        return \u0027{} for: \"{}\" file: \"{}\"\u0027.format(msg, section_name, file_name)",
      "range": {
        "startLine": 221,
        "startChar": 7,
        "endLine": 221,
        "endChar": 80
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_b322af14",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "Yeah I like that better too.",
      "parentUuid": "30ca486f_0bd5eda0",
      "range": {
        "startLine": 221,
        "startChar": 7,
        "endLine": 221,
        "endChar": 80
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_2b154968",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "ValueError",
      "range": {
        "startLine": 229,
        "startChar": 18,
        "endLine": 229,
        "endChar": 25
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d31f2bd3",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "Scratching my head, why did I do that.",
      "parentUuid": "30ca486f_2b154968",
      "range": {
        "startLine": 229,
        "startChar": 18,
        "endLine": 229,
        "endChar": 25
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_3d6bd060",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 334,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Use a property instead?\n\n    @property\n    def files(self):\n        return self._files",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d34d6be3",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 334,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "I thought the point of properties is so you could do foo.files and if you wanted to encapsulate it later, you could by adding a property.\n\nI\u0027m going to skip this for now, unless you have a more compelling reason.",
      "parentUuid": "30ca486f_3d6bd060",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b010f8cf_01cf6e6e",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 334,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-21T23:03:58Z",
      "side": 1,
      "message": "That\u0027s part of the reason, but I\u0027ve always considered a property to be the more pythonic solution. It keeps the method of accessing things consistent. It also makes it possible to go the other direction (accessor to simple attribute) if need be.\n\nLooks like at least some people on SO agree with me: http://stackoverflow.com/q/13852279/632035. The Google Style guide also agrees: https://google.github.io/styleguide/pyguide.html?showone\u003dProperties#Properties\n\nI can see a reason for property rather than a pure attribute here though: keeping it read only to users of the class. @property does enforce that unless you\u0027ve also made a @property.setter.",
      "parentUuid": "30ca486f_d34d6be3",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_cfa7ee57",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 334,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-29T03:38:22Z",
      "side": 1,
      "message": "I don\u0027t like it but ill do it.",
      "parentUuid": "b010f8cf_01cf6e6e",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_fd9f9839",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Use `\u0027\u0027.format()` (or `\u0027\u0027 % args`) for anything non-trivial",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_fdcdd849",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 473,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "\u0027 (be consistent)",
      "range": {
        "startLine": 473,
        "startChar": 11,
        "endLine": 473,
        "endChar": 12
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_1db454b0",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "There\u0027s a really handy module to make indentation on things like this nicer:\n\n    _GENERATED \u003d textwrap.dedent(\"\"\"\\\n        /*\n         * THIS IS AN AUTOGENERATED FILE! DO NOT MODIFY\n         */\n        \"\"\")",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 484,
        "endChar": 4
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d6b559d0",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T04:15:30Z",
      "side": 1,
      "message": "Thank you for that!",
      "parentUuid": "30ca486f_1db454b0",
      "range": {
        "startLine": 480,
        "startChar": 0,
        "endLine": 484,
        "endChar": 4
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_5de5ecbf",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-17T23:38:03Z",
      "side": 1,
      "message": "Trailing newline is inconsistent in all these. Most don\u0027t have it.",
      "range": {
        "startLine": 488,
        "startChar": 71,
        "endLine": 488,
        "endChar": 73
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ca486f_d361eb29",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-18T02:07:04Z",
      "side": 1,
      "message": "The newlines here make the generated file easier for a human to read IMHO.",
      "parentUuid": "30ca486f_5de5ecbf",
      "range": {
        "startLine": 488,
        "startChar": 71,
        "endLine": 488,
        "endChar": 73
      },
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b010f8cf_cc1d0ddf",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1043845
      },
      "writtenOn": "2016-11-21T23:03:58Z",
      "side": 1,
      "message": "Sure, but that logic probably belongs in the printing code rather than built in to the variable.",
      "parentUuid": "30ca486f_d361eb29",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "702a0062_2fdecac9",
        "filename": "tools/fs_config/fs_config_generator.py",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1013433
      },
      "writtenOn": "2016-11-29T03:38:22Z",
      "side": 1,
      "message": "Fair enough",
      "parentUuid": "b010f8cf_cc1d0ddf",
      "revId": "e3adec7a5f3497c34ad767f808094aba646d9ea5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}