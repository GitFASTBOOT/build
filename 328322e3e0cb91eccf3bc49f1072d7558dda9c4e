{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2442a930_fc57789d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2022-05-12T09:44:57Z",
      "side": 1,
      "message": "tests?",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64b454b5_17aee178",
        "filename": "envsetup.sh",
        "patchSetId": 2
      },
      "lineNbr": 947,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "Here and elsewhere: should be \"TODO(b/NNNN):\" or similar, with a tracking bug so that the TODO doesn\u0027t get lost.",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d881449_7cb26829",
        "filename": "envsetup.sh",
        "patchSetId": 2
      },
      "lineNbr": 953,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "eliminate the `cd` with `realpath --canonicalize-existing \"${TOP}\"`",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a29be5_8c12458e",
        "filename": "envsetup.sh",
        "patchSetId": 2
      },
      "lineNbr": 961,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "use `realpath --canonicalize-existing \"${PWD}\"`, and then `PWD\u003d\"$(dirname \"${PWD}\")` to move up.  (eliminates `cd` commands, and complexity of self-parsing the path.",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef37e9fb_dd925256",
        "filename": "orchestrator/core/api_assembly.py",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "Here and elsewhere: docstring for every class and function...",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6362bfe_eecba8f5",
        "filename": "orchestrator/core/api_assembly.py",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:29:34Z",
      "side": 1,
      "message": "nit: This feels like something that should be deferred to a build system (as part of a bootstrapping process. But that can get complicated quickly)",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 54
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e18f3e0_441f03fe",
        "filename": "orchestrator/core/api_assembly.py",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:29:34Z",
      "side": 1,
      "message": "Should this contain another argument for the lunch config?\n\ne.g. both system and bionic inner tree can export an API contribution for `bionic`. But if the chosen lunch combo uses `bionic` from the bionic inner tree, the collated API contribution from come from there.",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 25
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4ba125e_2e159f7f",
        "filename": "orchestrator/core/inner_tree.py",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:43:36Z",
      "side": 1,
      "message": "nit: I think an exception to this rule is the `interrogate the inner tree` step, which only depends on root",
      "range": {
        "startLine": 23,
        "startChar": 40,
        "endLine": 23,
        "endChar": 73
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e971e778_48393255",
        "filename": "orchestrator/core/inner_tree.py",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "Reads cleaner as:\n```\n       from textwrap import dedent\n       return dedent(\"\"\"\n           InnerTrees {\n               trees: [\n                   %(trees)s\n               ]\n               ...\n       \"\"\")\n```",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2b03aff_816a5805",
        "filename": "orchestrator/core/lunch.py",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "Maybe make this a constant defined above?\ndocstring should describe args and return.",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 28,
        "endChar": 31
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e23259ef_12aa3f96",
        "filename": "orchestrator/inner_build/common.py",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "Any reason not to make this a class method?",
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebfd5fac_1679fcd9",
        "filename": "orchestrator/inner_build/common.py",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:29:34Z",
      "side": 1,
      "message": "nit: the program name should not be hardcoded here since it can be bazel or `inner_build_demo.py`",
      "range": {
        "startLine": 24,
        "startChar": 37,
        "endLine": 24,
        "endChar": 41
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeb37559_f9f6426c",
        "filename": "orchestrator/inner_build/common.py",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:29:34Z",
      "side": 1,
      "message": "I think you missed updating the help description for `api_domain` here",
      "range": {
        "startLine": 30,
        "startChar": 18,
        "endLine": 30,
        "endChar": 86
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58a04ec6_3fd6b340",
        "filename": "orchestrator/inner_build/inner_build_demo.py",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1583551
      },
      "writtenOn": "2022-05-12T17:00:46Z",
      "side": 1,
      "message": "use textwrap.dedent()",
      "range": {
        "startLine": 47,
        "startChar": 24,
        "endLine": 47,
        "endChar": 26
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b2ee2e_8f123ecb",
        "filename": "orchestrator/inner_build/inner_build_demo.py",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1878380
      },
      "writtenOn": "2022-05-12T17:29:34Z",
      "side": 1,
      "message": "Should the api_domain be bionic and not system?",
      "range": {
        "startLine": 103,
        "startChar": 35,
        "endLine": 103,
        "endChar": 41
      },
      "revId": "328322e3e0cb91eccf3bc49f1072d7558dda9c4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}