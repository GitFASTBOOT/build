{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21e12eda_de2ab346",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2023-03-17T02:43:21Z",
      "side": 1,
      "message": "We used to have something very similar to this as the [partial source] PDK, and removed it because it complicated a lot of things, did not work with Soong, and was quite slow due to needing to look through the full zip file at analysis time. Based on the current logic here, why aren\u0027t you just disabling building the system[_ext] images and specifying prebuilts for those images instead?",
      "revId": "339d0ffdcd6dcafafa0e6e5b1d55e4ef6d15f8ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cffaa30_0d36fbd1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1413436
      },
      "writtenOn": "2023-03-17T05:05:26Z",
      "side": 1,
      "message": "You can find most of the details from go/source-tree-treble-1p, but general idea is that in AB we can utilize chained build, to have one common partial cf build which targets system and system_ext, and other cf build with specific target (such as phone) builds system and system_ext image, with most of modules just being copied from the common partial cf build. For now we are not considering to replace images as prebuilt, as some of the modules from system_ext won\u0027t be used from all targets, and also we\u0027d like to keep use of packaging logic from current build instead of merging artifact with `merge_target_files`.",
      "parentUuid": "21e12eda_de2ab346",
      "revId": "339d0ffdcd6dcafafa0e6e5b1d55e4ef6d15f8ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91e32e10_d4060b4c",
        "filename": "core/main.mk",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2023-03-17T02:43:21Z",
      "side": 1,
      "message": "This is missing all the inputs used by the script (including all the directories it looks through to find the target_files zip). It\u0027s also missing the list of all the files that will be written (which should be in .KATI_IMPLICIT_OUTPUTS).",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 150,
        "endChar": 16
      },
      "revId": "339d0ffdcd6dcafafa0e6e5b1d55e4ef6d15f8ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07d13977_14f8f456",
        "filename": "core/main.mk",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1413436
      },
      "writtenOn": "2023-03-17T05:05:26Z",
      "side": 1,
      "message": "Thx. We expect some of the inputs from the scripts are not required from all cases (for now we target with ab build, but we\u0027d like to cover more cases containing partners if possible), and this will be updated once we have more common target inputs. Let me check about KATI_IMPLICIT_OUTPUTS as I was not aware of it. Thx.",
      "parentUuid": "91e32e10_d4060b4c",
      "range": {
        "startLine": 150,
        "startChar": 0,
        "endLine": 150,
        "endChar": 16
      },
      "revId": "339d0ffdcd6dcafafa0e6e5b1d55e4ef6d15f8ff",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}