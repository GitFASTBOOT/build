package {package_name};
{{ -if not is_test_mode }}
{{ if not library_exported- }}
// TODO(b/303773055): Remove the annotation after access issue is resolved.
import android.compat.annotation.UnsupportedAppUsage;
{{ -endif }}

{{ -if runtime_lookup_required }}
import android.provider.DeviceConfig;
import android.provider.DeviceConfig.Properties;
import android.aconfig.storage.AconfigStorageException;

{{ -if not library_exported }}
import android.aconfig.storage.StorageInternalReader;
{{ -else }}
import android.provider.AconfigPackage;
import java.nio.file.Files;
import java.nio.file.Paths;
{{ -endif }}

{{ -endif }}
/** @hide */
public final class FeatureFlagsImpl implements FeatureFlags \{
{{ -if runtime_lookup_required }}
{{ -if not library_exported }}
    private static final boolean isReadFromNew = StorageInternalReader.isReadFromNew;
{{ else }}
    private static final boolean isReadFromNew = Files.exists(Paths.get("/metadata/aconfig/boot/enable_only_new_storage"));
{{ -endif }}
    private static volatile boolean isCached = false;
{{ -for namespace_with_flags in namespace_flags }}
    private static volatile boolean {namespace_with_flags.namespace}_is_cached = false;
{{ -endfor- }}

{{ for flag in flag_elements }}
{{ -if flag.is_read_write }}
    private static boolean {flag.method_name} = {flag.default_value};
{{ -endif }}
{{ -endfor }}

    private void init() \{
{{ if not library_exported }}
        StorageInternalReader reader = null;
{{ else }}
        AconfigPackage aPackage = null;
        int val;
{{ endif }}
        try \{
{{ if not library_exported }}
            reader = new StorageInternalReader("{container}", "{package_name}");
{{ else }}
            aPackage = new AconfigPackage("{package_name}");
{{ endif }}
{{ for namespace_with_flags in namespace_flags }}
{{ -for flag in namespace_with_flags.flags }}
{{ -if not library_exported }}
{{ if flag.is_read_write }}
            {flag.method_name} = reader.getBooleanFlagValue({flag.flag_offset});
{{ endif }}
{{ else }}
            val = aPackage.getBooleanFlagValue("{flag.flag_name}");
            {flag.method_name} = val == AconfigPackage.FLAG_BOOLEAN_VALUE_NOT_EXIST ? {flag.method_name} : val == AconfigPackage.FLAG_BOOLEAN_VALUE_TRUE;
{{ -endif }}
{{ -endfor }}
{{ -endfor }}
        } catch (Exception e) \{
            throw new AconfigStorageException("Cannot read flag in codegen", e);
        }
        isCached = true;
    }

{{ for namespace_with_flags in namespace_flags }}
    private void load_overrides_{namespace_with_flags.namespace}() \{
        try \{
            Properties properties = DeviceConfig.getProperties("{namespace_with_flags.namespace}");
{{ -for flag in namespace_with_flags.flags }}
{{ -if flag.is_read_write }}
            {flag.method_name} =
                properties.getBoolean(Flags.FLAG_{flag.flag_name_constant_suffix}, {flag.default_value});
{{ -endif }}
{{ -endfor }}
        } catch (NullPointerException e) \{
            throw new RuntimeException(
                "Cannot read value from namespace {namespace_with_flags.namespace} "
                + "from DeviceConfig. It could be that the code using flag "
                + "executed before SettingsProvider initialization. Please use "
                + "fixed read-only flag by adding is_fixed_read_only: true in "
                + "flag declaration.",
                e
            );
        }
        {namespace_with_flags.namespace}_is_cached = true;
    }
{{ endfor- }}

{{ -endif }}{#- end of runtime_lookup_required #}
{{ -for flag in flag_elements }}
    @Override
{{ -if not library_exported }}
    @com.android.aconfig.annotations.AconfigFlagAccessor
    @UnsupportedAppUsage
{{ -endif }}
    public boolean {flag.method_name}() \{
{{ -if flag.is_read_write }}
        if (isReadFromNew) \{
            if (!isCached) \{
                init();
            }
        } else \{
            if (!{flag.device_config_namespace}_is_cached) \{
                load_overrides_{flag.device_config_namespace}();
            }
        }
        return {flag.method_name};
{{ -else }}
        return {flag.default_value};
{{ -endif }}
    }
{{ endfor }}
}
{{ else }} {#- Generate only stub if in test mode #}
/** @hide */
public final class FeatureFlagsImpl implements FeatureFlags \{
{{ for flag in flag_elements }}
    @Override
{{ -if not library_exported }}
    @com.android.aconfig.annotations.AconfigFlagAccessor
{{ -endif }}
    public boolean {flag.method_name}() \{
        throw new UnsupportedOperationException(
            "Method is not implemented.");
    }
{{ endfor- }}
}
{{ endif }}
