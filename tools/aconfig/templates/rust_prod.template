//! codegenerated rust flag lib

/// flag provider
pub struct FlagProvider;

{{ for flag in template_flags }}
{{ if flag.readwrite -}}
/// flag value cache for {flag.name}
lazy_static! \{
    static ref CACHED_{flag.name}: bool = flags_rust::GetServerConfigurableFlag(
        "aconfig_flags.{flag.device_config_namespace}",
        "{flag.device_config_flag}",
        "{flag.default_value}") == "true";
}
{{ -endif }}
{{ endfor }}

impl FlagProvider \{

    {{ for flag in template_flags }}
    /// query flag {flag.name}
    pub fn {flag.name}(&self) -> bool \{
    {{ if flag.readwrite -}}
        CACHED_{flag.name}
    {{ -else- }}
        {flag.default_value}
    {{ -endif }}
    }
    {{ endfor }}

}

/// flag provider
pub static PROVIDER: FlagProvider = FlagProvider;

{{ for flag in template_flags }}
/// query flag {flag.name}
#[inline(always)]
{{ if flag.readwrite -}}
pub fn {flag.name}() -> bool \{
    PROVIDER.{flag.name}()
{{ -else- }}
pub fn {flag.name}() -> bool \{
    {flag.default_value}
{{ -endif }}
}
{{ endfor }}
