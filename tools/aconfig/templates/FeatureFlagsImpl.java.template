package {package_name};
// TODO(b/303773055): Remove the annotation after access issue is resolved.
import android.compat.annotation.UnsupportedAppUsage;
{{ if not is_test_mode }}
{{ if is_read_write- }}
import static android.provider.DeviceConfig.Properties;

import android.provider.DeviceConfig;
{{ endif }}
/** @hide */
public final class FeatureFlagsImpl implements FeatureFlags \{
{{ if is_read_write- }}
{{ for namespace in namespaces }}
private Properties mNamespace_{namespace};
{{ endfor }}
{{ endif- }}

{{ for flag in flag_elements }}
    @Override
    @UnsupportedAppUsage
    public boolean {flag.method_name}() \{
    {{ -if flag.is_read_write }}
        if (mNamespace_{flag.device_config_namespace} == null) \{
            mNamespace_{flag.device_config_namespace} = getProperties("{flag.device_config_namespace}");
        }
        return mNamespace_{flag.device_config_namespace}
            .getBoolean("{flag.device_config_flag}", {flag.default_value});
    {{ else }}
        return {flag.default_value};
    {{ endif- }}
    }
{{ endfor }}

{{ if is_read_write- }}
    private Properties getProperties(String namespace) \{
        Properties properties = null;
        try \{
            properties = DeviceConfig.getProperties(
                namespace,
                ""
            );
        } catch (NullPointerException e) \{
            throw new RuntimeException(
                "Cannot read value of flag " + namespace + " from DeviceConfig. " +
                "It could be that the code using flag executed " +
                "before SettingsProvider initialization. " +
                "Please use fixed read-only flag by adding " +
                "is_fixed_read_only: true in flag declaration.",
                e
            );
        }

        return properties;
    }
{{ endif- }}
}
{{ else }}
{#- Generate only stub if in test mode #}
/** @hide */
public final class FeatureFlagsImpl implements FeatureFlags \{
{{ for flag in flag_elements }}
    @Override
    @UnsupportedAppUsage
    public boolean {flag.method_name}() \{
        throw new UnsupportedOperationException(
            "Method is not implemented.");
    }
{{ endfor }}
}
{{ endif }}
