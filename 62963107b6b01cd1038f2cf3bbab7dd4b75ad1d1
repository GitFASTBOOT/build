{
  "comments": [
    {
      "key": {
        "uuid": "05d08b94_a2aa288a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-07-06T17:46:34Z",
      "side": 1,
      "message": "Hi Colin,\n\nI figure you are the most knowledgeable about make in particular...\n\nPTAL",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "309ea733_4c4b5566",
        "filename": "core/base_rules.mk",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-07-06T19:36:25Z",
      "side": 1,
      "message": "We shouldn\u0027t be reading any of these files during makefile reading, $(shell) use gets very expensive, as we have to re-execute all $(shell) commands linearly on every build.",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31a0333f_8036d581",
        "filename": "core/base_rules.mk",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-07-06T21:17:51Z",
      "side": 1,
      "message": "Unless we can drop the gnu my_module_tags, we don\u0027t really have a choice. It does add about 2 minutes to an \u0027m -j 70 nothing\u0027 build on my specialist workstation.\n\nI believe the gnu module tag gets used in build/make/core/main.mk\n\nIs it safe to run shell scripts there? Perhaps we can get rid of the tag?",
      "parentUuid": "309ea733_4c4b5566",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3254e954_94156ff9",
        "filename": "core/base_rules.mk",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-07-06T22:13:43Z",
      "side": 1,
      "message": "We\u0027d have to get rid of all of the users before removing the MODULE_LICENSE*_GPL/etc files. It\u0027s not performant to read the metadata files in any makefile (other than inside a rule, as that\u0027s executed as needed by ninja -- but the tag isn\u0027t used like that last I checked).\n\nI wonder if this would be a good use case of the dyndep functionality in ninja (we haven\u0027t ported it over to our fork yet). I\u0027m pretty sure it would work for the gpl_source_tgz at least, I haven\u0027t looked at the other users. (I do wonder if the gpl_source_tgz would be better suited as an offline static process rather than inside the build -- I\u0027m not familiar with how it\u0027s used though)",
      "parentUuid": "31a0333f_8036d581",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03c28405_cecee4fa",
        "filename": "core/base_rules.mk",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-07-06T23:29:10Z",
      "side": 1,
      "message": "The MODULE_LICENSE_* files are only used for the tarball and for filtering gnu modules from the sdk build. This change is a stepping stone to putting all of that into the build system a la aiuto@\u0027s v2 stuff.\n\nI don\u0027t see how dyndep would work for the tarball because it kind of has 2 dependency lists: a list of files and a list of directories. But that particular makefile doesn\u0027t do anything until you explicitly request the tarball output so calling shell from there does no harm.\n\nIf we didn\u0027t have to worry about the module-level logic, it would be a piece of cake to move the shell call to collect_gpl_sources.mk, but that gnu module tag used in main.mk stops us.\n\nIt looks like the gnu module stuff only gets run for is_sdk_build. If we isolate the shell call to inside that ifdef block, might that limit the performance issue to a suitably small set of targets?\n\nHow many times does the block in main.mk run compared to the block in base_rules.mk ?",
      "parentUuid": "3254e954_94156ff9",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d1ebc1b_5f000d91",
        "filename": "core/base_rules.mk",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-07-06T23:45:40Z",
      "side": 1,
      "message": "\u003e The MODULE_LICENSE_* files are only used for the tarball and for filtering gnu modules from the sdk build. This change is a stepping stone to putting all of that into the build system a la aiuto@\u0027s v2 stuff.\n\nThe stepping stone there would be to put the information in the Android.mk / Android.bp file, not the METADATA file which we won\u0027t parse at soong/make time (just like Bazel requires it to be in the BUILD file and not the METADATA file last I checked).\n\n\u003e I don\u0027t see how dyndep would work for the tarball because it kind of has 2 dependency lists: a list of files and a list of directories. But that particular makefile doesn\u0027t do anything until you explicitly request the tarball output so calling shell from there does no harm.\n\nThe dyndep would have a dependency on the list of every METADATA file, then it would parse them and output the dependency list (\u003cgpl\u003e/**/*) and the list of directories in a file for the gpl_source_tgz rule to read and generate the tarball.\n\n\u003e move the shell call to collect_gpl_sources.mk\n\nThat wouldn\u0027t help, that makefile is always included.\n\n\u003e It looks like the gnu module stuff only gets run for is_sdk_build. If we isolate the shell call to inside that ifdef block, might that limit the performance issue to a suitably small set of targets?\n\u003e How many times does the block in main.mk run compared to the block in base_rules.mk ?\n\nThat would help, main.mk is read once, base_rules.mk is read tens of thousands of times. But I suspect it still ends up being similar overall performance -- you just end up with one larger execution rather than many smaller ones. Limiting it to when you\u0027re building the sdk helps, but that\u0027s really only hiding the problem.",
      "parentUuid": "03c28405_cecee4fa",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2c8fad4_4de700be",
        "filename": "core/definitions.mk",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-07-06T19:36:25Z",
      "side": 1,
      "message": "We have $(KATI_obsolete_var ...) that can present an error message if anyone attempts to read or write to a variable",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a974ab09_8d138714",
        "filename": "core/definitions.mk",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-07-06T21:17:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2c8fad4_4de700be",
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a77b6a1a_05e08806",
        "filename": "core/tasks/collect_gpl_sources.mk",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-07-06T19:36:25Z",
      "side": 1,
      "message": "conventionally this should be $(call all-files-under,$(ALL_GPL_MODULES)). (I didn\u0027t this that this parsed properly as you wrote it, but it\u0027s make... so who knows)",
      "range": {
        "startLine": 21,
        "startChar": 20,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a78fe88_bc7d5b65",
        "filename": "core/tasks/collect_gpl_sources.mk",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-07-06T21:17:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a77b6a1a_05e08806",
      "range": {
        "startLine": 21,
        "startChar": 20,
        "endLine": 21,
        "endChar": 35
      },
      "revId": "62963107b6b01cd1038f2cf3bbab7dd4b75ad1d1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}