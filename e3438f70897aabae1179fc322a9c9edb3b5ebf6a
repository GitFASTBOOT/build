{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b04e1a27_f3283040",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 12,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "What\u0027s a package id? The fully qualified name `\u003cpackage\u003e.\u003cname\u003e`? Something else?",
      "range": {
        "startLine": 12,
        "startChar": 16,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fdb796_1136a2d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 12,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "The package id is just an integer to represent a package within a container, so later on we are referring to a package, we can just use an int instead of the package string.",
      "parentUuid": "b04e1a27_f3283040",
      "range": {
        "startLine": 12,
        "startChar": 16,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e74d538_c00ea085",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 12,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8fdb796_1136a2d4",
      "range": {
        "startLine": 12,
        "startChar": 16,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ae8c9c_5e4268f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "This hashtable",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65bbf2a2_49beffb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7ae8c9c_5e4268f2",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 20
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f43d226_96c47e2b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 18,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "What\u0027s a value file? The text doesn\u0027t define this.",
      "range": {
        "startLine": 17,
        "startChar": 63,
        "endLine": 18,
        "endChar": 4
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fac55891_d773049a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 18,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Sorry about insufficient description. The value file can be understood as an array of flag values in a file.",
      "parentUuid": "6f43d226_96c47e2b",
      "range": {
        "startLine": 17,
        "startChar": 63,
        "endLine": 18,
        "endChar": 4
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "843f53ab_0d9cbb69",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 18,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fac55891_d773049a",
      "range": {
        "startLine": 17,
        "startChar": 63,
        "endLine": 18,
        "endChar": 4
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb80e262_4883f2d6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 19,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Is \"package id\" different from \"package name\" (a string)? If so, please define it.",
      "range": {
        "startLine": 18,
        "startChar": 65,
        "endLine": 19,
        "endChar": 2
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62cf8dc2_8bcaa09f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 19,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "The package id is just an integer to represent a package within a container, so later on we are referring to a package, we can just use an int instead of the package string.",
      "parentUuid": "cb80e262_4883f2d6",
      "range": {
        "startLine": 18,
        "startChar": 65,
        "endLine": 19,
        "endChar": 2
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16bf0f0f_44141da6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 19,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62cf8dc2_8bcaa09f",
      "range": {
        "startLine": 18,
        "startChar": 65,
        "endLine": 19,
        "endChar": 2
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32df1e17_5e3b02bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "How does this impact build performance? If \"everything on the system partition\" is part of the same container, any change to any flag declaration for any of the targets that install onto /system will trigger a re-compilation of the storage.map file? This is contrary to our goal of separating the aconfig libs as much as possible.\n\nMaybe I\u0027m missing something?",
      "range": {
        "startLine": 22,
        "startChar": 46,
        "endLine": 22,
        "endChar": 55
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0f466c1_cf7eea95",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Is the following correct, and more stringent?\n\nEach container contains exactly one package.map.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 56
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "282569eb_8c1d92af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Yes, the storage map files will be recompiled. This is really a design trade off between build time and run time performance. I\u0027ll share you with the doc describing this tradeoff. Not sure if aosp review board is the right place to share internal files.",
      "parentUuid": "32df1e17_5e3b02bd",
      "range": {
        "startLine": 22,
        "startChar": 46,
        "endLine": 22,
        "endChar": 55
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e71252_bcb82244",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Yes it is.",
      "parentUuid": "e0f466c1_cf7eea95",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 56
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbb48a79_be718995",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "282569eb_8c1d92af",
      "range": {
        "startLine": 22,
        "startChar": 46,
        "endLine": 22,
        "endChar": 55
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9574de3a_873f3711",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3e71252_bcb82244",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 56
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f314ce4b_1af368a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "daemon",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3274c8ea_a9e98a3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 26,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f314ce4b_1af368a6",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 14
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0507f08e_2cf3d3f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 32,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 32,
        "startChar": 26,
        "endLine": 32,
        "endChar": 36
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0999f2fc_c35453c0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 32,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0507f08e_2cf3d3f8",
      "range": {
        "startLine": 32,
        "startChar": 26,
        "endLine": 32,
        "endChar": 36
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6753027_513b9cb2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 37,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Above you state that each container contains no more than one container, and `commands::create_storage` accepts a single `container` parameter. Do you mean `storage file` instead? Or do storage files refer to package.map *and* upcoming files? If so, please define the concept of storage files earlier in the commit message, e.g.\n\nStorage files is a collective term for package.map (added in this CL), flag.map and flag.val (to be added in a follow-up CL)",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 14
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2bf8edd_0e502a96",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 37,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Thanks will do",
      "parentUuid": "a6753027_513b9cb2",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 14
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68119165_0cf71648",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 37,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2bf8edd_0e502a96",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 37,
        "endChar": 14
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a1f18ae_09d7370a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 40,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "sorts",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 13
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70f02b4f_9ef7fb63",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 40,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a1f18ae_09d7370a",
      "range": {
        "startLine": 40,
        "startChar": 9,
        "endLine": 40,
        "endChar": 13
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2646961_32abdd0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 41,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "passes",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 4
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0252c4d3_721494da",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 41,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2646961_32abdd0d",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 4
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bc822be_bd661aca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Will this struct be re-used in the client parsing lib? Should we move it into a separate soong module (not necessarily in this CL)?",
      "range": {
        "startLine": 43,
        "startChar": 52,
        "endLine": 43,
        "endChar": 64
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42d00355_d9053748",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 43,
        "startChar": 52,
        "endLine": 43,
        "endChar": 64
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dde76271_8e9ed6c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Yes, it will be reused for flag.map and flag.val creation",
      "parentUuid": "8bc822be_bd661aca",
      "range": {
        "startLine": 43,
        "startChar": 52,
        "endLine": 43,
        "endChar": 64
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50739d36_5740e192",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dde76271_8e9ed6c3",
      "range": {
        "startLine": 43,
        "startChar": 52,
        "endLine": 43,
        "endChar": 64
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67885515_00b6927f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 43,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42d00355_d9053748",
      "range": {
        "startLine": 43,
        "startChar": 52,
        "endLine": 43,
        "endChar": 64
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9311096c_d6a455bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 50,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "libandroidfw (the Android resource lookup code) encodes resources (resoures.arcs) in big or small Endian -- forget which one, but it\u0027s the one used on most devices, so that on the majority of devices there is no conversion overhead.\n\nHave you checked that big endian is the right choice?",
      "range": {
        "startLine": 50,
        "startChar": 16,
        "endLine": 50,
        "endChar": 35
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d61c020_7f270150",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 50,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "Thanks for the reminding, I will look into this. I\u0027m under the assumption is that as long as I parse this bytes using the same endian, it should be fine. I think I\u0027m directly casting the memory bytes to u32, rather it is parsed. So we can have cross platform compatibility.",
      "parentUuid": "9311096c_d6a455bb",
      "range": {
        "startLine": 50,
        "startChar": 16,
        "endLine": 50,
        "endChar": 35
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fefe4780_a3375995",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 50,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T16:00:59Z",
      "side": 1,
      "message": "You\u0027ll be fine as long as you explicitly use the same endian across the board, but on systems that are already big endian, casting to big endian is / should be a no op and after optimization the cost is zero. We want to make sure we pick the right endianness for the majority of the devices out there, so we don\u0027t pay any conversion overhead on those devices.",
      "parentUuid": "5d61c020_7f270150",
      "range": {
        "startLine": 50,
        "startChar": 16,
        "endLine": 50,
        "endChar": 35
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3efa9cd7_42ddf120",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 50,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T18:51:46Z",
      "side": 1,
      "message": "I checked, it seems android is always little endian. will move to little endian encoding.\n\nhttps://developer.android.com/ndk/guides/abis#:~:text\u003dAndroid%20is%20always%20little%2Dendian,registers%20when%20it%20calls%20functions.",
      "parentUuid": "fefe4780_a3375995",
      "range": {
        "startLine": 50,
        "startChar": 16,
        "endLine": 50,
        "endChar": 35
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1183802_3b386f33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 54,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 54,
        "startChar": 30,
        "endLine": 54,
        "endChar": 34
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45d8339e_3f6d4e37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 54,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1183802_3b386f33",
      "range": {
        "startLine": 54,
        "startChar": 30,
        "endLine": 54,
        "endChar": 34
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb147d2a_6013667f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 55,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "Could we include in this CL only the high-level things that we want to agree on first, and include unit tests for those? Generally I\u0027d rather not merge code without its unit tests.",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdad145b_bfeaad19",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 55,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "+1, do not merge without unit tests. They are necessary to prove the code does what we think it does, and helps bisect future errors.",
      "parentUuid": "bb147d2a_6013667f",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea960a93_80c92356",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 55,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T16:26:16Z",
      "side": 1,
      "message": "Will absolutely add unit tests and send in another patch for review later",
      "parentUuid": "fdad145b_bfeaad19",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ad863cc_7f0e12d6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 55,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea960a93_80c92356",
      "range": {
        "startLine": 54,
        "startChar": 8,
        "endLine": 55,
        "endChar": 16
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c2bc16f_d6fcf352",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 58,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "nit: CLs",
      "range": {
        "startLine": 58,
        "startChar": 69,
        "endLine": 58,
        "endChar": 72
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "560f1a22_4ed2ac43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 58,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c2bc16f_d6fcf352",
      "range": {
        "startLine": 58,
        "startChar": 69,
        "endLine": 58,
        "endChar": 72
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac86e15_fbf73727",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 60,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "nit: please add a Bug: and Test: lines",
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370cfb73_ba37c20d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 60,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Actually not a nit. Those lines are needed, especially the Test: line(s).",
      "parentUuid": "7ac86e15_fbf73727",
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce752051_930f5c46",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 60,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "370cfb73_ba37c20d",
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5322dd69_1cab0ad7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Echoing what others have said in go/aconfig_flag_storage I would prefer if we didn\u0027t invent a new file format, at least not in the initial iteration.\n\nI would prefer if we build the solution on an existing file format, and land the IPC / client libs / etc first. Once we have something that is working we can experiment with a custom file format -- and using performance measurements to motivate the maintenance cost of a custom file format (or not, which is also a valid outcome).",
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0ec08bc_b26871ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:24:34Z",
      "side": 1,
      "message": "I forgot to add: I haven\u0027t reviewed create_storage.rs and package_table.rs. I think we first need to decide on how to land the new feature. I vote for using an existing file format, and getting the rest of the solution in place. Once that has landed, we can look into optimizing the file format (or another part of the solution -- without measurements who knows where the bottlenecks will be?)",
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "333a8385_25bce391",
        "filename": "tools/aconfig/OWNERS",
        "patchSetId": 17
      },
      "lineNbr": 6,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "nit: Sort alphabetically",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 17
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23802074_18ce1bc9",
        "filename": "tools/aconfig/OWNERS",
        "patchSetId": 17
      },
      "lineNbr": 6,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "the change to OWNERS is unrelated to the storage stuff; please extract the OWNERS change to a separate CL",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 6
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ab5c96_e5386d79",
        "filename": "tools/aconfig/OWNERS",
        "patchSetId": 17
      },
      "lineNbr": 6,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T16:26:16Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "23802074_18ce1bc9",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 6
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50a060d4_0b8450fe",
        "filename": "tools/aconfig/OWNERS",
        "patchSetId": 17
      },
      "lineNbr": 6,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43ab5c96_e5386d79",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 6
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f7c18ca_4365f2ea",
        "filename": "tools/aconfig/OWNERS",
        "patchSetId": 17
      },
      "lineNbr": 6,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:53:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "333a8385_25bce391",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 17
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93e44b73_d541a2f5",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 219,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "Please don\u0027t use expect, return an Err instead -- expect prevents effective unit testing.",
      "range": {
        "startLine": 219,
        "startChar": 49,
        "endLine": 219,
        "endChar": 55
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68975716_ce4cb6f2",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 219,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T16:52:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93e44b73_d541a2f5",
      "range": {
        "startLine": 219,
        "startChar": 49,
        "endLine": 219,
        "endChar": 55
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "078bcf2c_0bd2a3f7",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 220,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "Is this necessary? The container argument is not Option\u003c\u0026str\u003e, it\u0027s \u0026str.",
      "range": {
        "startLine": 220,
        "startChar": 52,
        "endLine": 220,
        "endChar": 56
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4a405c7_50fc22a4",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 220,
      "author": {
        "id": 1890055
      },
      "writtenOn": "2023-12-07T21:26:42Z",
      "side": 1,
      "message": "In which scenario will there be flags from a different container?",
      "range": {
        "startLine": 220,
        "startChar": 9,
        "endLine": 220,
        "endChar": 15
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "047e28f8_6c2bdc4c",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 220,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T17:03:39Z",
      "side": 1,
      "message": "It is guarding a case where in an aconfig cache (a vector of parsed flag proto), that we could have different container designations. It won\u0027t happen today, as each aconfig cache is generated from an aconfig declartion which has a unique container designation. But in a hypothetical world, say build system combines different caches into one, then this could happen.",
      "parentUuid": "078bcf2c_0bd2a3f7",
      "range": {
        "startLine": 220,
        "startChar": 52,
        "endLine": 220,
        "endChar": 56
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12c54573_75e6a64b",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 220,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T17:03:39Z",
      "side": 1,
      "message": "For example, we are building \"product\" partition, it uses exported flags defined in \"system\" partition. Then the code in \"product\" partition will link against a flag lib backed by an aconfig file with a \"system\" container designation. The build system sees this aconfig file as being used to build \"product\", thus feeding the aconfig cache files to this command.\n\nThe alternative would be to have build system scan thru the list of aconfig cache files and only feed the set that is relevant. But this seems to be only need by storage creation and is easier to handle in aconfig binary probably.",
      "parentUuid": "b4a405c7_50fc22a4",
      "range": {
        "startLine": 220,
        "startChar": 9,
        "endLine": 220,
        "endChar": 15
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79048284_719db896",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 336,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "This should probably be implemented as a ProtoParsedFlagsExt function instead, but because `find_unique_package` isn\u0027t I\u0027m OK with this for now -- we can make that syntactic sugar change in a follow-up CL.",
      "range": {
        "startLine": 336,
        "startChar": 3,
        "endLine": 336,
        "endChar": 24
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed90beb7_ab0aa9ac",
        "filename": "tools/aconfig/src/commands.rs",
        "patchSetId": 17
      },
      "lineNbr": 336,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T17:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79048284_719db896",
      "range": {
        "startLine": 336,
        "startChar": 3,
        "endLine": 336,
        "endChar": 24
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcef805f_1df8c97f",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 1,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "I would like create_storage.rs and package_table.rs to be moved into a separate subdir, similarly to how the codegen code was moved in aosp/2863041",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 1
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "607d1afd_72a3bb3d",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 1,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T17:03:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcef805f_1df8c97f",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 1
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a1cb52_5864f889",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 63,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T00:30:36Z",
      "side": 1,
      "message": "why do we need this?",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 22
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0290c1f3_b4c1985d",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 63,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T16:26:16Z",
      "side": 1,
      "message": "later in flag.map, we don\u0027t have to use package.flag_name string to represent a flag, rather we can use flag_id.flag_name as a much shorter string. Otherwise, we will repeatedly store package name in the flag.map.",
      "parentUuid": "93a1cb52_5864f889",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 22
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c11f8e26_68411294",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 63,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T19:09:06Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0290c1f3_b4c1985d",
      "range": {
        "startLine": 63,
        "startChar": 12,
        "endLine": 63,
        "endChar": 22
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e102fcc3_62417d74",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 95,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T00:30:36Z",
      "side": 1,
      "message": "in the doc it shows the mode goes first and then the value follows.",
      "range": {
        "startLine": 95,
        "startChar": 35,
        "endLine": 95,
        "endChar": 80
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ed09f8a_38974a09",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 95,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T16:26:16Z",
      "side": 1,
      "message": "It will probably be value first as the value is probably we access most of the time. I\u0027ll fix the doc.",
      "parentUuid": "e102fcc3_62417d74",
      "range": {
        "startLine": 95,
        "startChar": 35,
        "endLine": 95,
        "endChar": 80
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91a20f20_42288255",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 95,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T19:09:06Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1ed09f8a_38974a09",
      "range": {
        "startLine": 95,
        "startChar": 35,
        "endLine": 95,
        "endChar": 80
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20ccf33c_493b4dc2",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T00:43:06Z",
      "side": 1,
      "message": "Please add tests for these two new files",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 1
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7a7a2f1_c3e59c4c",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T17:03:39Z",
      "side": 1,
      "message": "I split the change into two parts. Added a unit test for the first part which is FlagPackage creation.",
      "parentUuid": "20ccf33c_493b4dc2",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 1
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dfe36e2_b4afcbbf",
        "filename": "tools/aconfig/src/create_storage.rs",
        "patchSetId": 17
      },
      "lineNbr": 122,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-11T18:51:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7a7a2f1_c3e59c4c",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 122,
        "endChar": 1
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca8c61e_80468e4a",
        "filename": "tools/aconfig/src/main.rs",
        "patchSetId": 17
      },
      "lineNbr": 117,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:22:23Z",
      "side": 1,
      "message": "How will we handle code that uses flags, but is used in multiple containers, e.g. libprotobuf? In other discussions those soong modules will have a container that explicitly call out that they\u0027re shared.\n\nAssuming their container values will be \"shared\", will those flags not be part of any storage file? Is the right thing when building the storage files for e.g. \"system\" to include \"system\" AND \"shared\" flags?",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e197b785_ae8aa0a8",
        "filename": "tools/aconfig/src/main.rs",
        "patchSetId": 17
      },
      "lineNbr": 117,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T14:18:43Z",
      "side": 1,
      "message": "+1 I am not sure how building system will call this code. Especially currently system/ and vendor/ will be built together, it seems there is no way to differentiate these two",
      "parentUuid": "4ca8c61e_80468e4a",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e20244c1_ba08f639",
        "filename": "tools/aconfig/src/main.rs",
        "patchSetId": 17
      },
      "lineNbr": 117,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "I think in the unbundled apex/apk design, for shared libs, we assign their container designation as a part of platform by default, in this case, \"system\" and all of their flags have to be exported. So other containers access it via external flag access syntax.",
      "parentUuid": "e197b785_ae8aa0a8",
      "range": {
        "startLine": 117,
        "startChar": 49,
        "endLine": 117,
        "endChar": 58
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56e19aaa_05e5ecad",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 59,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T00:30:36Z",
      "side": 1,
      "message": "It may be better just take as u32, if it is NONE then can use 0. otherwise it will be hard when decoding this info. When read this block of binary, code cannot know the length of the str. But because of the other parts are fix, then we can implicate the length of string. But if we have optional next_offset, then it will be hard",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac87a9d_87df9469",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 59,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-08T12:39:42Z",
      "side": 1,
      "message": "Is PackageTableNode intended to be written to disk in binary form and later be \"deserialized\" by pointing to mmapped memory? If so you may want to look into C repr (http:://doc.rust-lang.org/nomicon/other-reprs.html#reprc) to guarantee the struct layout.\n\nAlso see https://doc.rust-lang.org/std/option/index.html#representation.",
      "parentUuid": "56e19aaa_05e5ecad",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37525a79_7edf8429",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 59,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T15:30:21Z",
      "side": 1,
      "message": "In the serialization, we use unwrap_or(0) call, so if it is none, then a value of 0 will be serialized as u32.\n\nThanks Marten for the info. We later do want to deserialize back into memory.",
      "parentUuid": "6ac87a9d_87df9469",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01f10589_64a89636",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 59,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-12T17:13:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37525a79_7edf8429",
      "range": {
        "startLine": 59,
        "startChar": 8,
        "endLine": 59,
        "endChar": 19
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecb4691f_ce84b4b3",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T00:30:36Z",
      "side": 1,
      "message": "The offset is changed in 125",
      "range": {
        "startLine": 121,
        "startChar": 12,
        "endLine": 121,
        "endChar": 18
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a60835_0290fcfb",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-08T16:26:16Z",
      "side": 1,
      "message": "After this line, the offset now points one byte more than the end of current node, or the start of next node. So if I want current node to point to the next node. I set the next_offset field to this offset.",
      "parentUuid": "ecb4691f_ce84b4b3",
      "range": {
        "startLine": 121,
        "startChar": 12,
        "endLine": 121,
        "endChar": 18
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83dff3e9_87323007",
        "filename": "tools/aconfig/src/package_table.rs",
        "patchSetId": 17
      },
      "lineNbr": 121,
      "author": {
        "id": 1944425
      },
      "writtenOn": "2023-12-08T19:09:06Z",
      "side": 1,
      "message": "oh I see the line 83 about set to 0.",
      "parentUuid": "60a60835_0290fcfb",
      "range": {
        "startLine": 121,
        "startChar": 12,
        "endLine": 121,
        "endChar": 18
      },
      "revId": "e3438f70897aabae1179fc322a9c9edb3b5ebf6a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}