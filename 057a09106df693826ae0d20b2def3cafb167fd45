{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "919d1de8_8501785a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 16,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "rephrase please",
      "range": {
        "startLine": 16,
        "startChar": 34,
        "endLine": 16,
        "endChar": 46
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edf1f22e_36ab17e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 20,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "typo\n\ntip: `:set spell` in vim (or equivalent in other editors) to catch typos in the commit message",
      "range": {
        "startLine": 20,
        "startChar": 14,
        "endLine": 20,
        "endChar": 20
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26497739_8bc5db34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "I was under the impression we should start out with a standard file format first?",
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "928046b8_3ed5faa5",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "Looks like the rest of the code is using u32, but this function returns u64. Can we changethis to u32 as well, or change all u32 to u64?",
      "range": {
        "startLine": 47,
        "startChar": 63,
        "endLine": 47,
        "endChar": 66
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "247768e9_b3f4e224",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "Remove unnecessary explicit lifetime",
      "range": {
        "startLine": 85,
        "startChar": 35,
        "endLine": 85,
        "endChar": 37
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "044ed69a_6cd7cade",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 97,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "what values are allowed? is 0 false and 1 true? what about 0xff?",
      "range": {
        "startLine": 97,
        "startChar": 63,
        "endLine": 97,
        "endChar": 68
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cbecbf2_480b554e",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 98,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "what does status mean?",
      "range": {
        "startLine": 98,
        "startChar": 66,
        "endLine": 98,
        "endChar": 72
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c9540a6_c1a0652e",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 110,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "Just `parsed_flags_iter` please",
      "range": {
        "startLine": 110,
        "startChar": 4,
        "endLine": 110,
        "endChar": 25
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecc21734_dab2295b",
        "filename": "tools/aconfig/src/storage/mod.rs",
        "patchSetId": 12
      },
      "lineNbr": 132,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "I prefer `read_...` and `eat_...` when the stream offset is updated; u32_from_bytes sounds like a pure function. Can we rename this `read_u32_from_bytes` please? Similar for `str_from_bytes`.",
      "range": {
        "startLine": 132,
        "startChar": 11,
        "endLine": 132,
        "endChar": 25
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd7710b4_9010e41e",
        "filename": "tools/aconfig/src/storage/package_table.rs",
        "patchSetId": 12
      },
      "lineNbr": 166,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-19T10:14:17Z",
      "side": 1,
      "message": "Because u32_from_bytes modifies head, it\u0027s important that the calls to *_from_bytes happen in the expected order, i.e. first for what is assigned to version, then for what is assigned to container, etc.\n\nDoes Rust guarantee this order? If not, please\n\n``\nlet version \u003d ...\nlet container \u003d ...\n...\nOk(PackageTableHader { version, container, ... })\n```\n\ninstead",
      "range": {
        "startLine": 164,
        "startChar": 16,
        "endLine": 166,
        "endChar": 61
      },
      "revId": "057a09106df693826ae0d20b2def3cafb167fd45",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}