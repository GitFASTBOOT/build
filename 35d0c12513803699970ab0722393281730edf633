{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c83812f6_dc871487",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-10-06T17:07:51Z",
      "side": 1,
      "message": "I had assumed these were typos to begin with -- if we\u0027re only supporting a single file, can we do something that\u0027s more obvious without documentation? For example, something like:\n\n  PRODUCT_SYSTEM_FREEZE :\u003d vendor/foo/aosp_bar-installed-files.txt\n  PRODUCT_SYSTEM_FREEZE_MODE :\u003d disallow_new_files disallow_removed_files\n\n(That may be unnecessarily verbose, but it\u0027s just an example)\n\nYou also may want to look at how a similar restriction has been handled previously, which has file-based allow lists:\n\n  PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS / PRODUCT_ARTIFACT_PATH_REQUIREMENT_ALLOWED_LIST (and friends)\n\nThat has the advantage of finding problems very early in the build, but can miss some files installed without the build system\u0027s knowledge. So depending on your requirements, if you used that, you may also need to use something like this.\n\nI\u0027m a little worried that this is fairly error-prone for local users -- this is likely to break builds after running `mm`/`mma` and extra things are installed into the system image.",
      "range": {
        "startLine": 17,
        "startChar": 64,
        "endLine": 17,
        "endChar": 67
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3692d5e5_6baf15a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-10-08T04:41:50Z",
      "side": 1,
      "message": "Ack to using PRODUCT_SYSTEM_FREEZE and PRODUCT_SYSTEM_FREEZE_MODE. For local user cases, this will be transparent to them if they use different build targets. For example, suppose we enable this for cf_x86_phone, this will be visible to users that are using the cf_x86_phone only and transparent to others.",
      "parentUuid": "c83812f6_dc871487",
      "range": {
        "startLine": 17,
        "startChar": 64,
        "endLine": 17,
        "endChar": 67
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38f58ba7_aa2345ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-10-08T04:41:50Z",
      "side": 1,
      "message": "Thanks for the comments, I\u0027ll refine it according.",
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a874084d_9fcb094a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-10-08T08:27:18Z",
      "side": 1,
      "message": "I\u0027m skeptical of this change, primarily because I think it will be a great pain to add new things to the system partition (e.g. base_system.mk or another \"common\" makefile). All such additions would require updating all of the allow-lists that have been checked into various branches relying on this feature.\n\nIsn\u0027t this creating a huge maintenance burden?",
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14f157f2_a25f6002",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-10-08T08:27:50Z",
      "side": 1,
      "message": "(un-resolve)",
      "parentUuid": "a874084d_9fcb094a",
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8aab1e27_902c08a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-10-08T09:49:34Z",
      "side": 1,
      "message": "Now the content of the CSI depends on the dependency calculated by the build system and the files within the CSI changes over time. This makes the boundary between system and system_ext unstable and makes issues on OEM side like this example\n\nhttps://docs.google.com/document/d/1BEwfgbyjsuR7LbqdJZ-yfn42wWnd4A7kdhFVayHow_Q/edit#bookmark\u003did.5wfa2zxtoymf\n\nAgree that to disallow added files are impractical during development time but the ability to detect deleted files in advance are something we need to consider in order to land CSI to OEM smoothly.",
      "parentUuid": "14f157f2_a25f6002",
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f159a4b4_36606401",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-10-08T10:02:00Z",
      "side": 1,
      "message": "\u003e This makes the boundary between system and system_ext unstable\n\nNo, this is not that makes the boundary unstable. The boundary is already unstable. You can\u0027t fix that by just defining all of /system \"stable\", as that would make it impossible to make any changes.\n\nYou need to work on decoupling system_ext, and extending existing stable interfaces.",
      "parentUuid": "8aab1e27_902c08a8",
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7c4e4d0_54754103",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 2371,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-10-06T17:07:51Z",
      "side": 1,
      "message": "This will need to depend on the file within PRODUCT_SYSTEM_FREEZE (which means splitting the value with today\u0027s implementation)",
      "range": {
        "startLine": 2371,
        "startChar": 0,
        "endLine": 2371,
        "endChar": 80
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc6d977e_685ad432",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 2371,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-10-08T04:41:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b7c4e4d0_54754103",
      "range": {
        "startLine": 2371,
        "startChar": 0,
        "endLine": 2371,
        "endChar": 80
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84559134_0fa8638d",
        "filename": "tools/fileslist_util.py",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-10-06T17:07:51Z",
      "side": 1,
      "message": "Can it not spam the build log with this message when PRODUCT_SYSTEM_FREEZE is not set (which is the default)? I\u0027d recommend conditionalizing the caller (ifdef PRODUCT_SYSTEM_FREEZE / ... filelist ... / endif), and then turning this into an error. It\u0027s less likely to silently break in the future that way.",
      "range": {
        "startLine": 91,
        "startChar": 8,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77fa52f4_62e6fe42",
        "filename": "tools/fileslist_util.py",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1135739
      },
      "writtenOn": "2020-10-08T04:41:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "84559134_0fa8638d",
      "range": {
        "startLine": 91,
        "startChar": 8,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "35d0c12513803699970ab0722393281730edf633",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}