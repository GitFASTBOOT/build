{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f4894a41_498e94db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2022-06-27T17:00:17Z",
      "side": 1,
      "message": "Does this accomplish the same thing as what I described in go/soong-analyze-only?\n\nI think that having a list of the desired modules, and walking through those to make sure they are buildable is better than having an allowlist of excepted modules, because it\u0027ll be really hard to know which modules we *don\u0027t* need.",
      "revId": "b2362029691ceffa0b7fbdd9e2db79e1c90e7ccf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "063fa0ae_7dd27d42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2022-06-28T08:07:24Z",
      "side": 1,
      "message": "Yes, I think we are addressing the same problem.\nI wanted to list the missing modules by collecting the missing dependencies using `ALLOW_MISSING_DEPENDENCIES` command. So that it will not be that difficult to create the list.\n\nIn soong, a module have multiple variants that have different dependencies. Do you want to list the modules with the specific variants information to include in the api domain?",
      "parentUuid": "f4894a41_498e94db",
      "revId": "b2362029691ceffa0b7fbdd9e2db79e1c90e7ccf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b107e0d_b2905619",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2022-06-29T01:29:01Z",
      "side": 1,
      "message": "I think we\u0027ll want to filter out unused variants, but I don\u0027t think we\u0027ll need to pass which variants we need on the commandline, because I think the root set we pass on the commandline will be very high level (e.g. which API domain is being built, system, vendor, each apex), and those have a limited set of variants. Apex variants are really just the banchan flags, which will be available to the inner builds.",
      "tag": "mailMessageId\u003d\u003cCAOye\u003d2Ecn49x5xrs5z4c_vAQ+T8+9Xi+s4rTDcCNi\u003dn\u003d_PDJ4w@mail.gmail.com\u003e",
      "revId": "b2362029691ceffa0b7fbdd9e2db79e1c90e7ccf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4a65361_1af30b23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1146974
      },
      "writtenOn": "2022-06-29T05:40:04Z",
      "side": 1,
      "message": "Interface can be changed. I originally though having a list as a file that is included in the .mcombo or whatever configuration of the inner-tree. Let me add comments on your doc to discuss further about this.",
      "parentUuid": "6b107e0d_b2905619",
      "revId": "b2362029691ceffa0b7fbdd9e2db79e1c90e7ccf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}