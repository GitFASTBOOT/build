{
  "comments": [
    {
      "key": {
        "uuid": "0f841065_2d52c478",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 1564,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "nit: update the comment",
      "range": {
        "startLine": 1563,
        "startChar": 61,
        "endLine": 1564,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3d8f309_0f37665c",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 1564,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T21:03:30Z",
      "side": 1,
      "message": "what needs to be updated?",
      "parentUuid": "0f841065_2d52c478",
      "range": {
        "startLine": 1563,
        "startChar": 61,
        "endLine": 1564,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c669cdb6_253178bd",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 1564,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:11:55Z",
      "side": 1,
      "message": "It\u0027ll be called _before_ IncrementalOTA_InstallBegin: https://android-review.googlesource.com/c/platform/build/+/859289/12/tools/releasetools/ota_from_target_files.py#1603. Maybe say something more general like the function will be called during incremental OTA verification and installation.",
      "parentUuid": "a3d8f309_0f37665c",
      "range": {
        "startLine": 1563,
        "startChar": 61,
        "endLine": 1564,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a34002af_262b79e6",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 1568,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 1568,
        "startChar": 25,
        "endLine": 1568,
        "endChar": 39
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f407fc95_20619a8e",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2290,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "nit: MakeTempFile() suffices?",
      "range": {
        "startLine": 2289,
        "startChar": 4,
        "endLine": 2290,
        "endChar": 51
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41ec80be_49f7d152",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2294,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "nit: f.write(\u0027{}\\n\u0027.format(line)) looks cleaner",
      "range": {
        "startLine": 2293,
        "startChar": 8,
        "endLine": 2294,
        "endChar": 21
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc7a62b2_0347a819",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2294,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "I wanted to avoid the unnecessary \"format\", but yeah it does look cleaner",
      "parentUuid": "41ec80be_49f7d152",
      "range": {
        "startLine": 2293,
        "startChar": 8,
        "endLine": 2294,
        "endChar": 21
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e5384c_9513b1d8",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2303,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "Should only apply to already updated partitions",
      "range": {
        "startLine": 2303,
        "startChar": 6,
        "endLine": 2303,
        "endChar": 50
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94400ddd_61d62be2",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2303,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "Yeah I meant to verify shrinking partitions here. Will update.",
      "parentUuid": "16e5384c_9513b1d8",
      "range": {
        "startLine": 2303,
        "startChar": 6,
        "endLine": 2303,
        "endChar": 50
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f0222e_d52b682b",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2312,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "Missing the call to WritePostInstallVerifyScript?",
      "range": {
        "startLine": 2312,
        "startChar": 8,
        "endLine": 2312,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2a3db26_d9949657",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2312,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "I set write_verify_script\u003dwrite_verify_script in the line above, so it should write for me",
      "parentUuid": "78f0222e_d52b682b",
      "range": {
        "startLine": 2312,
        "startChar": 8,
        "endLine": 2312,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ff3f81c_08989abf",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2312,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:28:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e2a3db26_d9949657",
      "range": {
        "startLine": 2312,
        "startChar": 8,
        "endLine": 2312,
        "endChar": 31
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64c08a03_64f9ebf6",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "The condition here looks identical to L2374.\n\nAlso not clear about the expected condition of \"partition in default group in target build\". Will u.tgt_group be None? Seems in that case the partition will be removed by L2333.",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e13e833f_b943edde",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "The \"default\" group is a group that doesn\u0027t have any size limits. Think of it as the partition being unassigned.\n\nSay in the source build, partition P is in group G1, and in the target build it is in group G2. Also, the size limits of G1 shrinks and G2 grows. Then, the flow (would probably) look like this:\n\nmove P from G1 to default\nshrink G1\ngrow G2\nmove P from default to G2\n\nAlternatively, if P is moved from G1 to G2 directly:\n1.\nmove P from G1 to G2 \u003c-- G2 may not have enough space\nshrink G1\ngrow G2\n\n2.\nshrink G1 \u003c-- G1 may not have enough free space\nmove P from G1 to G2 \u003c-- G2 may not have enough space\ngrow G2\n\n3.\nshrink G1 \u003c-- G1 may not have enough free space\ngrow G2\nmove P from G1 to G2\n\nThat\u0027s why it needs to be assigned to default, then to G2 later. \n\n(Technically, liblp verifies the integrity of the metadata in the end, so we can actually do #1, but that\u0027s an implementation detail, and OTA shouldn\u0027t depend on that.)",
      "parentUuid": "64c08a03_64f9ebf6",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734dfbb0_924f72eb",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T21:02:45Z",
      "side": 1,
      "message": "BTW, the device always has a \"default\" group and it cannot be removed, and no size limit can be set on it (liblp has hard-coded this).",
      "parentUuid": "e13e833f_b943edde",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e4ead27_a5faaf32",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:11:55Z",
      "side": 1,
      "message": "Ah I totally missed the way this \"default\" group works. I\u0027ll read through the code again, but maybe also add some comment to clarify the logic.",
      "parentUuid": "734dfbb0_924f72eb",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02047d12_2cd2a1e7",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:28:58Z",
      "side": 1,
      "message": "Is it allowed to have partitions in the default group before or after an OTA? For example, P is initially in default group, but later added to group G1 during OTA. It seems for such a case, P.src_group would be None, and P.tgt_group being G1. It will then follow the path at L2366 that calls \"add P G1\", as opposed to \"move P G1\"?",
      "parentUuid": "7e4ead27_a5faaf32",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c772611_1dcdb48b",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T23:59:19Z",
      "side": 1,
      "message": "No (except scratch partition).\n\n\"default\" is not expected to be a valid group at build time (although, I haven\u0027t black list that name). But even if \"default\" is, then it is expected that P.src_group to be \"default\" and tgt_group to be \"G1\". \"default\" doesn\u0027t get map to \"None\". None means the partition does not exist at all.",
      "parentUuid": "02047d12_2cd2a1e7",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24e582b5_927b96ca",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2336,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-16T00:42:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2c772611_1dcdb48b",
      "range": {
        "startLine": 2336,
        "startChar": 9,
        "endLine": 2336,
        "endChar": 67
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa86233_ff388520",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2350,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:08:47Z",
      "side": 1,
      "message": "L2202 says \"0: no size limits\". Is it still expected to call \"resize_group group 0\" for such a case?",
      "range": {
        "startLine": 2349,
        "startChar": 6,
        "endLine": 2350,
        "endChar": 35
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0a34ac9_8bb7b674",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2350,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "Yes (and that\u0027s what liblp exactly does). For group size, 0 means no limits, and \"None\" means group does not exist.",
      "parentUuid": "9fa86233_ff388520",
      "range": {
        "startLine": 2349,
        "startChar": 6,
        "endLine": 2350,
        "endChar": 35
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1771362_cada3ab4",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 12
      },
      "lineNbr": 2350,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:28:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b0a34ac9_8bb7b674",
      "range": {
        "startLine": 2349,
        "startChar": 6,
        "endLine": 2350,
        "endChar": 35
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ce7201_d060af7b",
        "filename": "tools/releasetools/ota_from_target_files.py",
        "patchSetId": 12
      },
      "lineNbr": 868,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2019-01-15T20:56:38Z",
      "side": 1,
      "message": "Tao, maybe call \n\n    for e in device_specific_diffs: e.WriteScript(...) \n\nhere?",
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "708d6921_6e834da4",
        "filename": "tools/releasetools/ota_from_target_files.py",
        "patchSetId": 12
      },
      "lineNbr": 868,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T21:28:58Z",
      "side": 1,
      "message": "+1. that makes *_GetBlockDifferences being a more general solution, even for non-DAP devices",
      "parentUuid": "79ce7201_d060af7b",
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "833c1320_3f39376f",
        "filename": "tools/releasetools/ota_from_target_files.py",
        "patchSetId": 12
      },
      "lineNbr": 1627,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-01-15T19:28:18Z",
      "side": 1,
      "message": "This needs to be a get(), to handle device-specific diffs",
      "range": {
        "startLine": 1627,
        "startChar": 38,
        "endLine": 1627,
        "endChar": 73
      },
      "revId": "f2daded6ec82281e79f26168596dd9208728d1d6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}