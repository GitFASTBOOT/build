{
  "comments": [
    {
      "key": {
        "uuid": "28982a01_4a6d9080",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-15T22:06:54Z",
      "side": 1,
      "message": "This is why you can not run the macro twice.",
      "range": {
        "startLine": 753,
        "startChar": 1,
        "endLine": 753,
        "endChar": 31
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f327e4fa_7262182d",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 753,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2020-05-15T23:08:54Z",
      "side": 1,
      "message": "this does not get called by module-load-list-copy-paths",
      "parentUuid": "28982a01_4a6d9080",
      "range": {
        "startLine": 753,
        "startChar": 1,
        "endLine": 753,
        "endChar": 31
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cf50aac_ee51f74e",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 789,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-17T16:57:15Z",
      "side": 1,
      "message": "This is a problem, $(2) (or rather any conventional $(*_LOAD) content) does not exists as module load list comes from modules_load from the kernel which is relative, and not from the fully qualified path names for the modules. Not sure if I should remove this dependency, or if we add facilities to translate $(*_LOAD) into full qualified path names (either original source from the caller, or in the staging directory which we can do here). eg:\n\n$(1)/$(DEPMOD_STAGING_SUBDIR)/$(3): $(patsubst %,$(1)/%,$(2))",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 789,
        "endChar": 40
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a7dbebd_c70f6b66",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 828,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-15T19:08:03Z",
      "side": 1,
      "message": "I toyed with the idea that this should not overload this variable, instead introducing BOARD_VENDOR_RECOVERY_RAMDISK_KERNEL_MODULES_LOAD as being more descriptive to the requested functionality, until I expect I realized that BOARD_VENDOR_RAMDISK_KERNEL_MODULES is orthogonal to BOARD_RECOVERY_KERNEL_MODULES.",
      "range": {
        "startLine": 828,
        "startChar": 12,
        "endLine": 828,
        "endChar": 46
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf5aafcb_184b4f80",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 828,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2020-05-15T21:09:49Z",
      "side": 1,
      "message": "This is a bit of a mess because with recovery-as-boot, the boot image is known in places here as recovery, and when this was initially written, any installation of kernel modules onto the boot image was for recovery mode.\n\nI agree it would be better to create a new board variable for this so it is clear that it is vendor-specific. Because the ramdisk in vendor_boot is not recovery-specific (it is also used during normal boot), I propose BOARD_VENDOR_RAMDISK_RECOVERY_KERNEL_MODULES_LOAD. I think this is a bit clearer than ...VENDOR_RECOVERY_RAMDISK..., which makes it sound like there is a recovery-specific ramdisk.",
      "parentUuid": "5a7dbebd_c70f6b66",
      "range": {
        "startLine": 828,
        "startChar": 12,
        "endLine": 828,
        "endChar": 46
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fde93792_912860c0",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 828,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-17T16:57:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf5aafcb_184b4f80",
      "range": {
        "startLine": 828,
        "startChar": 12,
        "endLine": 828,
        "endChar": 46
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df46899b_337fc8b6",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 832,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-15T18:50:46Z",
      "side": 1,
      "message": "nit: There is a way to $(subst ${space},${newline},...) instead of expending time to go to the shell to do this. make language is _faster_ than the shell, but we are not really using make here, but our own interpreter. However, I opted to not add that make-magic to generate space and newline until the _idea_ had a chance to be reviewed.",
      "range": {
        "startLine": 831,
        "startChar": 0,
        "endLine": 832,
        "endChar": 20
      },
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d1cecd9_1305d867",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2020-05-15T21:09:49Z",
      "side": 1,
      "message": "It\u0027d be good to re-use the module-load-list-copy-paths macro above if possible, instead of 829-834 I think this should work (similar to 817):\n      ALL_DEFAULT_INSTALLED_MODULES +\u003d $(call copy-many-files,$(call module-load-list-copy-paths,$(call intermediates-dir-for,PACKAGING,ramdisk_modules),$(BOARD_VENDOR_RAMDISK_RECOVERY_KERNEL_MODULES_LOAD),modules.load.recovery,$(TARGET_VENDOR_RAMDISK_OUT)))",
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61af990e_384e868b",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-15T22:36:09Z",
      "side": 1,
      "message": "Resulted in a complaint that files were missing :-( I will continue to look into it to see if I can coerce the macro to build twice.",
      "parentUuid": "7d1cecd9_1305d867",
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cc334eb_62785645",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1131915
      },
      "writtenOn": "2020-05-15T23:08:54Z",
      "side": 1,
      "message": "Can you double check that you are calling module-load-list-copy-paths? I don\u0027t see offhand why it would cause a problem.",
      "parentUuid": "61af990e_384e868b",
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44f92aeb_9ebd0cd4",
        "filename": "core/Makefile",
        "patchSetId": 1
      },
      "lineNbr": 835,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2020-05-17T16:57:15Z",
      "side": 1,
      "message": "The problem was \u0027ramdisk_modules\u0027 in your example, it needed to be \u0027depmod_vendor_ramdisk\u0027, and a need to provide a fully qualified path to the source modules, which by definition BOARD_VENDOR_RAMDISK_RECOVERY_KERNEL_MODULES_LOAD isn\u0027t ...",
      "parentUuid": "5cc334eb_62785645",
      "revId": "3646efbbda3e572cf4bedb178d36393dd06a0752",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}