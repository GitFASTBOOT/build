{
  "comments": [
    {
      "key": {
        "uuid": "15ca53ea_aad1ee1c",
        "filename": "core/binary.mk",
        "patchSetId": 2
      },
      "lineNbr": 478,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2017-07-18T06:29:53Z",
      "side": 1,
      "message": "Colin, do you have any idea to handle this case? There are lots of similar cases in this file, but I only modified this as an example.\n\nLack of this conditional causes following error.\nout/soong/Android-taimen.mk: error: libc++.vendor (native:vendor) should not link to libcompiler_rt-extras (native:ndk)\nout/soong/Android-taimen.mk: error: libcrypto.vendor (native:vendor) should not link to libcompiler_rt-extras (native:ndk)\nout/soong/Android-taimen.mk: error: liblzma.vendor (native:vendor) should not link to libcompiler_rt-extras (native:ndk)\nout/soong/Android-taimen.mk: error: libz.vendor (native:vendor) should not link to libcompiler_rt-extras (native:ndk)\nout/soong/Android-taimen.mk: error: libcrypto.vendor (native:vendor) should not link to libcompiler_rt-extras (native:ndk)\n\n\nWhen parsing Android-\u003ctarget\u003e.mk file, because make does not know whether the such auto-added library has a vendor variant or not (and thus have \u003cname\u003e.vendor exists), we can\u0027t blindly add .vendor suffix later around #1335.",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 478,
        "endChar": 85
      },
      "revId": "d0ea6d05409f20dd575746990ffd525089ae0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e9e5a15_ed43d546",
        "filename": "core/binary.mk",
        "patchSetId": 2
      },
      "lineNbr": 478,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2017-07-19T22:35:38Z",
      "side": 1,
      "message": "For these static libraries additions, we should be able to just ignore static library links for prebuilts coming from Soong. That\u0027s probably the case for most shared lib additions as well, since we should have specified all the install-time dependencies coming from soong already.\n\nWe could also whitelist Soong modules from dependency checking, assuming everything is working properly. But it\u0027s nice to catch differences between Soong and Make.",
      "parentUuid": "15ca53ea_aad1ee1c",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 478,
        "endChar": 85
      },
      "revId": "d0ea6d05409f20dd575746990ffd525089ae0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1181710e_9b3aadbc",
        "filename": "core/binary.mk",
        "patchSetId": 2
      },
      "lineNbr": 478,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2017-07-20T02:48:23Z",
      "side": 1,
      "message": "Yes, for static libs we can ignore.\n\nFor shared libs, I am not sure. We have to check whether the dependency is really specified in soong or not.\n\nBTW, even so, we have to at least check whether this module is coming from soong or not when adding a lib to my_shared_libraries. This requires me to touch many places in build/make/core than originally expected. A macro can simplify the process though.\n\nDo you want me to follow this path?",
      "parentUuid": "3e9e5a15_ed43d546",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 478,
        "endChar": 85
      },
      "revId": "d0ea6d05409f20dd575746990ffd525089ae0672",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}