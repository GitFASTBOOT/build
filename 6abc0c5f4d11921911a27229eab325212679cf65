{
  "comments": [
    {
      "key": {
        "uuid": "0f060922_7d15b012",
        "filename": "tools/releasetools/img_from_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1455782
      },
      "writtenOn": "2019-04-18T19:38:58Z",
      "side": 1,
      "message": "Without this, any future common.Cleanup() (as done in merge_target_files) will fail because input_tmp from this script will no longer exist.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 47
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5334b52f_41f84319",
        "filename": "tools/releasetools/img_from_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-04-18T19:56:29Z",
      "side": 1,
      "message": "https://android-review.googlesource.com/c/platform/build/+/947579/2/tools/releasetools/common.py#1386 calls shutil.rmtree with ignore_errors\u003dTrue. I think it should be fine here?\n\n(It seems the shutil.rmtree at L99 should be moved to L112 under the finally there. But it\u0027s not directly related to this CL.)",
      "parentUuid": "0f060922_7d15b012",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 47
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9db36e57_5c287d19",
        "filename": "tools/releasetools/img_from_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1455782
      },
      "writtenOn": "2019-04-18T20:23:01Z",
      "side": 1,
      "message": "It does, but the issue is (before this added line):\n\n1. merge_target_files creates temp_dir. OPTIONS.tmpfiles now contains [temp_dir]\n\n2. img_from_target_files creates input_tmp. OPTIONS.tmpfiles now contains [temp_dir, input_tmp]\n\n3. img_from_target_files deletes input_tmp.\n\n4. merge_target_files calls common.Cleanup(), which tries to delete [temp_dir, input_tmp]. Deleting temp_dir is fine, but deleting input_tmp fails. Because input_Tmp was deleted in step 3, the \"os.path.isdir(i)\" in Cleanup() is false so it calls \"os.remove(i)\".\n\n5. os.remove(i) fails saying that there is no file or directory for input_tmp. \n\n\nAnother solution would be to change the os.remove(i) to be guarded by os.path.exists(i).",
      "parentUuid": "5334b52f_41f84319",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 47
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c417efbf_979ef4f1",
        "filename": "tools/releasetools/img_from_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-04-18T20:52:00Z",
      "side": 1,
      "message": "Ah got you. Then I think it\u0027s cleaner to remove L99 and call common.Cleanup() at L112 instead?",
      "parentUuid": "9db36e57_5c287d19",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 47
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09cc894a_28fb1713",
        "filename": "tools/releasetools/img_from_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1455782
      },
      "writtenOn": "2019-04-18T21:03:49Z",
      "side": 1,
      "message": "That would be clean as well :) I planned to do that originally, but then got nervous because calling common.Cleanup() from img_from_target_files will cause *all* temp files to be cleaned up.\n\nIf some script happens to call img_from_target_files in the middle of its logic, when it still needs temp files, then they will get deleted. I guess the underlying issue is that tempfiles are grouped together across scripts instead of being specific to each script.\n\nThis solution *does* work for merge_target_files since it calls img_from_target_files at the very end of its logic, but this isn\u0027t guaranteed (forever, or for other scripts).",
      "parentUuid": "c417efbf_979ef4f1",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 47
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a71ae7e9_a0e7d0df",
        "filename": "tools/releasetools/merge_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1395887
      },
      "writtenOn": "2019-04-18T20:40:04Z",
      "side": 1,
      "message": "I was thinking that we should zip up the files that are already at os.path.join(output_target_files_temp_dir, \"IMAGES\") rather than unzipping and re-zipping. However, it\u0027s hard to ignore the convenience of this function, and there\u0027s probably not a huge gain avoiding the extra unzip (that\u0027s the fast part).",
      "range": {
        "startLine": 761,
        "startChar": 4,
        "endLine": 761,
        "endChar": 58
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94a6ea27_a14ace0b",
        "filename": "tools/releasetools/merge_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1455782
      },
      "writtenOn": "2019-04-18T20:45:13Z",
      "side": 1,
      "message": "Right. I still lean toward using this existing function instead of something custom when possible, at least until someone requests that we speed up this step.",
      "parentUuid": "a71ae7e9_a0e7d0df",
      "range": {
        "startLine": 761,
        "startChar": 4,
        "endLine": 761,
        "endChar": 58
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "277b493e_6af9d4ac",
        "filename": "tools/releasetools/merge_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2019-04-18T20:52:00Z",
      "side": 1,
      "message": "+1 to keep calling img_from_target_files.py. We happen to have another CL today (https://android-review.googlesource.com/c/platform/build/+/946984) that tries to change the logic to generate the -img.zip (which currently only changes the Makefile logic, but I asked on the CL to change img_from_target_files.py as well).",
      "parentUuid": "94a6ea27_a14ace0b",
      "range": {
        "startLine": 761,
        "startChar": 4,
        "endLine": 761,
        "endChar": 58
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da8a169f_ae74b3e7",
        "filename": "tools/releasetools/merge_target_files.py",
        "patchSetId": 2
      },
      "lineNbr": 761,
      "author": {
        "id": 1395887
      },
      "writtenOn": "2019-04-18T21:09:36Z",
      "side": 1,
      "message": "I\u0027m good with keeping this logic centralized.",
      "parentUuid": "277b493e_6af9d4ac",
      "range": {
        "startLine": 761,
        "startChar": 4,
        "endLine": 761,
        "endChar": 58
      },
      "revId": "6abc0c5f4d11921911a27229eab325212679cf65",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}