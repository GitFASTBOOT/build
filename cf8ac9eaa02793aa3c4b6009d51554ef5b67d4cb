{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "148341a9_811c7ad8",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 7888,
      "author": {
        "id": 2028281
      },
      "writtenOn": "2024-08-09T09:23:58Z",
      "side": 1,
      "message": "If I understand this change correctly, now when the developer issues `m` command, compression of the whole OS image will be skipped. This is good, however, I am not convinced that `pack_image` should be called at all during `m` invocation as it makes the build longer, and usually developers use OTA (via `update-device`) to apply changes to their device. If a developer wants the whole image it can always issue `pack_image` itself.",
      "revId": "cf8ac9eaa02793aa3c4b6009d51554ef5b67d4cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60a239d8_430a549d",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 7888,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-08-09T11:47:38Z",
      "side": 1,
      "message": "On Android, an unadorned `m` is usually the command to build the flashable filesystem images.  I\u0027m still not clear about how to flash these devices yet.  Are there any Chrome OS docs about how to do that workflow?  I think everyone working on this is going to have similar questions, so we should probably write up some dev guide docs for this.  I\u0027d be happy to help.",
      "parentUuid": "148341a9_811c7ad8",
      "revId": "cf8ac9eaa02793aa3c4b6009d51554ef5b67d4cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f46697f6_07b42d88",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 7888,
      "author": {
        "id": 1644696
      },
      "writtenOn": "2024-08-09T18:19:52Z",
      "side": 1,
      "message": "There are a few ways today:\n 1. Recovery image via USB (used for releases and as the name implies \"recovery\")\n 2. Bootable USB image + ADB (developer iteration as Michal pointed out)\n 3. Installations via updater | host-\u003eclient OTA (in parity with AOSP)\n \n1 + 2 flows do not exist on vanilla AOSP\n \nThere is a section under for your reference: https://g3doc.corp.google.com/company/teams/chromeos/index.md?cl\u003dhead",
      "parentUuid": "60a239d8_430a549d",
      "revId": "cf8ac9eaa02793aa3c4b6009d51554ef5b67d4cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cec858c_591c5d86",
        "filename": "core/Makefile",
        "patchSetId": 2
      },
      "lineNbr": 7888,
      "author": {
        "id": 2028281
      },
      "writtenOn": "2024-08-12T10:05:08Z",
      "side": 1,
      "message": "\u003e On Android, an unadorned m is usually the command to build the flashable filesystem images\n\nI believe this will be true in our case once we implement fastboot without any changes to how Android does `m` right now. Because we don\u0027t have that yet, we implemented `pack_image` script so that all partitions are bundled into a single image that can be flashed onto an USB stick. However, `pack_image` even without compression takes time and usually developers have to flash the whole image only once. Then, they can use OTA (via `update-device`) to get their changes applied onto the device, so `pack_image` is not invoked most of the time. I am just wondering if we really need to invoke `pack_image` during `m` at all. I\u0027m going to +1 this (especially as your CL reduces `m` time by excluding compression), I just think that we could go further and remove `pack_image` from `m` entirely. I\u0027ll let @mwojtas@google.com decide.",
      "parentUuid": "f46697f6_07b42d88",
      "revId": "cf8ac9eaa02793aa3c4b6009d51554ef5b67d4cb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}