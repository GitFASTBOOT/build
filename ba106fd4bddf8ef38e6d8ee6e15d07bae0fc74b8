{
  "comments": [
    {
      "key": {
        "uuid": "5e306a96_290a918a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2017-12-12T04:08:51Z",
      "side": 1,
      "message": "It seems like this may be conflating where things are installed vs which APIs they\u0027re built against.\n\nLOCAL_JAVA_LIBRARIES does not necessarily imply a runtime dependency on a specific java library, it\u0027s just saying that something presenting the same API will exist at some point in the future (either via a library in the bootclasspath, or later integrated into another java package with LOCAL_STATIC_JAVA_LIBRARIES).\n\nWhile we do need to protect against java:system -\u003e java:platform linking, I\u0027m not sure the build system is ready to say much about vendor -\u003e system usage outside of that. I wish it was, but I don\u0027t think we\u0027ve modeled the necessary relationships.\n\nThe current static vs shared java library linkages are significantly misused currently --\n multiple copies of the same library (or multiple versions of the same library ðŸ˜®) can be embedded into the same end apk/jar/dex. We\u0027ll only have one of the same class, hopefully we pick well enough...",
      "revId": "ba106fd4bddf8ef38e6d8ee6e15d07bae0fc74b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "591deaa7_27d0e223",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2017-12-12T04:12:59Z",
      "side": 1,
      "message": "Part of the problem is that we recently \"fixed\" these to unify static and shared libraries, so while the installed \"shared\" version of a library may have problems using LOCAL_JAVA_LIBRARIES to system-installed libraries, the non-installed \"static\" version would be fine, since a later step could merge that dependency in statically.",
      "parentUuid": "5e306a96_290a918a",
      "revId": "ba106fd4bddf8ef38e6d8ee6e15d07bae0fc74b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b5989a0_5fd6d5cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1187124
      },
      "writtenOn": "2017-12-12T05:37:22Z",
      "side": 1,
      "message": "\u003e LOCAL_JAVA_LIBRARIES does not necessarily imply a runtime dependency on a specific java library, it\u0027s just saying that something presenting the same API will exist at some point in the future (either via a library in the bootclasspath, or later integrated into another java package with LOCAL_STATIC_JAVA_LIBRARIES).\n\nI already know that. I think it is not problem of this CL. This CL is to prevent the vendor module from using system \u0027shared\u0027 java library except android_system.jar which is consist of public API and system API. And we allow that vendor module can use \u0027static\u0027 java library which is built with public SDK or system SDK and does not depend on other java libraries dynamically. You can see more detail in Jiyong\u0027s comment.\n\n\u003e While we do need to protect against java:system -\u003e java:platform linking, I\u0027m not sure the build system is ready to say much about vendor -\u003e system usage outside of that. I wish it was, but I don\u0027t think we\u0027ve modeled the necessary relationships.\n\nWe decided that the vendor can use system-api (go/systemsdk-design). For this, I merged the CLs for versioning system-api (http://ag/q/topic:vendor_api+status:merged). And This CL is for checking link type.",
      "parentUuid": "591deaa7_27d0e223",
      "revId": "ba106fd4bddf8ef38e6d8ee6e15d07bae0fc74b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68922cf4_45ac875e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2017-12-12T08:42:19Z",
      "side": 1,
      "message": "LOCAL_JAVA_LIBRARIES does not imply that you\u0027re going to use the libraries dynamically or not, it\u0027s completely correct (and expected) to use LOCAL_JAVA_LIBRARIES to build java libraries that are later used statically, while statically including their dependencies:\n\n  fooapk (BUILD_PACKAGE)\n    LOCAL_STATIC_JAVA_LIBRARIES :\u003d libfoo libbar\n    LOCAL_JAVA_LIBRARIES :\u003d libbaz\n    LOCAL_VENDOR_MODULE :\u003d true\n\n  libfoo (BUILD_STATIC_JAVA_LIBRARY)\n    LOCAL_JAVA_LIBRARIES :\u003d libbar\n\n  libbar (BUILD_STATIC_JAVA_LIBRARY)\n\n  libbaz (BUILD_JAVA_LIBRARY)\n    LOCAL_JAVA_LIBRARIES :\u003d libqux\n    LOCAL_VENDOR_MODULE :\u003d true\n\n  libqux (BUILD_JAVA_LIBRARY)\n    LOCAL_VENDOR_MODULE :\u003d true\n\nThe only checks that actually matter for the vendor-\u003esystem dependencies are:\n\n  fooapk -\u003e libbaz\n  libbaz -\u003e libqux\n\nThe libfoo -\u003e libbar dependency doesn\u0027t matter, since we\u0027re later embedding libbar into the same apk/jar. It would only matter if we were installing libfoo as a standalone library.\n\nWe might be able to get this behavior by checking LOCAL_UNINSTALLABLE_MODULE/Installable (which is set by default with BUILD_STATIC_JAVA_LIBRARY / java_library_static), but currently a java library is a superset of what\u0027s possible with a static java library -- a java library can just be used with LOCAL_STATIC_JAVA_LIBRARIES now.",
      "parentUuid": "2b5989a0_5fd6d5cf",
      "revId": "ba106fd4bddf8ef38e6d8ee6e15d07bae0fc74b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}