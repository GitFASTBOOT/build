{
  "comments": [
    {
      "key": {
        "uuid": "0deae6c3_902d908d",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 377,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T19:26:35Z",
      "side": 1,
      "message": "Is the limit on shard count due to a limit on the mathematics implementation or is it based on the sharding itself?\n\nIt seems to me that it\u0027d be nice to rename int_check_valid and/or _math_check_valid to clarify their differences, or to possibly refactor the checks such that there only needs to be one check (probably int_check_valid) and the math routines call it automatically whenever they make a new number (unless doing that would be super slow).",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afd311d5_c946508b",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 377,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T20:11:03Z",
      "side": 1,
      "message": "In order to get the shard index list, we have to do $(wordlist s,e,$(_MATH_NUMBERS)). The _MATH_NUMBERS was a hard-coded 1-100 list. So that\u0027s why we have to use $(call _math_check_valid) to verify if the num_shards falls into 1-100. And we can extend the _MATH_NUMERS list by hard-code more numbers if more granularity-sharding will be needed. The two check functions serve different purpose. The _math_check_valid invoked before we want to sub-list of _MATH_NUMBERS. And int_check_valid was invoked before we call any int_plus/multiply/divde/subtract functions to valid the input number is valid.",
      "parentUuid": "0deae6c3_902d908d",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a32c76e6_2163d720",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 377,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T20:50:53Z",
      "side": 1,
      "message": "Does java.mk need to call _math_check_valid or can that be extracted into another function inside math.mk (so that if more callers are added in the future, they won\u0027t need to also add a call to _math_check_valid)? For example, something like:\n\n# $(1): min\n# $(2): max\ndefine int_range\n$(strip \\\n  $(call _math_check_valid,$(1)) \\\n  $(call _math_check_valid,$(2)) \\\n  $(wordlist $(1),$(2),$(__MATH_NUMBERS)) \\\nendef\n\n\nand I guess I have the same question for int_check_valid too",
      "parentUuid": "afd311d5_c946508b",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "948af215_c49b319c",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 377,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T21:59:50Z",
      "side": 1,
      "message": "I wrapped these checks into a separate function in math.mk",
      "parentUuid": "a32c76e6_2163d720",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a77584_04cea4e8",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 383,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T20:50:53Z",
      "side": 1,
      "message": "How about something like \"put dynamically-located .java files (generated by Proto sources, etc) in a new, final shard\"?",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 89
      },
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c5cd674_23e9d437",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 383,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T21:59:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34a77584_04cea4e8",
      "range": {
        "startLine": 383,
        "startChar": 2,
        "endLine": 383,
        "endChar": 89
      },
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6418bc_3ec808cd",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 460,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T19:26:35Z",
      "side": 1,
      "message": "Is this check supposed to be duplicated with line 366?",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f3300cb_2fcc649d",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 460,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T20:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e6418bc_3ec808cd",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cfb5ac5_40eb8228",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 462,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T19:26:35Z",
      "side": 1,
      "message": "Is this check supposed to be duplicated with line 368?",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48799259_23b1236f",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 462,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T20:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cfb5ac5_40eb8228",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2858b8aa_7c29a026",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 469,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T19:26:35Z",
      "side": 1,
      "message": "Is there an advantage in putting the build process of the resource files into a shard as opposed to putting it in a separate named rule?\n\nIt seems to me that it\u0027d be easier to recognize what\u0027s going on if the resources were part of their own named rule and the final zipping rule (line 497) were to depend on the java shards and also the resource jar (which would also make it easier to refactor how the resources jar gets built if that process ever becomes different from building the java code)",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc9602a_3d26b5d3",
        "filename": "core/java.mk",
        "patchSetId": 17
      },
      "lineNbr": 469,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T20:11:03Z",
      "side": 1,
      "message": "The additional files are all generated .java source files which \"find\" command is needed during ninja runtime. I think it is  cleaner that we put these additional files into a separate java-source-list file so that Javac can directly consume it and \"compile-java\" function also can be re-used.",
      "parentUuid": "2858b8aa_7c29a026",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1b37420_5e2aa5a7",
        "filename": "core/math.mk",
        "patchSetId": 17
      },
      "lineNbr": 137,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-10-11T20:50:53Z",
      "side": 1,
      "message": "What\u0027s the reason for having the caller be responsible for checking if the input numbers are valid - is it performance?",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "383cd2ad_b54c110a",
        "filename": "core/math.mk",
        "patchSetId": 17
      },
      "lineNbr": 137,
      "author": {
        "id": 1136354
      },
      "writtenOn": "2017-10-11T21:59:50Z",
      "side": 1,
      "message": "if we put int_check_valid inside int_plus/subtract/multiply/divide, it might cause dead loop recursive call. Since int_check_valid need int_subtract to get _int_limit without any hard-coding the limit number.",
      "parentUuid": "d1b37420_5e2aa5a7",
      "revId": "7763e9d9c267f3cde3d57a8676ce29713f8e1bf0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}