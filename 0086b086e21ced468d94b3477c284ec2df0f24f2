{
  "comments": [
    {
      "key": {
        "uuid": "d473fe1d_2a971008",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-01-29T07:32:49Z",
      "side": 1,
      "message": "this is perhaps more confusing -- we do actually have the concept of a product partition / image, but that doesn\u0027t appear to be what you\u0027re talking about. It\u0027s taking $(PRODUCT_OUT), which is just the containing folder for anything related to the device (whether it gets installed onto the device or not).",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d24f46cd_a4e0b62a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-01-29T07:53:35Z",
      "side": 1,
      "message": "Ack. Actually, it\u0027s not just taking $(PRODUCT_OUT) which is the -r or --target-root-dir argument; it\u0027s taking the full list of targets on the product image for which to report notices. The \"targets\" flag in the python script, and the ${6} argument of the combine-notice-files makefile definition.\n\nSee line 1285 of Makefile in the current patchset, and lines 200-202 of the generate-notice-files2.py file.",
      "parentUuid": "d473fe1d_2a971008",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c810389e_04eec074",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-01-30T01:11:46Z",
      "side": 1,
      "message": "Ah, that is not a full list of targets, it\u0027s probably closer to ~95-99% depending on the device. It\u0027s currently impossible for us to give you a full list of targets given the current design of the build system. As the description for $(6) goes, it\u0027s good enough for dependencies, but not for other purposes.",
      "parentUuid": "d24f46cd_a4e0b62a",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e43ea921_c7d15e8b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-01-30T02:13:40Z",
      "side": 1,
      "message": "Please clarify.\n\nWhat sort of file gets flashed onto the device, has a corresponding .txt file under $(PRODUCT_OUT)/obj/NOTICE_FILES/src/, and does not appear in ${6} ?",
      "parentUuid": "c810389e_04eec074",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e58c69c6_229317e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-01-30T04:14:37Z",
      "side": 1,
      "message": "Pretty much anything -- we don\u0027t have a complete list of what gets installed other than looking at what\u0027s there after the fact. It should be pretty close for the pixel targets, at least on the system image (as we\u0027ve spent time cleaning up the bad instances, but there\u0027s nothing preventing others, even other devices in our tree, from having problems).\n\nThe root cause is that anything can add make dependencies that trigger things to get installed without us knowing about it. This line in any makefile would trigger libbar.so to get installed if libfoo.so is installed, without it showing up in this list:\n\n  $(TARGET_OUT_SHARED_LIBRARIES)/libfoo.so: $(TARGET_OUT_SHARED_LIBRARIES)/libbar.so\n\n(There are also other cases of custom additions to the image via various side-effects, but those won\u0027t have NOTICE files anyways)",
      "parentUuid": "e43ea921_c7d15e8b",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87facdc_5eb91251",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-01-30T05:06:57Z",
      "side": 1,
      "message": "1. If true, the statement that the list suffices for dependencies is false. If libbar.so is not in the dependencies, changes to it or its notices will not cause an update to the system image notice file.\n\n2. How does the .so.so rule inform flashall to install libbar.so? Let\u0027s just use that list instead.",
      "parentUuid": "e58c69c6_229317e3",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e259d9_e1e5fc9c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2020-01-30T05:13:21Z",
      "side": 1,
      "message": "1. It\u0027s a dependency of a dependency, so it should work.\n\n2. The image generation (used by flashall/etc) just do the same thing the existing logic here did. Depend on the things we know we need, then gather up everything we find in the relevant directories.",
      "parentUuid": "f87facdc_5eb91251",
      "range": {
        "startLine": 14,
        "startChar": 32,
        "endLine": 14,
        "endChar": 64
      },
      "revId": "0086b086e21ced468d94b3477c284ec2df0f24f2",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}