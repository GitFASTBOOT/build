{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "74afaf27_bcfd4e99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1869221
      },
      "writtenOn": "2022-08-01T18:46:02Z",
      "side": 1,
      "message": "This is to change the way AFL fuzzers are built.\n\nCurrent check in we are building AFL fuzzers with cc_afl_fuzz. We are changing this to remove cc_afl_fuzz, and we will build AFL fuzzers using cc_fuzz and using command line arg FUZZ_FRAMEWORK\u003dAFL. \nexample of new way to build libFuzzers/AFL fuzzers:\ncc_fuzz{name: \"test\"}\n\nlibFuzzer:\nmma test -j88\n\nAFL:\nFUZZ_FRAMEWORK\u003dAFL mma test -j88\n\n\nSome fuzzers will not be able to be built for all frameworks, for these fuzzers there is a \"fuzzing_frameworks\" field to optionally specify what fuzz frameworks the fuzz target can be built for. If this is not set, then it will be assumed that all frameworks are supported for that fuzz target.\n\nWe quickly reverted the docs to build AFL fuzzers using cc_afl_fuzz, but one person has already checked in cc_afl_fuzz target. I have talked to them and sent out a CL to update their Android.bp file (this fuzz target is in Android Internal only)\n\nThis change will help keep the Android.bp file clean, since you wont have to have a cc_fuzz target and a cc_afl_fuzz target to build both libfuzzer and AFL.",
      "revId": "206f7c7eb25a803585d6c0363f7c9f992a23272e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dda64ea7_088100ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1869221
      },
      "writtenOn": "2022-08-01T18:55:34Z",
      "side": 1,
      "message": "I am working to remove the cc_afl_fuzz target to fix the build breaks. I have a CL out here:\n\nhttps://googleplex-android-review.git.corp.google.com/c/platform/external/dtc/+/19484254",
      "revId": "206f7c7eb25a803585d6c0363f7c9f992a23272e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d127dbd_588b624e",
        "filename": "core/soong_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2022-08-01T21:26:49Z",
      "side": 1,
      "message": "If this is never used or controlled by Make you don\u0027t need a soong config variable, you can use `ctx.Config().Getenv(\"FUZZ_FRAMEWORK\")` in Soong.",
      "revId": "206f7c7eb25a803585d6c0363f7c9f992a23272e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046386ab_2d167ff4",
        "filename": "core/soong_config.mk",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1869221
      },
      "writtenOn": "2022-08-02T00:39:18Z",
      "side": 1,
      "message": "I tested removing this line, and when I do I have to switch to using ctx.Config().Getenv(\"...\") in fuzz.go (as you already said), but then the unit test breaks because I can\u0027t do:\n\nconfig.TestProductVariables.FuzzFramework\u003d \"AFL\"\n\nIs there another way to set this value in the unit test so I can get it with Getenv(\"...\")?",
      "parentUuid": "6d127dbd_588b624e",
      "revId": "206f7c7eb25a803585d6c0363f7c9f992a23272e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}