{
  "comments": [
    {
      "key": {
        "uuid": "06da8706_4c7ba395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-10T21:16:24Z",
      "side": 1,
      "message": "Ping? Maybe OEMs would like to chime in?",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0497b641_71a474ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:19:33Z",
      "side": 1,
      "message": "Thanks for the review so far! Left a few comments, will come back once I\u0027ve factored out the multiprocessing speedups into another CL.",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92809d9d_f8dd38fb",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-05-31T15:58:12Z",
      "side": 1,
      "message": "Can move the threading speedup into another CL or drop it entirely",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02806ca0_2f0f2a15",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T00:10:39Z",
      "side": 1,
      "message": "Yeah, I think this should be in a separate CL.",
      "parentUuid": "92809d9d_f8dd38fb",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa9eca58_980161e0",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:19:33Z",
      "side": 1,
      "message": "Alright.",
      "parentUuid": "02806ca0_2f0f2a15",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf68dd0_2dcbda71",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:34:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa9eca58_980161e0",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5de77df3_3f6be9ca",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T00:10:39Z",
      "side": 1,
      "message": "nit: ALLOWLIST?",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4d4702e_726fd681",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:19:33Z",
      "side": 1,
      "message": "Old habits die hard. Wilco.",
      "parentUuid": "5de77df3_3f6be9ca",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66538f4e_ac4e11d2",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:34:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4d4702e_726fd681",
      "range": {
        "startLine": 30,
        "startChar": 10,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ceb59d52_71e839cd",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T00:10:39Z",
      "side": 1,
      "message": "Why are apks in the system partition checked? They should be allowed to use system uid, shouldn\u0027t they?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a90669f1_e7d50f7c",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:19:33Z",
      "side": 1,
      "message": "Ideally no two apks should share a UID, but since that\u0027s not feasible, we\u0027ll settle for this allowlist.\n\nAlso, n.b.: Checking apks inside /system is current behaviour, I\u0027m not changing it.",
      "parentUuid": "ceb59d52_71e839cd",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adcf13c9_8ef3f791",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T04:06:21Z",
      "side": 1,
      "message": "\u003e Ideally no two apks should share a UID\n\nMay I ask why? I think they are fine to share UID as long as they are owned by the same entity (or are in the same partition which is usually owned/signed by a single entity).\n\nI thought you will be checking the shared UID only \"across\" partitions.",
      "parentUuid": "a90669f1_e7d50f7c",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0b5494b_5d94a9e7",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T21:28:20Z",
      "side": 1,
      "message": "\u003e \u003e Ideally no two apks should share a UID\n\u003e \n\u003e May I ask why? I think they are fine to share UID as long as they are owned by the same entity (or are in the same partition which is usually owned/signed by a single entity).\n\nSee https://developer.android.com/guide/topics/manifest/manifest-element for your colleagues\u0027 reasoning:\n\n\"This constant was deprecated in API level 29.\nShared user IDs cause non-deterministic behavior within the package manager. As such, its use is strongly discouraged and may be removed in a future version of Android. Instead, apps should use proper communication mechanisms, such as services and content providers, to facilitate interoperability between shared components.\"\n\nI agree with that sentiment.\n\n\u003e I thought you will be checking the shared UID only \"across\" partitions.\n\nNo, that is not the goal. For now, sharing UIDs across apps in different partitions is only logged inside the json file - making this an error could be accomplished in another CL.\n\nThe goal for now is to disallow non-AOSP apps to run under the system or phone userIds, which are reserved for a good reason.\n\nNote that OEMs tend to ship telephony-related apps on /system, so exempting non-AOSP apps using uid.phone or uid.system that are nevertheless on /system is not a solution, since those will fall through the cracks. That is the reason an explicit allowlist is needed.",
      "parentUuid": "adcf13c9_8ef3f791",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0afa7d65_5e29f0e5",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-13T11:50:01Z",
      "side": 1,
      "message": "Thanks for the pointer. I didn\u0027t pay attention to the deprecation of the manifest element. However, although I too agree with the idea behind the deprecation, enforcing it is a completely different issue. I honestly don\u0027t think the platform is ready for this. I see 400+ uses of sharedUserId in our repo. I expect much more in partner repos.\n\n\u003e The goal for now is to disallow non-AOSP apps to run under the system or phone userIds\n\nThis sounds good, but how can you identify non-AOSP apps? For example, the OEM-owned telephony-related apps in /system isn\u0027t distinguishable from a truly AOSP app unless we keep the list of all AOSP apps, which I think is not a good idea.",
      "parentUuid": "f0b5494b_5d94a9e7",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fd07954_fffe251a",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T00:10:39Z",
      "side": 1,
      "message": "How are these discovered?",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 95,
        "endChar": 1
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ddc6b6b_aed2bda4",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T00:19:33Z",
      "side": 1,
      "message": "Mostly by grepping for sharedUserId in xml files and further searching by hand in case any app manifests were dynamically assembled.\n\nMaybe Treehugger will surface some more, but I think I was fairly thorough.",
      "parentUuid": "1fd07954_fffe251a",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 95,
        "endChar": 1
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7067fb0_86fe1c63",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-11T04:06:21Z",
      "side": 1,
      "message": "I see. But keeping this list is error prone and often subject to merge conflict. Also, once we have this list, people will start to use this to work around the build error that they are hit by.\n\nI think there should a way to easily filter-out test apks without explicitly listing them. For example, android_test modules have LOCAL_MODULE_TAGS set to tests.",
      "parentUuid": "5ddc6b6b_aed2bda4",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 95,
        "endChar": 1
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d670b4c3_4b0cbf01",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-08-11T21:28:20Z",
      "side": 1,
      "message": "\u003e I see. But keeping this list is error prone and often subject to merge conflict.\n\nWell, my hope is that the instances of sharedUserId decrease and not increase.\n\n\u003e Also, once we have this list, people will start to use this to work around the build error that they are hit by.\n\nNot much we can do about that. People will always find ways to not update their stuff and instead monkey-patch the system. But, as with all build errors, it\u0027s a strong indication that the wind is changing and they better change course instead of fighting the current.\n\nMaybe a comment with \"You *must* only add your app as an exemption here if it is a test app\"?\n\n\u003e I think there should a way to easily filter-out test apks without explicitly listing them. For example, android_test modules have LOCAL_MODULE_TAGS set to tests.\n\nThat sounds like a good idea. But do you know of a way to extract those tags with aapt? I don\u0027t think they end up in the final apk, and I\u0027m wary of coupling this python script too tightly into the make-based system.",
      "parentUuid": "b7067fb0_86fe1c63",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 95,
        "endChar": 1
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a05c633c_c4418412",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1132673
      },
      "writtenOn": "2020-08-13T11:50:01Z",
      "side": 1,
      "message": "If we really want to make a change, that should be enforced in a different way: via a compliance testing tool like CTS. I don\u0027t agree with adding a check without being enforced by CTS (and also without a sound rationale).\n\n\u003e  But do you know of a way to extract those tags with aapt?\n\nYou will have to send the information from the build system to this script. An apk file itself doesn\u0027t carry that info.",
      "parentUuid": "d670b4c3_4b0cbf01",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 95,
        "endChar": 1
      },
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52d51bc3_54c3f65c",
        "filename": "core/tasks/find-shareduid-violation.py",
        "patchSetId": 6
      },
      "lineNbr": 199,
      "author": {
        "id": 1421169
      },
      "writtenOn": "2020-05-31T15:58:12Z",
      "side": 1,
      "message": "S should be enough time to adjust. Already launched devices are not affected.",
      "revId": "df3b9f478aa88568d8dc3123f94624011ea5906b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}