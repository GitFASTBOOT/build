{
  "comments": [
    {
      "key": {
        "uuid": "aeab3c1f_e0bcdd8a",
        "filename": "core/main.mk",
        "patchSetId": 1
      },
      "lineNbr": 927,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2018-07-06T01:36:28Z",
      "side": 1,
      "message": "Can you make it so that it prints out all of the problems before exiting? (I\u0027ve turned these into warnings before, along with setting a variable, then $(error done) if the variable is set at the end)",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d58f2c33_02087ada",
        "filename": "core/product.mk",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 1074628
      },
      "writtenOn": "2018-07-06T01:36:28Z",
      "side": 1,
      "message": "Can you mark these two variables as readonly?",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95a8b67c_72d8fc96",
        "filename": "target/product/generic.mk",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2018-07-05T15:43:34Z",
      "side": 1,
      "message": "An alternative to whitelisting is to require the same conditionals in the product makefiles as used in the Android.mk that defines them.",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2216901_48b3abdd",
        "filename": "target/product/generic.mk",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2018-07-05T15:51:27Z",
      "side": 1,
      "message": "I like that better, but I couldn\u0027t figure out what conditional is gating the definition of the .recovery modules. Do you know? Spent a fair bit of time trying to figure that out actually :\u003c\n\nthe device_manifest.xml is straight forward to prune in that manner.",
      "parentUuid": "95a8b67c_72d8fc96",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b90f706_e36ca50e",
        "filename": "target/product/generic.mk",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2018-07-05T15:56:38Z",
      "side": 1,
      "message": "I don\u0027t see any reason adbd.recovery would not be defined, it looks like it would always be created from recovery_available: true?",
      "parentUuid": "f2216901_48b3abdd",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb839bc_9be400c8",
        "filename": "target/product/generic.mk",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2018-07-05T16:02:45Z",
      "side": 1,
      "message": "Not entirely sure how that \u0027InRecovery\u0027 flag works in soong. However I\u0027m seeing this:\n\n$ grep adbd\\\\.recovery out/soong/Android-aosp_arm64.mk\nLOCAL_MODULE :\u003d adbd.recovery\nLOCAL_MODULE :\u003d libadbd.recovery\n$ grep adbd\\\\.recovery out/soong/Android-generic.mk \n\u003cempty\u003e\n\nThe first is from \u0027lunch aosp_arm64\u0027 and the second from \u0027lunch generic\u0027.",
      "parentUuid": "3b90f706_e36ca50e",
      "revId": "1b437dcb469765b26d87c892e20c028dec81c20d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}