{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ef79eea5_048df106",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-18T14:26:25Z",
      "side": 1,
      "message": "Looks great!",
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e68b13_b973637e",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-19T21:45:35Z",
      "side": 1,
      "message": "Where does this come from?  And is it always going to have the empty list, or is it better to let the caller handle the missing elements?",
      "range": {
        "startLine": 157,
        "startChar": 11,
        "endLine": 157,
        "endChar": 31
      },
      "fixSuggestions": [
        {
          "fixId": "b38f498b_91260132",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "ci/build_test_suites.py",
              "range": {
                "startLine": 144,
                "startChar": 0,
                "endLine": 144,
                "endChar": 0
              },
              "replacement": "  \"\"\"Loads the build context from the BUILD_CONTEXT env var.\n\n  Returns:\n    The build context dict.\n\n  Raises:\n    Error: If the build context file is not found or is not valid JSON.\n  \"\"\"\n"
            },
            {
              "path": "ci/build_test_suites.py",
              "range": {
                "startLine": 153,
                "startChar": 0,
                "endLine": 157,
                "endChar": 0
              },
              "replacement": ""
            }
          ]
        }
      ],
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53b60d69_f676f4b8",
        "filename": "ci/build_test_suites.py",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-20T00:46:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46e68b13_b973637e",
      "range": {
        "startLine": 157,
        "startChar": 11,
        "endLine": 157,
        "endChar": 31
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6734bef0_785daecb",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-19T21:45:35Z",
      "side": 1,
      "message": "Why all the newlines?",
      "range": {
        "startLine": 45,
        "startChar": 56,
        "endLine": 47,
        "endChar": 6
      },
      "fixSuggestions": [
        {
          "fixId": "fddd2c11_55864128",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "ci/optimized_targets.py",
              "range": {
                "startLine": 45,
                "startChar": 0,
                "endLine": 49,
                "endChar": 0
              },
              "replacement": "    if self.get_enabled_flag() in self.build_context.get(\u0027enabledBuildFeatures\u0027, []):\n      return self.package_outputs_impl()    \n"
            }
          ]
        }
      ],
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bedb1b7_b52df0af",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-20T00:46:37Z",
      "side": 1,
      "message": "they were put in by the python formatter, wouldn\u0027t the line be too long without them?",
      "parentUuid": "6734bef0_785daecb",
      "range": {
        "startLine": 45,
        "startChar": 56,
        "endLine": 47,
        "endChar": 6
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d389799_7cc8e9c3",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-20T01:44:09Z",
      "side": 1,
      "message": "You can put enabledBuildFeatures on a separate line.\n```suggestion\n    features \u003d self.build_context.get(\u0027enabledBuildFeatures\u0027, [])\n    if self.get_enabled_flag() in features:\n\n```",
      "parentUuid": "4bedb1b7_b52df0af",
      "range": {
        "startLine": 45,
        "startChar": 56,
        "endLine": 47,
        "endChar": 6
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b5a18e7_6eecbb90",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-22T17:43:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d389799_7cc8e9c3",
      "range": {
        "startLine": 45,
        "startChar": 56,
        "endLine": 47,
        "endChar": 6
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4af827_aa8a8f5d",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-19T21:45:35Z",
      "side": 1,
      "message": "Should this be an impl instead? This is going to return None instead of a boolean, which could be surprising.",
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4db117a_e3d8daa6",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-20T00:46:37Z",
      "side": 1,
      "message": "package_outputs isn\u0027t supposed to return a bool, it doesn\u0027t return anything. But now that you mention it let me remove the return from the base class as that shouldn\u0027t be there either.",
      "parentUuid": "7f4af827_aa8a8f5d",
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fde6c7e8_03a7c951",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-19T21:45:35Z",
      "side": 1,
      "message": "I don\u0027t think these should be hard coded here. Then this file needs to be maintained in addition to the build files for it and the test configuration.",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa46d660_bbc5cc2b",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-20T00:46:37Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s a way to query soong for what artifacts a module outputs is there? Then there\u0027s the fact of having to know which ones get put into dist etc. Adding more soong calls would slow down the build even more as well, I\u0027m not sure what the best way to determine these outputs is.",
      "parentUuid": "fde6c7e8_03a7c951",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a79ea44_9ed746d8",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-20T01:44:09Z",
      "side": 1,
      "message": "This is how the test configuration specifies to pull from catbox.zip and is what we need to key off of. We have unit tests tests in place to maintain this exact format. So I think this makes sense.\n\nThe pattern is android-$(test_suite_name).zip for cts-related zips so it\u0027s possible to skip the second part for these zips. This isn\u0027t true of all zips though so we can\u0027t generalize that pattern.",
      "parentUuid": "aa46d660_bbc5cc2b",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18965113_fe6b1200",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-22T18:44:58Z",
      "side": 1,
      "message": "Joe, WDYT? Luca and I think that hardcoded is the way to go here.",
      "parentUuid": "9a79ea44_9ed746d8",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce584f0_76baed50",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-23T23:49:07Z",
      "side": 1,
      "message": "I\u0027m not really convinced. Is there a generic way to do it?",
      "parentUuid": "18965113_fe6b1200",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "769da849_8e310a9d",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-24T00:05:38Z",
      "side": 1,
      "message": "I think the issue is that there isn\u0027t a generic way to do it. For example: xTS test suites generally output `android-{suite}.zip` but might also have other outputs (`android-cts-verifier.zip`, `android-cts-tests_list.zip`, and it also seems to output other things like apks in dist `CtsApkVerityTestApp.apk`. I\u0027m not 100% sure this is coming directly from cts, but you get my point. general-tests for example doesn\u0027t output in the form `android-general-tests.zip` but just `general-tests.zip`.) There are other modules/suites built in test_suites as well which might have different patterns for outputs, so I don\u0027t think there\u0027s a good generic way to determine outputs for a given build module/suite. The only 2 ways I\u0027d be comfortable are either hardcoding it here for the specific suites we intend to optimize or implementing soong functionality to query module outputs (specifically that get put in `dist`) which would be a significant delay to BWYN.",
      "parentUuid": "dce584f0_76baed50",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "858b47f9_2d7c3788",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-24T01:22:39Z",
      "side": 1,
      "message": "In the ATP validator we get away without listing literally android-catbox.zip because we use a regex, as shown here:\n  https://source.corp.google.com/piper///depot/google3/wireless/android/test_tools/androidtest_pa/config/validator.py;rcl\u003d655366800;l\u003d508\n  \nIn validator, the regex is \\b(?P\u003cartifact\u003e%s)\\b (where %s is catbox) so that matches both general-tests.zip and android-catbox.zip without literally having to specify the zip filename (because it\u0027s just matching \"\\bcatbox\\b\" and not \"android-catbox\". \n\nActually Luca, I think we should follow the same pattern as the validator because we do need to match android-catbox-tests_list.zip and not just  android-catbox.zip -- some tests do refer to the zips that way. So Luca, let\u0027s follow the pattern from the validator that has been confirmed to be solid as is also generic so it fits Joe\u0027s feedback.\n\nFYI, Luca, for your reference, here are the code references where the zips are built:\n\n  https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:build/make/core/tasks/tools/compatibility.mk;drc\u003d27e0ce0459eead8b762f84bad4d44146f2e16826;l\u003d121\n  https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:build/make/core/tasks/general-tests.mk;drc\u003db86f9ef15998f8598d6c48861180d244a795aa3c;l\u003d23",
      "parentUuid": "769da849_8e310a9d",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ead7df7_95b133c9",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-24T03:13:44Z",
      "side": 1,
      "message": "What information would you need from the build to make this generic?",
      "parentUuid": "858b47f9_2d7c3788",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28c6b668_d89c38a8",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1076194
      },
      "writtenOn": "2024-07-24T15:14:11Z",
      "side": 1,
      "message": "Luca was asking for the mapping from the target \u0027catbox\u0027 to what artifacts are produced by the target in the dist dir. This is because we\u0027re taking regexes from TradeFed and then seeing whether they match the output artifact.\n\nIn an ideal world, here\u0027s what we\u0027d like to see from the build system:\n  - catbox maps to (android-catbox.zip, android-catbox-tests_list.zip)\n  - continuous_native_tests maps to (continuous_native_tests.zip)\n  - general-tests maps to (general-tests.zip, general-tests_list.zip, general-tests_configs.zip, general-tests_host-shared_libs.zip)\n  \nThese are the main cases. The reason we originally opted for hardcoding was so that all of the above cases could be hardcoded.\n  \nIn practice, we should note here that the purpose of the code is to detect if catbox is used. So, for example, if a test happens to reference \u0027android-catbox-tests_configs.zip\u0027, it\u0027s probably a good idea to play it safe build catbox even if our script doesn\u0027t think it\u0027ll be used. With that in mind, we can make a generic solution here that meets the needs and is better than Luca\u0027s original implementation.\n\nLuca, here\u0027s an improved version of what I said earlier : What if we try every file with and without the \u0027android-\u0027 prefix and also with every possible ending? This makes it generic and also is more conservative.\n\nOne gotcha here is that in your generic function that adds suffixes, you\u0027ll need to check whether the target itself ends with \u0027-tests\u0027. In that case, we should strip that prior to adding on any \u0027-tests*\u0027 suffix, since that seems to be the convention.\n\nInitially this script will be a no-op because there\u0027s a few tests that have overly broad regexes even though they don\u0027t actually use the additional artifacts. But it\u0027s nice that our test is smart enough to recognize the risk of the test using the artifacts if the regex matches, so once we clean that up the artifacts will get deleted.\n\nHere\u0027s some examples of tests that need to be cleaned up:\n\nhttps://source.corp.google.com/search?q\u003d%5C*-tests_list%5C.zip%20file:gcl$\u0026sq\u003dpackage:piper%20file:%2F%2Fdepot%2Fgoogle3%20-file:google3%2F(experimental%7Cobsolete)",
      "parentUuid": "1ead7df7_95b133c9",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c453cbdb_77c68c3b",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-25T23:23:19Z",
      "side": 1,
      "message": "Is this what you had in mind?",
      "parentUuid": "28c6b668_d89c38a8",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 106,
        "endChar": 0
      },
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70dc1f30_bbc3b72e",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 135,
      "author": {
        "id": 1000701
      },
      "writtenOn": "2024-07-19T21:45:35Z",
      "side": 1,
      "message": "This is hard to review. Can you put a comment explaining the inputs, the outputs and the algorithm?",
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5f2b089_195f74df",
        "filename": "ci/optimized_targets.py",
        "patchSetId": 7
      },
      "lineNbr": 135,
      "author": {
        "id": 1900272
      },
      "writtenOn": "2024-07-20T00:46:37Z",
      "side": 1,
      "message": "Added some comments.",
      "parentUuid": "70dc1f30_bbc3b72e",
      "revId": "8fcbbe49f98807a6d5c5eefed5ac6750408dcceb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}