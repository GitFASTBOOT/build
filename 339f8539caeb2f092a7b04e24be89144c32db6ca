{
  "comments": [
    {
      "key": {
        "uuid": "a9a2c720_c7dbca76",
        "filename": "core/dex_preopt.mk",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:05:15Z",
      "side": 1,
      "message": "this is a variable name right, not a module name? seems like boot_image_module_var might be better",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb7fc1a8_9cc155a3",
        "filename": "core/dex_preopt.mk",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-13T11:45:47Z",
      "side": 1,
      "message": "Yes this is a variable name used to store the module names. SG I\u0027ll change in next patchset",
      "parentUuid": "a9a2c720_c7dbca76",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e34684f9_97f50f42",
        "filename": "core/dex_preopt.mk",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-14T07:59:31Z",
      "side": 1,
      "message": "Reformatted this bit of code to eliminate the indirection. Now my_boot_image_module is just the output of dex_preopt_libart.mk and expands to a module name (or empty). The value of my_boot_image_module is then stored in DEFAULT_DEX_PREOPT_INSTALLED_IMAGE_MODULE",
      "parentUuid": "eb7fc1a8_9cc155a3",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b844b7b3_1116fb0d",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:05:15Z",
      "side": 1,
      "message": "looks like the only use of my_boot_image_name, so my_suffix could be the input instead I guess (optional).",
      "range": {
        "startLine": 40,
        "startChar": 15,
        "endLine": 40,
        "endChar": 33
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdd768d7_94f1e255",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-13T11:29:19Z",
      "side": 1,
      "message": "A bit of a bikeshed, but I\u0027d rather keep my_boot_image_name. There are a few free variables here, one is the name and another one is the arch. Since my_boot_image_arch is used separately anyway, passing suffix instead of name wouldn\u0027t reduce the number of parameters, so I\u0027d rather keep the parameters orthogonal.",
      "parentUuid": "b844b7b3_1116fb0d",
      "range": {
        "startLine": 40,
        "startChar": 15,
        "endLine": 40,
        "endChar": 33
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "446a200d_f541d4c5",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:05:15Z",
      "side": 1,
      "message": "Indent the contents of this if ?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1c0b0b1_0f7ad240",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-14T07:59:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "446a200d_f541d4c5",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10228e32_85af65d0",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:05:15Z",
      "side": 1,
      "message": "so the first entry in DEXPREOPT_IMAGE_BUILT_INSTALLED_* is special? is that documented somewhere?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 50,
        "endChar": 0
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6624293_5670b027",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-13T11:45:47Z",
      "side": 1,
      "message": "When building primary image, the first entry has a special stem:\n- http://cs/android/build/soong/java/dexpreopt_config.go?l\u003d158\u0026rcl\u003d8640ab9c26a2135d77884906665250ba5ae144a1\n- http://go/art-images (Image classification \u003e Primary boot images \u003e third paragraph)\n\nFirst entry also has a special dependency, Line 71 of this file:\n`$(LOCAL_INSTALLED_MODULE): $(my_installed)`",
      "parentUuid": "10228e32_85af65d0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 50,
        "endChar": 0
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9e33a29_0474e7b9",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:05:15Z",
      "side": 1,
      "message": "This whole file is run via $(eval include \u003cf\u003e). I assume you verified the module gets defined as you\u0027d expect, but worth knowing the double evaluation can lead to some funny/unexpected effects sometimes. It\u0027s not clear to me exactly what order things will happen here...",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a08f1067_5c3344e1",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-13T11:45:47Z",
      "side": 1,
      "message": "Sorry, I don\u0027t understand. I thought \"include\" is a standard construct, as we do things like `\u003cA.mk\u003e include \u003cB.mk\u003e include $(BUILD_*)` to register modules all the time?",
      "parentUuid": "a9e33a29_0474e7b9",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde527c1_eba22090",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2020-07-13T11:57:55Z",
      "side": 1,
      "message": "It is, it\u0027s just that $(eval) sometimes leads to unexpected behavior, especially together with $(call), but I think include probably doesn\u0027t have the same eval behavior that $(call) does. I think you\u0027re fine in this case (though I\u0027m not confident)\n\nFor example, the following prints \"y x\"\n\n    LOCAL_MODULE :\u003d x\n    define hi\n    LOCAL_MODULE :\u003d y\n    LOCAL_OTHER :\u003d $(LOCAL_MODULE)\n    endef\n    $(eval $(call hi))\n    $(warning $(LOCAL_MODULE) $(LOCAL_OTHER))",
      "parentUuid": "a08f1067_5c3344e1",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b590a15b_1aa25d8a",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-13T12:19:48Z",
      "side": 1,
      "message": "I guess the problematic case is caused by $(eval)-ing a $(call) result. If the $(eval) statement is within the `define...endef` then it\u0027s probably alright?\n\nSo I think it\u0027s fine in this case, as core/dex_preopt.mk always do $(eval include $(BUILD_SYSTEM)/dex_preopt_libart.mk), and dex_preopt_libart.mk does all its $(eval) within itself",
      "parentUuid": "cde527c1_eba22090",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "339f8539caeb2f092a7b04e24be89144c32db6ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}