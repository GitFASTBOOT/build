{
  "comments": [
    {
      "key": {
        "uuid": "70c589af_0370e7ad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 7,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "Usually \u0027prebuilt\u0027 images means those images are built outside of Android build system. e.g., kernel image or dtbo.img (and basically Android build system just copy them to the $OUT dir).\n\nhttps://android.googlesource.com/device/google/bonito-kernel/+/refs/heads/master\n\nSince custom images are built by `make custom_images`, they shouldn\u0027t be prebuilt.",
      "range": {
        "startLine": 7,
        "startChar": 19,
        "endLine": 7,
        "endChar": 27
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3f458f1_68b58c5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 7,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70c589af_0370e7ad",
      "range": {
        "startLine": 7,
        "startChar": 19,
        "endLine": 7,
        "endChar": 27
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6489b53d_6f7b4324",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "Taking a closer look for the RADIO folder in exiting target files, looks like they\u0027re radio/bootloader related images. \n\nIIRC, we created a new \u0027PREBUILT_IMAGES\u0027 dir when adding the prebuilt dtbo.img. Can we create a new \u0027CUSTOM_IMAGES\u0027 for this change as well?\n\nNote: if Tianjie also thinks that using RADIO is good enough then I\u0027m fine with it.",
      "range": {
        "startLine": 14,
        "startChar": 43,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae43885b_58538a8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-07T08:08:50Z",
      "side": 1,
      "message": "As I think about it again, IMAGES/ seems to be a better place to hold the oem.img. And we are already putting other AVB images there, e.g. dtbo, odm, vendor_boot etc. RADIO feels like bootloader and radio.img",
      "parentUuid": "6489b53d_6f7b4324",
      "range": {
        "startLine": 14,
        "startChar": 43,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "457eae25_b57478a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-07T08:44:49Z",
      "side": 1,
      "message": "+1, IMAGES/ looks a proper place",
      "parentUuid": "ae43885b_58538a8d",
      "range": {
        "startLine": 14,
        "startChar": 43,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed4e70b7_5f3fb6a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 14,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "Thanks, I will move to IMAGES/",
      "parentUuid": "6489b53d_6f7b4324",
      "range": {
        "startLine": 14,
        "startChar": 43,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89cfa431_66bc3e5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "How about the name of other custom images?\n\nCan we provide an example here (just to ensure we\u0027re at the same page).\n\ne.g., the partition name is /oem, and we generated multiple custom images:\n\n 1. oem.img \n 2. oem-carrier1.img\n 3. oem-carrier2.img\n\nAlso, it might be helpful to describe the typical usage of the custom images. Are they to store custom wallpaper, ringtones, and carrier-specific apks?",
      "range": {
        "startLine": 14,
        "startChar": 57,
        "endLine": 15,
        "endChar": 49
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85eae4e3_8ceb404a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "We are on the same page to the oem image. But oem image is just one example. The SoCs and OEMs can put more custom images. For example, some SoCs put TV stacks into another custom image to support different broadcast stacks in different regions. I added some more details.",
      "parentUuid": "89cfa431_66bc3e5a",
      "range": {
        "startLine": 14,
        "startChar": 57,
        "endLine": 15,
        "endChar": 49
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66e76482_753ca126",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "nit: maybe also test with \u0027make dist\u0027 ?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 5
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0b38c97_7a21ce3f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "yes, I added it.",
      "parentUuid": "66e76482_753ca126",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 5
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "102e623f_be838a4e",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 966,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "Looks like both \u0027partition\u0027 and \u0027location\u0027 isn\u0027t used inside the function, but just return to the caller.\n\nSeems the caller can just call:\n  \nExtractAvbPublicKey(info_dict[\"avb_avbtool\"],\n                    info_dict[\"avb_custom_images_key_path\"])",
      "range": {
        "startLine": 965,
        "startChar": 4,
        "endLine": 966,
        "endChar": 42
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d7648d_4881b1e0",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 966,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "okay, I have moved to your suggestion",
      "parentUuid": "102e623f_be838a4e",
      "range": {
        "startLine": 965,
        "startChar": 4,
        "endLine": 966,
        "endChar": 42
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06dc151_58b14f78",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "Other partitions (e.g., boot, vbmeta_system) could be a chained partition as well.\n\nIt seems we\u0027ll also replace the chained-key to \"avb_custom_images_key_path\" for those non-custom images?",
      "range": {
        "startLine": 1075,
        "startChar": 20,
        "endLine": 1075,
        "endChar": 37
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da7f724f_af5d4c02",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "No, for the android droid images, they will be separated items in the misc_info.txt. They will not be in \"avb_{}_args\". The following are the items for vbmeta_system.\n\n\navb_vbmeta_system\u003dsystem\navb_vbmeta_system_args\u003d--padding_size 4096 --rollback_index 0\navb_vbmeta_system_key_path\u003dexternal/avb/test/data/testkey_rsa4096.pem\navb_vbmeta_system_algorithm\u003dSHA256_RSA4096\navb_vbmeta_system_rollback_index_location\u003d2",
      "parentUuid": "d06dc151_58b14f78",
      "range": {
        "startLine": 1075,
        "startChar": 20,
        "endLine": 1075,
        "endChar": 37
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "838ac49f_dac136da",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-08T09:20:37Z",
      "side": 1,
      "message": "Oh, sorry for not being clear.\n\nI meant, when vbmeta_system.img is chained, it\u0027s public key will be embedded in vbmeta.img as well:\n  \nDescriptors:            \n    Chain Partition descriptor:\n      Partition Name:          vbmeta_system\n      Rollback Index Location: 1      \n      Public key (sha1):       cdbb77177f731920bbe0a0f94f84d9038ae0617d\n\nBut looks like the loop here will change the public key of vbmeta_system descriptor to avb_custom_images_key_path when making vbmeta.img.  Then when bootloader uses that key from vbmeta.img to verify vbmeta_system.img, it will lead to a verification error. Right?\n\nNote: --chain_partition is used whem making vbmeta.img.",
      "parentUuid": "da7f724f_af5d4c02",
      "range": {
        "startLine": 1075,
        "startChar": 20,
        "endLine": 1075,
        "endChar": 37
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5e10531_d40ee93b",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1075,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T15:29:39Z",
      "side": 1,
      "message": "This loop here will only parse \"avb_{}_args\".format(name)\", line 1053. The driod images, like vebmeta_system\u0027s chained description, are not in this \"avb_{}_args\".format(name)\" at all.",
      "parentUuid": "838ac49f_dac136da",
      "range": {
        "startLine": 1075,
        "startChar": 20,
        "endLine": 1075,
        "endChar": 37
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "633327da_f0453e5f",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1077,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "nit: let\u0027s be explicit:  chained_partition_name",
      "range": {
        "startLine": 1077,
        "startChar": 8,
        "endLine": 1077,
        "endChar": 25
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96229662_dd752410",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1077,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "633327da_f0453e5f",
      "range": {
        "startLine": 1077,
        "startChar": 8,
        "endLine": 1077,
        "endChar": 25
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "095c6b44_5246545b",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1078,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "location seems too general.\n\nI\u0027ll have to go to the definition of GetAvbChainedCustomPartitionArg() to learn that this is for rollback index.\n\nHow about: rollback_index_location?",
      "range": {
        "startLine": 1078,
        "startChar": 8,
        "endLine": 1078,
        "endChar": 16
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b89f45e_466978ee",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1078,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "095c6b44_5246545b",
      "range": {
        "startLine": 1078,
        "startChar": 8,
        "endLine": 1078,
        "endChar": 16
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bfa8b07_a254ed93",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "How about:\n  \nchained_partition_name \u003d split_args[index + 1].split(\":\")[0]\nrollback_index_location \u003d split_args[index + 1].split(\":\")[1] \nnew_key_path \u003d ExtractAvbPublicKey(info_dict[\"avb_avbtool\"],\n                                   info_dict[\"avb_custom_images_key_path\"])\n  \nsplit_args[index + 1] \u003d \"{}:{}:{}\".format(chained_partition_name,\n                                          rollback_index_location,\n                                          new_key_path)",
      "range": {
        "startLine": 1077,
        "startChar": 6,
        "endLine": 1080,
        "endChar": 59
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a08fe9e9_ebc135ba",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 15
      },
      "lineNbr": 1080,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "Thank you for your careful review, done",
      "parentUuid": "7bfa8b07_a254ed93",
      "range": {
        "startLine": 1077,
        "startChar": 6,
        "endLine": 1080,
        "endChar": 59
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99fb1683_269b8cff",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-06T11:04:08Z",
      "side": 1,
      "message": "Not sure why need to do info_image here (IIRC, we don\u0027t do this when sign other images).\n\nCan we just replace the key/algorithm in the same place below ?\n\nhttps://android-review.googlesource.com/c/platform/build/+/1298342/15/tools/releasetools/sign_target_files_apks.py#989\n\nAnd let verity_utils.py sign those custom_images as well?\n\nhttps://android-review.googlesource.com/c/platform/build/+/1298342/15/tools/releasetools/verity_utils.py#195",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8991f541_46f72c60",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-07T08:08:50Z",
      "side": 1,
      "message": "Parsing the image info is a bit fragile IMO. But I am not sure if there\u0027s a good alternative here to keep the salt and hash algorithm. Because the image is a prebuilt, I guess we don\u0027t have the corresponding avb_{}_salt in the info_dict. I\u0027d be glad if Hongguang@ can get the information elsewhere.",
      "parentUuid": "99fb1683_269b8cff",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca2a348_abb7ee10",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-07T08:10:59Z",
      "side": 1,
      "message": "where do we get these informations in general for prebuilt images, e.g. prebuilt vendor images? Or we never sign them.",
      "parentUuid": "8991f541_46f72c60",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb067357_54c2f605",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-07T08:44:49Z",
      "side": 1,
      "message": "\u003e Parsing the image info is a bit fragile IMO.\n\n+1, also, it\u0027s better not to diverge the signing steps from other images.\n\n\u003e corresponding avb_{}_salt \n\nIIRC, we don\u0027t specify salt. (it will be random upon each signing).\nb/125540538#comment80\n\n\u003e where do we get these informations in general for prebuilt images,\n\nAll AVB signing params are at $OUT/misc_info.txt (check prefix avb_*).\ne.g., if we run `make dist` it will read misc_info.txt then perform the signing.",
      "parentUuid": "5ca2a348_abb7ee10",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d1026e6_08a2e1e0",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T01:42:20Z",
      "side": 1,
      "message": "I will move to random salt.\nI also thought to put those info (partition/image size, partition name and hash algorithm) into misc_info.txt at beginning. But the custom images can be any images, and there may be more than one types of custom images, like one type of custom images for /oem and and another type of custom image mounted at /broadcast for different broadcast stacks. Their partition size and name will be different. \n\nIn the new patch, following pack_radioimages.txt, I add a new pack_customimages.txt. The custom images should be signed and installed to IMAGES/ are listed in it. And the partition size and name info are also included.\n\nI have move this custom image signing function to verity_utils.py as you suggested. I agree it\u0027s a better place.",
      "parentUuid": "99fb1683_269b8cff",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41be9a6a_64eddcc9",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T04:19:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d1026e6_08a2e1e0",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f12c4125_72a42d6e",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2020-05-08T10:06:52Z",
      "side": 1,
      "message": "I see.\n\nMaybe we should have separated concepts of 1) custom partition and 2) multiple custom images per custom partition.\n\ne.g.,  support we have two custom partitions: oem and broadcast.\n\nThen in misc_info.txt, maybe we can have:\n\ncustom_partition_list\u003d oem broadcast \n  (learned from dynamic_partition_list\u003d  system vendor product system_ext).\n\navb_oem_add_hash_footer_args\navb_oem_key_path\navb_oem_algorithm\navb_oem_rollback_index_location\n\navb_broadcast_add_hash_footer_args\navb_broadcast_key_path\navb_broadcast_algorithm\navb_broadcast_rollback_index_location\n\n\nThen for each (avb_oem_*, avb_broadcast_*), supports signing/building multiple images.\nps: recently we used avb_boot_* to sign multiple boot.img files at b/151094943, where there are multiple boot.img files in lunch aosp_arm64). \n\nThought?",
      "parentUuid": "41be9a6a_64eddcc9",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f1eb1b1_0bfea3e8",
        "filename": "tools/releasetools/custom_images_utils.py",
        "patchSetId": 15
      },
      "lineNbr": 103,
      "author": {
        "id": 1608690
      },
      "writtenOn": "2020-05-08T15:29:39Z",
      "side": 1,
      "message": "This is good and it means we can use different keys to sign different custom images. I\u0027m just thinking how should I modify the Makefile to put those info into misc_info_txt. Or how about do it in new CL if we really need different keys for different custom images and keep current pack_radioimages.txt solution?",
      "parentUuid": "f12c4125_72a42d6e",
      "range": {
        "startLine": 103,
        "startChar": 21,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "3a1ba1f7fecb605f324df4ef7a9e9b3ebf41188c",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}