{
  "comments": [
    {
      "key": {
        "uuid": "1697e1ff_44f4e09d",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 603,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-09-18T22:13:55Z",
      "side": 1,
      "message": "Why not put this in soong_cc_prebuilt.mk?",
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad1f0171_11305f56",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 603,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2019-09-18T22:41:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1697e1ff_44f4e09d",
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cffe50b_011ea69f",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 610,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-09-18T22:15:34Z",
      "side": 1,
      "message": "I don\u0027t see anything obviously different from LOCAL_TEST_DATA, could Soong put these in LOCAL_TEST_DATA instead of LOCAL_FUZZ_DATA if the cc_fuzz class was NATIVE_TESTS?",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 610,
        "endChar": 0
      },
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "417d7777_f55df2c4",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 610,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2019-09-18T22:41:05Z",
      "side": 1,
      "message": "The format is slightly different. For FUZZ_DATA, we want to support parent-relative (\"..\") and absolute paths, so we can reference corpora outside of the fuzz target directory (e.g. we might want to use both libzzz/test/testdata and libzzz/fuzz/corpus for the fuzz target libzzz/fuzz/my_fuzz_target.\n\nWe also want to support soong-only use of this flag.\n\nAnd IIRC having a NATIVE_TEST classification does some additional things that are probably inappropriate for fuzz targets (like generating an atest config).",
      "parentUuid": "5cffe50b_011ea69f",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 610,
        "endChar": 0
      },
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d53e8b6_b1910b7c",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 610,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-09-18T23:41:04Z",
      "side": 1,
      "message": "LOCAL_TEST_DATA only enforces the no parent-relative and absolute path requirements for non-Soong, so it should work.\n\nI\u0027d suggest modifying line 571 to work for NATIVE_TEST || fuzzer, which may mean adding LOCAL_IS_FUZZ_TEST :\u003d true to androidmk for fuzz tests.\n\nRelatedly, yes, NATIVE_TEST will autogenerate a config, but that could be a good thing, is there any way the fuzzers could be run through atest/tradefed?",
      "parentUuid": "417d7777_f55df2c4",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 610,
        "endChar": 0
      },
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94b9a3fc_448566c6",
        "filename": "core/base_rules.mk",
        "patchSetId": 6
      },
      "lineNbr": 610,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2019-09-19T00:00:42Z",
      "side": 1,
      "message": "\u003e Relatedly, yes, NATIVE_TEST will autogenerate a config, but that could be a good thing, is there any way the fuzzers could be run through atest/tradefed?\n\nI\u0027m currently under the impression that fuzz targets are unsuitable for atest/tradefed as they (ideally) run forever and never exit. The only things that could use tradefed/atest are:\n\n  a) Run example_fuzzer, and break the build if it *doesn\u0027t* find a bug.\n  b) Run the fuzz target through its corpus for regression testing, as any bugs found by fuzzing should have their test files added to the corpus.\n\nThis would still allow non-soong builds to use LOCAL_TEST_DATA as a corpus, which I\u0027m a bit hesitant on. I think that by re-using LOCAL_TEST_DATA here, we run the risk of confusing `test data \u003d\u003d fuzzer corpus`, and while there\u0027s only a subtle distinction, I can forsee someone being confused that LOCAL_TEST_DATA is used for something that\u0027s not a test.\n\nHappy to be overruled here, it\u0027s your baby after all :)\n\n\u003e I\u0027d suggest modifying line 571 to work for NATIVE_TEST || fuzzer, which may mean adding LOCAL_IS_FUZZ_TEST :\u003d true to androidmk for fuzz tests.\n\nIf we go down the path here, do we need an additional declaration here? We don\u0027t need to run the my_test_data_pairs blocks if there\u0027s no fuzzer test data.",
      "parentUuid": "4d53e8b6_b1910b7c",
      "range": {
        "startLine": 606,
        "startChar": 0,
        "endLine": 610,
        "endChar": 0
      },
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f49359df_c6ce3bf0",
        "filename": "core/clear_vars.mk",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-09-18T22:13:55Z",
      "side": 1,
      "message": "Keep this alphabetized",
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3961bcbe_375b34df",
        "filename": "core/clear_vars.mk",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1453063
      },
      "writtenOn": "2019-09-18T22:41:05Z",
      "side": 1,
      "message": "Sorry if I\u0027m just reading it wrong - isn\u0027t it currently in the right place?",
      "parentUuid": "f49359df_c6ce3bf0",
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a528cacf_4db6fa39",
        "filename": "core/clear_vars.mk",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2019-09-18T23:41:04Z",
      "side": 1,
      "message": "Ack, misread LOCAL_FULL as LOCAL_FUZZ",
      "parentUuid": "3961bcbe_375b34df",
      "revId": "47f669bed6c8e3667e572f584df38863ba370fdd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}