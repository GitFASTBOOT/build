{
  "comments": [
    {
      "key": {
        "uuid": "6db59e08_ae4e0453",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 10
      },
      "lineNbr": 532,
      "author": {
        "id": 1340374
      },
      "writtenOn": "2020-05-05T20:41:41Z",
      "side": 1,
      "message": "MAYBE: should this be `_CalculateFingerprint`? The value is cached at line 393, and has an accessor at line 405. We could cache whether or not the fingerprint is dynamic as well, which would make this method a bit cheaper.",
      "revId": "5a6a9576c980aac52cbb894a75e3d36d84a9af84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf6a673_b5141710",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 10
      },
      "lineNbr": 580,
      "author": {
        "id": 1340374
      },
      "writtenOn": "2020-05-05T20:41:41Z",
      "side": 1,
      "message": "AFAICT, this is only used by the test code. I\u0027m never excited about having non-trivial test-only functionality in a class/module/etc. Am I right in understanding that this is trying to find all possible permutations of the fingerprint for a given set of property files? If so, this seems a bit odd, as a set of property files should resolve to only one fingerprint. Only by changing ro.property_source_order could the fingerprint for a collection of images change (other than by an import statement, which parameterizes one or more properties). Could you elaborate a bit further on why this is necessary?",
      "revId": "5a6a9576c980aac52cbb894a75e3d36d84a9af84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9f24348_02bcfcdc",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 10
      },
      "lineNbr": 580,
      "author": {
        "id": 1340374
      },
      "writtenOn": "2020-05-06T00:52:35Z",
      "side": 1,
      "message": "Hi Tianjie, I took a look at the subsequent change, which adds the `--placeholder_file` parameter to ota_tools_from_target_files.py, and starts consuming this method.\n\nInstead of adding new methods to produce the dimension variants, couldn\u0027t we instead do something like:\n```\nvarying_property_definitions \u003d read_varying_properties_from_file()\nproperty_variants \u003d calculate_cartesian_product(varying_property_definitions)\nfingerprints \u003d set()\nfor pv in property_variants:\n  info_dict \u003d LoadInfoDict(input_file, externally_defined_properties\u003dpv)\n  build_info \u003d BuildInfo(info_dict)\n  fingerprints.add(build_info.fingerprint())\n```\n\nThis would certainly be a more expensive operation than what is defined here, but it has the (IMO) major advantage that it doesn\u0027t duplicate any logic. There is only one piece of code that needs to know about fingerprint construction, and that is `BuildInfo.CalculateFingerprint()`. The set of possible fingerprints is produced by iteration over the cartesian product of inputs to the fingerprint resolution algorithm.\n\nWDYT?",
      "parentUuid": "7bf6a673_b5141710",
      "revId": "5a6a9576c980aac52cbb894a75e3d36d84a9af84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15cfc1a2_90ce099b",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 10
      },
      "lineNbr": 580,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2020-05-06T02:24:46Z",
      "side": 1,
      "message": "Yes, we would need to load the file multiple times, and that\u0027s the main reason I didn\u0027t implement it this way. But I can modify the logic if you think it\u0027s cleaner. And with this algorithm, we don\u0027t need the new class PartitionBuildProps at all.",
      "parentUuid": "c9f24348_02bcfcdc",
      "revId": "5a6a9576c980aac52cbb894a75e3d36d84a9af84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf56827b_90f1b256",
        "filename": "tools/releasetools/common.py",
        "patchSetId": 10
      },
      "lineNbr": 580,
      "author": {
        "id": 1340374
      },
      "writtenOn": "2020-05-06T02:54:36Z",
      "side": 1,
      "message": "Personally, if performance is not a concern, then yes, I\u0027d go with the simpler solution, so as to have less code to maintain and test. I will defer to your judgement here though, since this isn\u0027t a functional issue.",
      "parentUuid": "15cfc1a2_90ce099b",
      "revId": "5a6a9576c980aac52cbb894a75e3d36d84a9af84",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}