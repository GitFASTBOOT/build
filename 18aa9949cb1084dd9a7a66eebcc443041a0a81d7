{
  "comments": [
    {
      "key": {
        "uuid": "6abaed80_76f08d37",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-02T13:57:40Z",
      "side": 1,
      "message": "Can we instead have one module per combination (\u003cname\u003e, \u003carch\u003e), where \u003cname\u003e is the name of boot image (\"boot\" or \"art\"), and \u003carch\u003e is the target architecture, and add all files to it? (Instead of having a separate module for .vdex files.) It can be named:\n\n  dexpreopt_bootjars_install.\u003cname\u003e_\u003carch\u003e\n\nAnd it should contain the following files (where * expands to the names of various Java libraries):\n\n  \u003cinstall-dir\u003e/\u003carch\u003e/\u003cname\u003e-*.{art,oat,vdex}\n  \u003cinstall-dir\u003e/\u003cname\u003e-*.vdex\n\nThen perhaps phony module is not needed?",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a4352a_875ea7a7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-02T17:46:17Z",
      "side": 1,
      "message": "I think that\u0027s doable, that is one of my options when I started this CL.\nIs there any reason we don\u0027t want phony package? IMO both approaches yield the same effect",
      "parentUuid": "6abaed80_76f08d37",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba634beb_1013997d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "Right now I think we have too many modules (from looking at the code I got the impression that we have one module per each .art, .oat and .vdex file). See the comments below.\n\nI just want to avoid creating many tiny modules when one large module is enough.",
      "parentUuid": "30a4352a_875ea7a7",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9397e4ec_9334e738",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-05T06:30:28Z",
      "side": 1,
      "message": "\u003e (from looking at the code I got the impression that we have one module per each .art, .oat and .vdex file)\n\nRight I\u0027m creating one module for each file that\u0027s being installed (like the way APEX modules are done).\nWhen I\u0027m writing this I try to write as little \"native makefile target\" as possible, and use as much predefined macros as possible.\nMy reasoning is that the more this piece of code is decoupled from native Make syntax (direct manipulation of ALL_MODULES.*.INSTALLED vars) and rely on the Android build system\u0027s abstraction (LOCAL_* vars), the less likely this is going to break in the future.\n\n\u003e I just want to avoid creating many tiny modules when one large module is enough.\n\nFair point, but I\u0027d like to point out that creating one large module that installs all files may actually bloat the build rule more than creating many tiny modules, let me explain..\n\nLet\u0027s say we have module A B C that belong to a boot image.\nIf we have a single meta module M that installs all boot images, then M would install boot-{A,B,C}.{art,odex,vdex}. When A B C depend on M the generated build rule  would be \"{A,B,C}.jar : boot-{A,B,C}.{art,odex,vdex}, which leads to 3xN^2 of dependency edges.\nIf we have one tiny module for each file and a phony module P (or the first \"boot-*.art\") to represent the whole set of files, then A B C would depend on P and P would depend on boot-{A,B,C}.{art,odex,vdex}. The generated build rule would be \"{A,B,C}.jar : P AND P : boot-{A,B,C}.{art,odex,vdex}\", which leads to 4xN dependency edges.\n\nBut I\u0027d also like to point out that as the number of files in the boot image isn\u0027t that big to begin with, this difference is probably neglectable.\nSo all that being said, I don\u0027t have a very strong opinion. I could change this to generate one module per boot image per arch, or just one module per boot image (one module to include both arch)?",
      "parentUuid": "ba634beb_1013997d",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b711f4d_ebc57157",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-06T09:17:05Z",
      "side": 1,
      "message": "Just one module per boot image (including all arches) seems like a good idea. Especially if it simplifies the implementation.\n\nTo clarify, my previous idea was to have the following dependency structure:\n\n  A.jar : boot-A.{art,oat,vdex}\n  B.jar : boot-B.{art,oat,vdex}\n  C.jar : boot-C.{art,oat,vdex}\n\nIt\u0027s 3*N edges, not 3*N^2. I see the difficulty with the shared .vdex file, but I\u0027d probably put it only int the primary arch dependencies. Merging arches as you suggested is even better.\n\nThanks for pointing out at the possible increase of build graph edges as opposed to the increase of nodes (modules). I think both metrics matter, because parsing .mk files with lots of tiny modules also takes time (and the fact that we do so for apexes doesn\u0027t justify it). Not that I did any measurements, it\u0027s pure speculation.",
      "parentUuid": "9397e4ec_9334e738",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6013f3e_35d5da77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-06T13:19:25Z",
      "side": 1,
      "message": "\u003e To clarify, my previous idea was to have the following dependency structure:\n\nAhh thanks for clarifying. I think that\u0027s almost doable, but a problem I can think of is that it might be hard to attribute each boot-\u003cmodule\u003e.{art,odex,vdex} back to the original module.\n\nBecause the image \"stem\" (\"boot\" or possibly other name) is not known to Make and in some cases the installed file is named \"boot.{art,odex,vdex}\" without the middle part that indicates the original module name.\n\nI guess I\u0027ll have to modify dexpreopt_bootjars.go to expose more information if I go this route (attribute each boot-\u003cmodule\u003e.* to \u003cmodule\u003e)?\n\n\nAnother question is, in the original logic there is a dependency of:\n\nboot.art : boot.{odex,vdex} boot-B.{art,odex,vdex} boot-C.{art,odex,vdex}\n\nDo we need not to keep this logic? This makes \"installing boot.art\" to automatically install the whole set of boot images. This is also the reason why I thought there need N^2 edges because for each {A,B,C}.jar need to depend on every boot-{A,B,C}.* ?\n\n\u003e Not that I did any measurements, it\u0027s pure speculation.\n\nNeither do I. And I think the number of files is too small that makes it hard to measure.",
      "parentUuid": "2b711f4d_ebc57157",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d793ba9c_65e31d47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-06T17:03:25Z",
      "side": 1,
      "message": "\u003e I guess I\u0027ll have to modify dexpreopt_bootjars.go [...]\n\nYes, if you go via that route, then I would just make dexpreopt_bootjars.go generate variables with the necessary contents. But I suggest trying your other idea (adding everything to one module) first, it seems simpler. Have one phony module M and add all necessary files to ALL_MODULES.M.INSTALLED.\n\n\u003e Do we need not to keep this logic?\n\nWe do need to install those files somehow. If you can make it cleaner, feel free to do so (but please make it in a separate Cl, either before or after this one).",
      "parentUuid": "a6013f3e_35d5da77",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59753836_51e67c2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-06T19:05:50Z",
      "side": 1,
      "message": "\u003e But I suggest trying your other idea (adding everything to one module) first\n\nTurns out I *have* to go this route (at least for now). Due to the jacoco coverage files requirement, I need to maintain the `$(DEFAULT_DEX_PREOPT_INSTALLED_IMAGE): $(LOCAL_BUILT_MODULE)` logic so that jacoco of each bootjar is generated. (core/soong_java_prebuilt.mk)\n\nhmm but adding all files to ALL_MODULES.M.INSTALLED would be the O(N^2) edges case, i.e.\n```\nALL_MODULES.M.INSTALLED :\u003d boot-A.art boot-B.art boot-C.art\nALL_MODULES.A.INSTALLED :\u003d A.jar\nALL_MODULES.B.INSTALLED :\u003d B.jar\nALL_MODULES.C.INSTALLED :\u003d C.jar\n\n$(ALL_MODULES.A.INSTALLED) : $(ALL_MODULES.M.INSTALLED)\n$(ALL_MODULES.B.INSTALLED) : $(ALL_MODULES.M.INSTALLED)\n$(ALL_MODULES.C.INSTALLED) : $(ALL_MODULES.M.INSTALLED)\n```\n\nThe CL right now uses O(N) edges because I used an extra Phony module and the phony depends on each module (extra layer of indirection).\n\nSo it\u0027s either\n1. O(N) edges with many tiny modules or\n2. O(N^2) edges with small number of modules\n\nCan\u0027t really tell which is better. Probably go (2) for simplicity.\n\nFeels like the most \"right\" way is to attribute each boot-\u003cmodule\u003e.* back to \u003cmodule\u003e (O(N) edges, no extra module), but this may break jacoco so no :(",
      "parentUuid": "d793ba9c_65e31d47",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d822f618_d63e04a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-09T05:44:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59753836_51e67c2a",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be7dbbec_7507ac88",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-02T13:57:40Z",
      "side": 1,
      "message": "I think we only need these install logic for the Framework boot image extension that has name \"boot\", but not for the primary ART boot image that has name \"art\" (the latter is installed as a part of ART apex already).\n\nI realize this must sound extremely confusing, as I use ART-specific terms like \"boot image extension\" and \"primary boot image\". They are explained in this doc: go/art-images (firs few sections should be enough).",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35fe2461_b1914552",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-02T17:46:17Z",
      "side": 1,
      "message": "No that actually makes total sense, TBH I\u0027ve been wondering why there are two set of images, ART APEX and framework boot images. The \"primary\" and \"extension\" relation totally makes sense!\n\nTBH I\u0027m just imitating the original logic, right now DEFAULT_DEX_PREOPT_INSTALLED_IMAGE gets set to \"/apex/com.android.art/.../boot.art /system/framework/.../boot-framework.art\". With this change DEFAULT_DEX_PREOPT_INSTALLED_MODULE gets set to \"dexpreopt_bootjar.art_arm64 dexpreopt_bootjar.boot_arm64\", which correspond to the \"art\" and \"boot\" image.\nI agree the apex image \"art\" is actually a fake install path (it\u0027s pointing to the apex staging directory), so removing it from DEFAULT_DEX_PREOPT_INSTALLED_MODULE is probably harmless, but I\u0027ll suggest we put semantic changes in a follow-up change.\n\nThere\u0027s also an oddity I noticed, when building for userdebug build, the apex installed on device is \"com.android.art.debug\", but the \"art\" image path listed in DEXPREOPT_IMAGE_BUILT_INSTALLED_art_arm still refers to \"com.android.art\". I guess this is harmless though because like you said apex are installed with another rule.\n\nMaybe instead of treating \"art\" image specially here, we should just make soong not output apex images into DEXPREOPT_IMAGE_NAMES?\nRight now the value of DEXPREOPT_IMAGE_NAMES (for aosp_arm64) is \"art boot\", maybe it should not contain \"art\" because it\u0027s apex and installed differently?",
      "parentUuid": "be7dbbec_7507ac88",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "885111ec_f21cffe7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "\u003e suggest we put semantic changes in a follow-up change\n \nAgreed. I did some investigation and experiments (aosp/1354650) and realized that we have a few obstacles for removing \"art\" image (like USE_ART_APEX_IMAGE variable). The code can be cleaned up, but it\u0027s not that trivial.\n\n\u003e There\u0027s also an oddity I noticed\n\nYes, I suppose that on device it would be named just com.android.art, so on-device paths differ from on-host paths.",
      "parentUuid": "35fe2461_b1914552",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07e775f2_3206f736",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-05T06:30:28Z",
      "side": 1,
      "message": "got it.",
      "parentUuid": "885111ec_f21cffe7",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 24
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83d92d99_3b75f50c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-02T13:57:40Z",
      "side": 1,
      "message": "What does this mean?",
      "range": {
        "startLine": 22,
        "startChar": 6,
        "endLine": 22,
        "endChar": 29
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcb97927_42fcd79b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-02T17:46:17Z",
      "side": 1,
      "message": "Verify that the built artifact doesn\u0027t change with Treehugger. This change only affects the build rules, build artifacts (*-target_files-*.zip) shouldn\u0027t change. I compare the contents of *-target_files-*.zip with and without this change",
      "parentUuid": "83d92d99_3b75f50c",
      "range": {
        "startLine": 22,
        "startChar": 6,
        "endLine": 22,
        "endChar": 29
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "738061af_745eaf1c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-02T13:57:40Z",
      "side": 1,
      "message": "Can you list the contents of one such module in the commit message (possibly abbreviated), just to make sure all necessary files are in place. I\u0027m a bit worried that .vdex\u0027es should have both symlinks and non-symlinks.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 68
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "411c5d2d_275c36e7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-02T17:46:17Z",
      "side": 1,
      "message": "The list of files is exactly the list I listed in the bug, such as \n- system/framework/arm/boot-core-icu4j.art\n- system/framework/arm/boot-core-icu4j.oat\n- system/framework/arm/boot-core-icu4j.vdex\n- system/framework/arm64/boot-core-icu4j.art\n- system/framework/arm64/boot-core-icu4j.oat\n- system/framework/arm64/boot-core-icu4j.vdex\n- system/framework/boot-core-icu4j.vdex\n\nI make it that vdex symlinks is a dependency of the actual vdex file, so it\u0027s roughly like:\n\nboot-core-icu4j.vdex.dexpreopt_bootjar.boot: system/framework/boot-core-icu4j.vdex system/framework/arm64/boot-core-icu4j.vdex system/framework/arm/boot-core-icu4j.vdex",
      "parentUuid": "738061af_745eaf1c",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 68
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56a4af17_1f38af3a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "Ok, thanks.",
      "parentUuid": "411c5d2d_275c36e7",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 68
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be855a2e_68943da4",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "Can you keep copy-vdex-file and the logic that skipped vdex installation if my_boot_image_arch is one of TARGET_2ND_ARCH HOST_2ND_ARCH instead of passing another variable my_boot_image_vdex_extra_symlink_arch? It is somewhat easier to read, as you don\u0027t have the extra variable. (And you already have is_primary_arch below.)",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 99
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c144e4fe_431930d7",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-03T18:14:23Z",
      "side": 1,
      "message": "I add ..._extra_symlink_... because I don\u0027t want arm image to depend on arm64 image. That is,\n\nboot_arm64 installs .vdex and lib64 symlink.\nboot_arm installs lib symlink and depend on .vdex file which is installed by the arm64 image?\n\nThis would mean I\u0027ll have to create a dependency from boot_arm to boot_arm64, which means I\u0027ll need to pass the primary arch via an extra variable when creating the second arch image.\n\nHow about just merge all arches into one module? Do we need one module per arch?",
      "parentUuid": "be855a2e_68943da4",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 99
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57ec4f6f_8bc3afeb",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-06T09:17:05Z",
      "side": 1,
      "message": "Merging sounds good! I don\u0027t think there is a use case when they would need to be used separately.",
      "parentUuid": "c144e4fe_431930d7",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 99
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b789904_ba184f87",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-09T05:44:41Z",
      "side": 1,
      "message": "Couldn\u0027t merge the two arches because host tests needs separate sets of boot images for 32/64 arch :( (http://cs/aosp-master/art/build/Android.gtest.mk?l\u003d207\u0026rcl\u003d671d34d917aae4f9dd402f71a2632556f53d9e13)",
      "parentUuid": "57ec4f6f_8bc3afeb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 99
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aa82894_ec5c058f",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-14T07:59:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1b789904_ba184f87",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 99
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "741306c0_cbb9a6ad",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "Please add the comment like:\n\n  # We don\u0027t have a LOCAL_PATH for the auto-generated modules, so let it be the $(BUILD_SYSTEM).",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 29
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e911891_4e788931",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-09T05:44:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "741306c0_cbb9a6ad",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 29
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0674ac97_a5d3b15f",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "I would expand comment a bit to give more context, something like:\n\n  # Define a module that gathers together all dexpreopt files for a given boot jar.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa9da169_60ac487d",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-09T05:44:41Z",
      "side": 1,
      "message": "Explained in the file header comment block",
      "parentUuid": "0674ac97_a5d3b15f",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1739a0fc_81e13e62",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1550939
      },
      "writtenOn": "2020-07-03T16:04:13Z",
      "side": 1,
      "message": "This ranges over all .art and .oat file pairs, right? And creates a separate module for each file using $(call dexpreopt-bootjar-module ...). It think what we want instead is either of the two:\n\n  - one module per boot jar, containing .art, .oat, .vdex and .vdex symlink\n  - one module for all boot jars, containing all .art, .oat, .vdex and .vdex symlink files",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 64
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b738f8c_b7b4d1ae",
        "filename": "core/dex_preopt_libart.mk",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-07-05T06:30:28Z",
      "side": 1,
      "message": "replied in comments above",
      "parentUuid": "1739a0fc_81e13e62",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 64
      },
      "revId": "18aa9949cb1084dd9a7a66eebcc443041a0a81d7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}