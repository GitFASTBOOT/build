{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e93b078_b5f41d36",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-14T08:11:39Z",
      "side": 1,
      "message": "The `id` is an implementation detail of the storage implementation. I don\u0027t think it should be exposed in the public, backwards-compatible API that is aconfig.proto.\n\nIsn\u0027t it possible to calculate IDs on the fly when generating storage files or auto-generating the lookup code?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bffa118e_b6e72da8",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-14T14:41:20Z",
      "side": 1,
      "message": "The flag id is used at two locations in the build system. First, the codegen uses it, it uses flag id to know where within package is this flag stored. Then it is used by storage mechanism to create flag value files in this order. It is crucial to have these two orders match exactly.\n\nCan we runtime assign id at both locations: yes. But the biggest fear is two sources of truth and they may silently diverge and it is hard to detect that. Rather it is much more robust to have it created as a part of cache, thus single source of truth, and strict consistency between codegen and storage creation.",
      "parentUuid": "6e93b078_b5f41d36",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c60baf5_3b508d38",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-14T20:48:06Z",
      "side": 1,
      "message": "Those are valid concerns but I am still reluctant to encoding the ID in the public API and committing to that field for ever and ever. What if the storage solution changes in the next 6 months?\n\nCan you describe the scenarios where things can potentially go wrong if we don\u0027t encode the id in the proto, please?",
      "parentUuid": "bffa118e_b6e72da8",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "350c8e86_542f8497",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-14T21:12:29Z",
      "side": 1,
      "message": "For example, assuming we are not adding this id field. During codegen, say we assign flag ids in a way that foo is 0 and bar is 1. So the generated code expects foo\u0027s value is before bar\u0027s value. But during storage file creation, we assigned foo to flag id 1 and bar to flag id 0. So bar is value appeared before foo\u0027s value in storage file. Then the generated code for foo is actually getting bar\u0027s value.\n\nSuch errors are silent and hard to guard and debug. If we have the id predetermined in the cache, and both codegen and storage creation are depending on the cache files, consistency can be ensured.",
      "parentUuid": "5c60baf5_3b508d38",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8186280_00ec1cff",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-14T21:18:50Z",
      "side": 1,
      "message": "Just curious, what is the concern of adding it to the proto. I understand that once it is added, we would keep it there forever. So it might make the files that contain parsed flags larger. Are there other concerns?",
      "parentUuid": "350c8e86_542f8497",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53f3f69c_84963ba8",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-15T08:20:32Z",
      "side": 1,
      "message": "My concern about adding the field to the proto is I don\u0027t think it is part of the public API surface of aconfig parsed flags. I doesn\u0027t make sense for an external client, like flag flipper or gantry, to know about this field.\n\nThe public API already has its flaws: I don\u0027t like that namespace is part of it. Adding another \"private\" field wouldn\u0027t be the end of the world, just a step in the wrong direction.\n\nI feel the ID assignment is solved by running the same sorting logic on the cache input. The real danger is if the build passes in different cache files, but codegen and create-storage both only accept a single cache file, not multiple ones like the dump command. Am I missing some other aconfig invocation where something like \"id \u003d\u003d index of flags sorted by fully qualified name\" won\u0027t work?",
      "parentUuid": "c8186280_00ec1cff",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a43f07d_31aeee47",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1937565
      },
      "writtenOn": "2023-12-15T08:43:58Z",
      "side": 1,
      "message": "I wish we had a private proto, and a public API proto.",
      "parentUuid": "53f3f69c_84963ba8",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6998c755_3728135f",
        "filename": "tools/aconfig/protos/aconfig.proto",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1882770
      },
      "writtenOn": "2023-12-15T13:25:53Z",
      "side": 1,
      "message": "Codegen would take a single cache file, storage creation takes multiple cache files (all the cache files for a container). Would a simple sorting logic work? I think so. But really it is the other side of the coin, what if we somehow mess it up, how do we prevent that.\n\nIs it a significant effort to add a private proto? If not, I can look into that.",
      "parentUuid": "1a43f07d_31aeee47",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 26
      },
      "revId": "5ba5cc20f21e427152ab346bf410a296b379d323",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}