{
  "comments": [
    {
      "key": {
        "uuid": "2b4137b8_657de745",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-02-04T22:14:45Z",
      "side": 1,
      "message": "Is this medium because it can happen in Java or Kotlin? I\u0027m not fully understanding why we chopped the java_ portion off of some of these API calls.",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 10
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5a525c6_9c802a02",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2020-02-04T23:38:35Z",
      "side": 1,
      "message": "I don\u0027t think they can happen with Kotlin. Here I only added or changed warning patterns found for Java in existing build.log or in this file. If later they are found with Kotlin too, we can find someway to define the warning for multiple languages.\n \nSince we moved these warning patterns into separate Python modules named *_warn_patterns.py, we can now use shorter names. For example, cpp_warn_patterns.py also uses high/low/medium/skip/... functions to define many patterns. I think we will have more follow up CLs to clean up these java warning patterns, and generate them from Java ErrorProne compiler source.",
      "parentUuid": "2b4137b8_657de745",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 10
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3536fe91_a150e1a6",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-02-05T16:29:00Z",
      "side": 1,
      "message": "But that\u0027s my issue. Isn\u0027t it more descriptive to call this java_medium rather than medium? It helps understand why/where these errors are being classified.",
      "parentUuid": "a5a525c6_9c802a02",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 10
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd81a725_b0b0deb1",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2020-02-05T18:06:02Z",
      "side": 1,
      "message": "In warnings.html, there are prefixes like Java or Kotlin in each warning group description.\nIn Python modules like cpp_warn_patterns and java_warn_patterns, we can avoid the repeated prefix. However, other_warn_patterns module has multiple languages, so the patterns have kotlin or asm prefix. If we have kotlin_warn_patterns module in the future, it does not need to repeat \u0027kotlin\u0027 prefix.",
      "parentUuid": "3536fe91_a150e1a6",
      "range": {
        "startLine": 73,
        "startChar": 4,
        "endLine": 73,
        "endChar": 10
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e35fe4a_6299332c",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2020-02-04T22:14:45Z",
      "side": 1,
      "message": "annotation",
      "range": {
        "startLine": 74,
        "startChar": 20,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee971560_70b5619f",
        "filename": "tools/warn/java_warn_patterns.py",
        "patchSetId": 1
      },
      "lineNbr": 74,
      "author": {
        "id": 1052399
      },
      "writtenOn": "2020-02-04T23:38:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e35fe4a_6299332c",
      "range": {
        "startLine": 74,
        "startChar": 20,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "167d8c5b2a0ef340979af4ac6603d05b082495bd",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}