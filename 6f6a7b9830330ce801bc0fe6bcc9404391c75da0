{
  "comments": [
    {
      "key": {
        "uuid": "3c8f15af_3e48a9a3",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-03-25T15:31:27Z",
      "side": 1,
      "message": "Is there some way we can get rid of (or overwrite, or version) the existing build output from out/host/linux-86/bin if FORCE_BUILD_LLVM_COMPONENTS is true ? I spent 15-20 minutes hunting down an issue that turned out to be a stale tblgen binary in out/host/linux-x86/bin/tblgen (built sometime in January).",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc64e5c8_7a2959b1",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-03-25T15:56:49Z",
      "side": 1,
      "message": "I guess we could add a cleanspec everytime something in external/llvm or external/clang changes, but I guess then the FORCE_ flag isn\u0027t really a FORCE.",
      "parentUuid": "3c8f15af_3e48a9a3",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c23318f_b4b92ed0",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1003981
      },
      "writtenOn": "2014-03-26T01:46:39Z",
      "side": 1,
      "message": "Unfortunately you are on your own when you switch the value of these environmental variable. Such variables are rarely used and the users should know what files need to clean when the flag is enabled.",
      "parentUuid": "bc64e5c8_7a2959b1",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f904af03_1c951524",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1014443
      },
      "writtenOn": "2014-03-26T12:21:48Z",
      "side": 1,
      "message": "I see, that\u0027s fine. I expect most users will start with a make clobber anyway, because dependencies aren\u0027t set up correctly. i.e, when using USE_BUILT_LLVM_COMPONENTS the build system *can\u0027t* know that the compiler hasn\u0027t changed (from prebuilts/ to out/).\n\nI just wasn\u0027t sure if this was going to be used on the continuous build (or similar.)",
      "parentUuid": "1c23318f_b4b92ed0",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcd6a580_6ddef1f6",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003981
      },
      "writtenOn": "2014-03-25T01:40:43Z",
      "side": 1,
      "message": "Why do we need this?\nEven clang is built from source, we still need the dependency: you have to build clang before the build system can run clang to compile source files.",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcd6a580_30461071",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1017430
      },
      "writtenOn": "2014-03-25T02:36:05Z",
      "side": 1,
      "message": "this was to break the circular dependency you mentioned in the other changes. the idea is that we have two different settings that are not intended to be used at the same time:\n\n1. FORCE_BUILD_LLVM_COMPONENTS: this will build the self-hosted clang/LLVM using prebuilts/clang and place the output in out/host.\n2. USE_BUILT_LLVM_COMPONENTS: don\u0027t rebuild LLVM/clang, but use whatever clang is present in out/host.\n\ndefinitely open to other suggestions.",
      "parentUuid": "bcd6a580_6ddef1f6",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc1f3d43_78c4092d",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003981
      },
      "writtenOn": "2014-03-26T01:46:39Z",
      "side": 1,
      "message": "Hmmm, the second case is interesting: you may use the buggy clang to build the clang source you\u0027ve just made a fix. It\u0027s intriguing but seems unnecessary to me: we should just use the prebuilt clang to build clang itself in that case.\nLet me think more about how to break the circurlar dependency tomorrow.",
      "parentUuid": "bcd6a580_30461071",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc1c3954_3dba7f9f",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1017430
      },
      "writtenOn": "2014-03-26T05:49:09Z",
      "side": 1,
      "message": "USE_BUILT is more about ability to test rebases and cherry-picks without having to do prebuilt changes every time for testing. it will probably only be used by me, srhines, and others like us.",
      "parentUuid": "fc1f3d43_78c4092d",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "993ad3c3_5174b455",
        "filename": "core/binary.mk",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003981
      },
      "writtenOn": "2014-03-27T22:45:41Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a good idea to use the built clang without setting up the dependency. Aside from the uncertainty I mentioned, there will also be race condition: while the build system is compiling clang itself (e.g. it\u0027s just writing out out/host/linux-x86/bin/clang), clang is called to compile other files. You even don\u0027t know if a file is compiled by the old clang or the newly built clang.\nTo break the inherent circular dependency, you have to copy the newly built clang to the prebuilt directory and do the test.\n\nAlso, it\u0027s really confusing to have both FORCE_BUILD_LLVM_COMPONENTS and USE_BUILT_LLVM_COMPONENTS. \nWith that approach, I don\u0027t see the necessity to keep either of them. The build system just points clang to the prebuilt, and it always builds clang from source in the source tree, but the newly built clang isn\u0027t used in the same build process.",
      "parentUuid": "dc1c3954_3dba7f9f",
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "194fc37f_c85c6fb7",
        "filename": "core/clang/config.mk",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1017430
      },
      "writtenOn": "2014-03-28T19:24:56Z",
      "side": 1,
      "message": "if we\u0027re going to keep FORCE_BUILD_LLVM_COMPONENTS as a way to build LLVM/Clang and require that built files have to be copied to the prebuilt directory before they can be used, should we always keep LLVM_PREBUILTS_PATH set to prebuilts/clang? that would make the rest of my changes simpler or entirely unnecessary.",
      "range": {
        "startLine": 9,
        "startChar": 13,
        "endLine": 9,
        "endChar": 38
      },
      "revId": "6f6a7b9830330ce801bc0fe6bcc9404391c75da0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}