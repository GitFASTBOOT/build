{
  "comments": [
    {
      "key": {
        "uuid": "0115f03f_5b132f70",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1071150
      },
      "writtenOn": "2018-11-16T15:25:54Z",
      "side": 1,
      "message": "Just to be consistent with docs, \"release Runtime Module APEX\".",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 39
      },
      "revId": "fd1e16851d5f2b65d8ae016b084276479df2d295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3695d09c_4de415e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-11-16T15:56:48Z",
      "side": 1,
      "message": "Here \"module\" refers to a \"build module\", in the Android build system/Soong parlance. \"Runtime Module APEX module\" feels a bit hard to read. :-)",
      "parentUuid": "0115f03f_5b132f70",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 39
      },
      "revId": "fd1e16851d5f2b65d8ae016b084276479df2d295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c447d52_3b6c1022",
        "filename": "target/product/runtime_libart.mk",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1060959
      },
      "writtenOn": "2018-11-16T17:57:47Z",
      "side": 1,
      "message": "depending on PRODUCT_\u003cx\u003e variables inside a product mk is not particularly robust, as all children must set the variable before inheriting (standard make condition apply, you get no warnings when you\u0027re doing it wrong).\n\ncan this logic live in the Android.mk that defines this module instead? Make a phony package com.android.runtime that depends on the right targets depending on your choice of flags. The PRODUCT variables will have been set appropriately at that point, and you keep this logic out of the core of the build system.\n\nWhat products set these flags BTW? Another approach is just leaving this out of the core products for now and just import it in those products.",
      "revId": "fd1e16851d5f2b65d8ae016b084276479df2d295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b87b8d9b_9e0b741d",
        "filename": "target/product/runtime_libart.mk",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 1052644
      },
      "writtenOn": "2018-11-16T19:52:27Z",
      "side": 1,
      "message": "\u003e depending on PRODUCT_\u003cx\u003e variables inside a product mk is not particularly robust, as all children must set the variable before inheriting (standard make condition apply, you get no warnings when you\u0027re doing it wrong).\n\u003e \n\u003e can this logic live in the Android.mk that defines this module instead? Make a phony package com.android.runtime that depends on the right targets depending on your choice of flags. The PRODUCT variables will have been set appropriately at that point, and you keep this logic out of the core of the build system.\n\nThanks for the tip Anton. I\u0027ve moved this logic to art/Android.mk (https://android-review.googlesource.com/c/platform/art/+/829869).\n\n\u003e What products set these flags BTW? Another approach is just leaving this out of the core products for now and just import it in those products.\n\nSo far, the only products I\u0027ve seen that set `PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD` to `false` (for space reasons) are `marlin-*` and `sailfish-*` (but not `aosp_marlin-*` nor `aosp_sailfish-*`). (Perhaps it\u0027s also used for some Android Go configurations?).",
      "parentUuid": "4c447d52_3b6c1022",
      "revId": "fd1e16851d5f2b65d8ae016b084276479df2d295",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}