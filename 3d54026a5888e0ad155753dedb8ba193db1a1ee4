{
  "comments": [
    {
      "key": {
        "uuid": "9fca1214_0bdb9a59",
        "filename": "core/envsetup.mk",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-09-15T21:35:06Z",
      "side": 1,
      "message": "same comment as other file about LOCAL_EMMA_INSTRUMENT",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 204,
        "endChar": 39
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5575d9b8_179bea49",
        "filename": "core/envsetup.mk",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-09-15T21:39:28Z",
      "side": 1,
      "message": "This is global configuration, not per-module.",
      "parentUuid": "9fca1214_0bdb9a59",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 204,
        "endChar": 39
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "601502d5_8b1a240a",
        "filename": "core/java.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-09-15T21:35:06Z",
      "side": 1,
      "message": "My understanding is that LOCAL_EMMA_INSTRUMENT is supposed to indicate whether the current module is supposed to be instrumented. Now that this is getting moved out of core-libart and into a common spot, how do we feel about  using\n\nifeq ($(LOCAL_EMMA_INSTRUMENT),true)\n\n(and updating the value of LOCAL_EMMA_INSTRUMENT if need be)?",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b328a54a_9d5e0faf",
        "filename": "core/java.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-09-15T21:39:02Z",
      "side": 1,
      "message": "This isn\u0027t whether the library is being instrumented, it is whether jacocoagent is in the classpath.  It may be necessary to have jacocoagent even if a module is not instrumented if its dependencies are instrumented.",
      "parentUuid": "601502d5_8b1a240a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "866910b3_58368f10",
        "filename": "core/java.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1137668
      },
      "writtenOn": "2017-09-15T22:13:00Z",
      "side": 1,
      "message": "Do we know (probably a question for allenhair@) whether `make -j EMMA_INSTRUMENT_STATIC\u003dtrue` and `make -j EMMA_INSTRUMENT\u003dtrue` are both use cases that happen nowadays and whether their callers expect different results?\n\nMy limited understanding of their meanings comes from https://googleplex-android-review.git.corp.google.com/c/platform/build/+/219555 , which seems to me to say that EMMA_INSTRUMENT_STATIC changes the list of modules to instrument and also merges the jacoco jar into each jacoco-enabled jar.\n\nIf we don\u0027t have both use cases, then it seems to me that removing references to one variable or the other would make the code easier to understand and to use.\n\nIf we do want to keep both references, then it seems to me that it\u0027d be nice to change the comment on line 25 to something more like \"If instrumentation is enabled and jacoco isn\u0027t being copied into module\u0027s artifact, then add jacoco to the classpath\"\n\nIt seems to me that it\u0027d be easier to read if we sorted the ifs such that the globals were all on the outside (or all on the inside), that is, moving line 21 below line 23\n\nI\u0027ve looked around a bunch for an explanation of LOCAL_NO_STANDARD_LIBRARIES but I haven\u0027t found one. Could you elaborate on what it\u0027s for?",
      "parentUuid": "b328a54a_9d5e0faf",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e438f4bd_e9d6a0f8",
        "filename": "core/java.mk",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2017-09-15T22:25:48Z",
      "side": 1,
      "message": "I checked with allenhair, both are used.\n\nLOCAL_NO_STANDARD_LIBRARIES means don\u0027t link against the normal default libraries.  For java, that means have an empty classpath and bootclasspath, instead of automatically using core-libart, core-oj, etc.",
      "parentUuid": "866910b3_58368f10",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "3d54026a5888e0ad155753dedb8ba193db1a1ee4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}